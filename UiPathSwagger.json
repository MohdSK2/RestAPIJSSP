{
    "swagger": "2.0",
    "info": {
      "title": "UiPath.WebApi 13.0",
      "description": "Orchestrator API",
      "version": "13.0"
    },
    "host": "cloud.uipath.com",
    "basePath": "/Mohdtjuvhum/MohdDefault/orchestrator_/",
    "schemes": [
      "https"
    ],
    "paths": {
      "/api/Account/Authenticate": {
        "post": {
          "tags": [
            "Account"
          ],
          "summary": "Authenticates the user based on user name and password",
          "description": "Authenticates the user based on user name and password.",
          "operationId": "Account_Authenticate",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "The login parameters.",
              "schema": {
                "$ref": "#/definitions/LoginModel"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful authentication",
              "schema": {
                "$ref": "#/definitions/AjaxResponse"
              }
            }
          },
          "deprecated": true
        }
      },
      "/api/DirectoryService/GetDirectoryPermissions": {
        "get": {
          "tags": [
            "DirectoryService"
          ],
          "summary": "Gets directory permissions",
          "description": "OAuth required scopes: OR.Users or OR.Users.Read.\n\nRequired permissions: Users.View.",
          "operationId": "DirectoryService_GetDirectoryPermissions",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "username",
              "type": "string"
            },
            {
              "in": "query",
              "name": "domain",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DirectoryPermissionDto"
                }
              }
            }
          }
        }
      },
      "/api/DirectoryService/GetDomains": {
        "get": {
          "tags": [
            "DirectoryService"
          ],
          "summary": "Gets domains",
          "description": "OAuth required scopes: OR.Users or OR.Users.Read.\n\nRequired permissions: Users.View or Units.Edit or SubFolders.Edit.",
          "operationId": "DirectoryService_GetDomains",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DomainDto"
                }
              }
            }
          }
        }
      },
      "/api/DirectoryService/SearchForUsersAndGroups": {
        "get": {
          "tags": [
            "DirectoryService"
          ],
          "summary": "Search users and groups",
          "description": "OAuth required scopes: OR.Users or OR.Users.Read.\n\nRequired permissions: Users.View or Units.Edit or SubFolders.Edit.",
          "operationId": "DirectoryService_SearchForUsersAndGroups",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "searchContext",
              "description": "",
              "type": "string",
              "enum": [
                "All",
                "Users",
                "Groups",
                "Robots"
              ],
              "x-ms-enum": {
                "name": "SearchContext",
                "modelAsString": false
              }
            },
            {
              "in": "query",
              "name": "domain",
              "description": "",
              "type": "string"
            },
            {
              "in": "query",
              "name": "prefix",
              "description": "",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DirectoryObjectDto"
                }
              }
            }
          }
        }
      },
      "/api/FoldersNavigation/GetAllFoldersForCurrentUser": {
        "get": {
          "tags": [
            "FoldersNavigation"
          ],
          "summary": "Returns the folders the current user has access to.\r\nThe response will be a list of folders; the hierarchy can be reconstructed\r\nusing the ParentId properties. From the root to the folders the user has\r\nactually been assigned to, the folders will be marked as non-selectable\r\nand only the paths to the assigned-to folders will be included.\r\nFrom the assigned-to folders down to the leaves, the nodes will be marked as\r\nselectable and their children lists fully populated.",
          "description": "OAuth authentication is not supported.\n\nRequires authentication.",
          "operationId": "FoldersNavigation_GetAllFoldersForCurrentUser",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtendedFolderDto"
                }
              }
            }
          }
        }
      },
      "/api/FoldersNavigation/GetAllRolesForUser": {
        "get": {
          "tags": [
            "FoldersNavigation"
          ],
          "summary": "Returns a page of the user-folder assignments for the input user, including the roles for each folder.\r\nThe response also includes the folders assigned to the directory groups of the user.\r\nThe distinction between the folders assigned directly to the user and the ones assigned to one of his groups\r\ncan be made via the User field of the response.",
          "description": "OAuth authentication is not supported.\n\nRequired permissions: (Units.View - Gets roles from all folders) and (SubFolders.View - Gets roles only from folders where caller has SubFolders.View permission).",
          "operationId": "FoldersNavigation_GetAllRolesForUser",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "username",
              "description": "User name",
              "type": "string"
            },
            {
              "in": "query",
              "name": "skip",
              "description": "",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "take",
              "description": "",
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/UserRoleAssignmentsDto"
              }
            }
          }
        }
      },
      "/api/FoldersNavigation/GetFolderNavigationContextForCurrentUser": {
        "get": {
          "tags": [
            "FoldersNavigation"
          ],
          "summary": "Returns a subset (paginated) of direct children for a given folder, which are accessible to the current user.\r\nTo ease a folder tree structure navigation design, the list of ancestors for the given folder is also returned.",
          "description": "OAuth authentication is not supported.\n\nRequires authentication.",
          "operationId": "FoldersNavigation_GetFolderNavigationContextForCurrentUser",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "skip",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "take",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "folderId",
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/FolderNavigationContextDto"
              }
            }
          }
        }
      },
      "/api/FoldersNavigation/GetFoldersForCurrentUser": {
        "get": {
          "tags": [
            "FoldersNavigation"
          ],
          "summary": "Returns a filtered subset (paginated) of the folders the current user has access to.",
          "description": "OAuth authentication is not supported.\n\nRequires authentication.",
          "operationId": "FoldersNavigation_GetFoldersForCurrentUser",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "skip",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "take",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "searchText",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/PageResultDtoOfFolderDto"
              }
            }
          }
        }
      },
      "/api/Licensing/Acquire": {
        "post": {
          "tags": [
            "Licensing"
          ],
          "summary": "Acquire license units",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\n\nRequires authentication.",
          "operationId": "Licensing_Acquire",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "schema": {
                "$ref": "#/definitions/ConsumptionLicenseDto"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/LicenseResultDto"
              }
            },
            "400": {
              "description": "Bad Request"
            },
            "409": {
              "description": "Conflict"
            },
            "503": {
              "description": "Server Error"
            }
          }
        }
      },
      "/api/Licensing/Release": {
        "put": {
          "tags": [
            "Licensing"
          ],
          "summary": "Release acquired license units",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\n\nRequires authentication.",
          "operationId": "Licensing_Release",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "schema": {
                "$ref": "#/definitions/ConsumptionLicenseDto"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/LicenseResultDto"
              }
            },
            "400": {
              "description": "Bad Request"
            },
            "409": {
              "description": "Conflict"
            },
            "503": {
              "description": "Server Error"
            }
          }
        }
      },
      "/api/Logs": {
        "post": {
          "tags": [
            "Logs"
          ],
          "summary": "Inserts a log entry with a specified message in JSON format.",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Write.\n\nRequired permissions: (Logs.Create).\n\nExample of jMessage parameter.\r\n            \r\n     {\r\n         \"message\": \"TTT execution started\",\r\n         \"level\": \"Information\",\r\n         \"timeStamp\": \"2017-01-18T14:46:07.4152893+02:00\",\r\n         \"windowsIdentity\": \"DESKTOP-1L50L0P\\\\WindowsUser\",\r\n         \"agentSessionId\": \"00000000-0000-0000-0000-000000000000\",\r\n         \"processName\": \"TTT\",\r\n         \"fileName\": \"Main\",\r\n         \"jobId\": \"8066c309-cef8-4b47-9163-b273fc14cc43\"\r\n     }",
          "operationId": "Logs_Post",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "",
              "schema": {}
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully inserts a log message. Although it's a post, there's no need for an object to be returned"
            },
            "400": {
              "description": "jMessage is null or an Exception is thrown during insert"
            },
            "408": {
              "description": "Too many pending logging requests or timeout"
            }
          }
        }
      },
      "/api/Logs/SubmitLogs": {
        "post": {
          "tags": [
            "Logs"
          ],
          "summary": "Inserts a collection of log entries, each in a specific JSON format.",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Write.\n\nRequired permissions: (Logs.Create).\n\nExample of log entry:\r\n     {\r\n         \"message\": \"TTT execution started\",\r\n         \"level\": \"Information\",\r\n         \"timeStamp\": \"2017-01-18T14:46:07.4152893+02:00\",\r\n         \"windowsIdentity\": \"DESKTOP-1L50L0P\\\\WindowsUser\",\r\n         \"agentSessionId\": \"00000000-0000-0000-0000-000000000000\",\r\n         \"processName\": \"TTT\",\r\n         \"fileName\": \"Main\",\r\n         \"jobId\": \"8066c309-cef8-4b47-9163-b273fc14cc43\"\r\n     }",
          "operationId": "Logs_SubmitLogs",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Collection of string representations of JSON objects",
              "schema": {
                "description": "Collection of string representations of JSON objects",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully inserts the log entries"
            },
            "400": {
              "description": "logs is null or an Exception is thrown during insert"
            },
            "408": {
              "description": "Too many pending logging requests or timeout"
            }
          }
        }
      },
      "/api/Maintenance/End": {
        "post": {
          "tags": [
            "Maintenance"
          ],
          "summary": "Ends a maintenance window",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\n\nHost only. Requires authentication.",
          "operationId": "Maintenance_End",
          "parameters": [
            {
              "in": "query",
              "name": "tenantId",
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "204": {
              "description": "Success"
            }
          }
        }
      },
      "/api/Maintenance/Get": {
        "get": {
          "tags": [
            "Maintenance"
          ],
          "summary": "Gets the host admin logs.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Read.\n\nHost only. Required permissions: Audit.View.",
          "operationId": "Maintenance_Get",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "tenantId",
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "$ref": "#/definitions/MaintenanceSetting"
              }
            }
          }
        }
      },
      "/api/Maintenance/Start": {
        "post": {
          "tags": [
            "Maintenance"
          ],
          "summary": "Starts a maintenance window",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\n\nHost only. Requires authentication.",
          "operationId": "Maintenance_Start",
          "parameters": [
            {
              "in": "query",
              "name": "phase",
              "description": "Phase - UiPath.Orchestrator.DataContracts.MaintenanceState.Draining or UiPath.Orchestrator.DataContracts.MaintenanceState.Suspended",
              "type": "string",
              "enum": [
                "None",
                "Draining",
                "Suspended"
              ],
              "x-ms-enum": {
                "name": "MaintenanceState",
                "modelAsString": false
              }
            },
            {
              "in": "query",
              "name": "force",
              "description": "Whether to ignore errors during transition",
              "type": "boolean",
              "default": false
            },
            {
              "in": "query",
              "name": "killJobs",
              "description": "Whether to force-kill running jobs when transitioning to UiPath.Orchestrator.DataContracts.MaintenanceState.Suspended",
              "type": "boolean",
              "default": false
            },
            {
              "in": "query",
              "name": "tenantId",
              "description": "If tenant id is set, maintenance will start only for this tenant",
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "204": {
              "description": "Success"
            }
          }
        }
      },
      "/api/PackageFeeds/GetFolderFeed": {
        "get": {
          "tags": [
            "PackageFeeds"
          ],
          "summary": "Returns the feed id for a user assigned folder having specific feed",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Read.\n\nRequires authentication.",
          "operationId": "PackageFeeds_GetFolderFeed",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "folderId",
              "description": "",
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "format": "uuid",
                "type": "string"
              }
            }
          }
        }
      },
      "/api/Stats/GetConsumptionLicenseStats": {
        "get": {
          "tags": [
            "Stats"
          ],
          "summary": "Gets the consumption licensing usage statistics",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Read.\n\nRequired permissions: License.View.",
          "operationId": "Stats_GetConsumptionLicenseStats",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "tenantId",
              "description": "The Tenant's Id - can be used when authenticated as Host",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "days",
              "description": "Number of reported license usage days",
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ConsumptionLicenseStatsModel"
                }
              }
            }
          }
        }
      },
      "/api/Stats/GetCountStats": {
        "get": {
          "tags": [
            "Stats"
          ],
          "summary": "Gets the total number of various entities registered in Orchestrator",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Read.\n\nRequires authentication.\n\nReturns the name and the total number of entities registered in Orchestrator for a set of entities.\r\nAll the counted entity types can be seen in the result below.\r\n     [\r\n           {\r\n             \"title\": \"Processes\",\r\n             \"count\": 1\r\n           },\r\n           {\r\n             \"title\": \"Assets\",\r\n             \"count\": 0\r\n           },\r\n           {\r\n             \"title\": \"Queues\",\r\n             \"count\": 0\r\n           },\r\n           {\r\n             \"title\": \"Schedules\",\r\n             \"count\": 0\r\n           }\r\n     ]",
          "operationId": "Stats_GetCountStats",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CountStats"
                }
              }
            }
          }
        }
      },
      "/api/Stats/GetJobsStats": {
        "get": {
          "tags": [
            "Stats"
          ],
          "summary": "Gets the total number of jobs aggregated by Job State",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Read.\n\nRequired permissions: Jobs.View.\n\nReturns the total number of Successful, Faulted and Canceled jobs respectively.\r\nExample of returned result:\r\n    [\r\n          {\r\n            \"title\": \"Successful\",\r\n            \"count\": 0\r\n          },\r\n          {\r\n            \"title\": \"Faulted\",\r\n            \"count\": 0\r\n          },\r\n          {\r\n            \"title\": \"Canceled\",\r\n            \"count\": 0\r\n          }\r\n    ]",
          "operationId": "Stats_GetJobsStats",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CountStats"
                }
              }
            }
          }
        }
      },
      "/api/Stats/GetLicenseStats": {
        "get": {
          "tags": [
            "Stats"
          ],
          "summary": "Gets the licensing usage statistics",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Read.\n\nRequired permissions: License.View.",
          "operationId": "Stats_GetLicenseStats",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "tenantId",
              "description": "The Tenant's Id - can be used when authenticated as Host",
              "type": "integer",
              "format": "int32"
            },
            {
              "in": "query",
              "name": "days",
              "description": "Number of reported license usage days",
              "type": "integer",
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/LicenseStatsModel"
                }
              }
            }
          }
        }
      },
      "/api/Stats/GetSessionsStats": {
        "get": {
          "tags": [
            "Stats"
          ],
          "summary": "Gets the total number of robots aggregated by Robot State",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Read.\n\nRequired permissions: Robots.View.\n\nReturns the total number of Available, Busy, Disconnected and Unresponsive robots respectively.\r\nExample of returned result:\r\n    [\r\n          {\r\n            \"title\": \"Available\",\r\n            \"count\": 1\r\n          },\r\n          {\r\n            \"title\": \"Busy\",\r\n            \"count\": 0\r\n          },\r\n          {\r\n            \"title\": \"Disconnected\",\r\n            \"count\": 1\r\n          },\r\n          {\r\n            \"title\": \"Unresponsive\",\r\n            \"count\": 0\r\n          }\r\n    ]",
          "operationId": "Stats_GetSessionsStats",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CountStats"
                }
              }
            }
          }
        }
      },
      "/api/Status/Get": {
        "get": {
          "tags": [
            "Status"
          ],
          "summary": "Returns whether the current endpoint should be serving traffic",
          "operationId": "Status_Get",
          "responses": {
            "200": {
              "description": "Success"
            }
          }
        }
      }
    },
    "definitions": {
      "LoginModel": {
        "required": [
          "password",
          "usernameOrEmailAddress"
        ],
        "type": "object",
        "properties": {
          "tenancyName": {
            "type": "string"
          },
          "usernameOrEmailAddress": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "ValidationErrorInfo": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "members": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ErrorInfo": {
        "type": "object",
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ValidationErrorInfo"
            }
          }
        }
      },
      "AjaxResponse": {
        "type": "object",
        "properties": {
          "result": {},
          "targetUrl": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          },
          "error": {
            "$ref": "#/definitions/ErrorInfo"
          },
          "unAuthorizedRequest": {
            "type": "boolean"
          },
          "__abp": {
            "type": "boolean",
            "readOnly": true
          }
        }
      },
      "UserOrganizationUnitDto": {
        "description": "Stores information about an organization unit in Orchestrator.\r\n<para /> An orchestrator unit can be understood as a company department and it is used to group different entities.",
        "type": "object",
        "properties": {
          "userId": {
            "format": "int64",
            "description": "The Id of the user",
            "type": "integer"
          },
          "userName": {
            "description": "The name of the user",
            "type": "string"
          },
          "organizationUnitId": {
            "format": "int64",
            "description": "The Id of the organization unit",
            "type": "integer"
          },
          "organizationUnitName": {
            "description": "The name of the organization unit.",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "LightRoleDto": {
        "type": "object",
        "properties": {
          "name": {
            "description": "A custom name for the role.",
            "maxLength": 32,
            "type": "string"
          },
          "displayName": {
            "description": "An alternative name used for UI display.",
            "maxLength": 64,
            "type": "string"
          },
          "groups": {
            "description": "Allows grouping multiple roles together.",
            "type": "string"
          },
          "isStatic": {
            "description": "States whether this role is defined by the application and cannot be deleted or it is user defined and can be deleted.",
            "type": "boolean"
          },
          "isEditable": {
            "description": "States whether the permissions for this role can be modified or not.",
            "type": "boolean"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "DirectoryPermissionDto": {
        "type": "object",
        "properties": {
          "directoryGroup": {
            "type": "string"
          },
          "organizationUnits": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserOrganizationUnitDto"
            }
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LightRoleDto"
            }
          }
        }
      },
      "DomainDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          }
        }
      },
      "DirectoryObjectDto": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "User",
              "Group",
              "Machine",
              "Robot"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "DirectoryObjectDtoType",
              "modelAsString": false
            }
          },
          "source": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "identityName": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "ExtendedFolderDto": {
        "required": [
          "DisplayName"
        ],
        "type": "object",
        "properties": {
          "IsSelectable": {
            "description": "Determines whether this folder can be selected to view its entities",
            "type": "boolean"
          },
          "HasChildren": {
            "description": "True if this folder has children",
            "type": "boolean"
          },
          "Level": {
            "format": "int32",
            "description": "Level in the Folders tree.",
            "type": "integer"
          },
          "Key": {
            "format": "uuid",
            "description": "Unique key for the folder",
            "type": "string"
          },
          "DisplayName": {
            "description": "Display name for the folder.",
            "maxLength": 115,
            "type": "string"
          },
          "FullyQualifiedName": {
            "description": "Name of folder prepended by the names of its ancestors.",
            "type": "string"
          },
          "Description": {
            "description": "Description of folder",
            "maxLength": 500,
            "type": "string"
          },
          "IsPersonal": {
            "description": "True if Personal",
            "type": "boolean",
            "readOnly": true
          },
          "ProvisionType": {
            "description": "Robot provisioning type",
            "enum": [
              "Manual",
              "Automatic"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "FolderDtoProvisionType",
              "modelAsString": false
            }
          },
          "PermissionModel": {
            "description": "Folder permissions model",
            "enum": [
              "InheritFromTenant",
              "FineGrained"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "FolderDtoPermissionModel",
              "modelAsString": false
            }
          },
          "ParentId": {
            "format": "int64",
            "description": "Id of parent folder in the folders hierarchy",
            "type": "integer"
          },
          "ParentKey": {
            "format": "uuid",
            "description": "Unique key for the parent folder",
            "type": "string"
          },
          "FeedType": {
            "description": "Folder feed type",
            "enum": [
              "Undefined",
              "Processes",
              "Libraries",
              "PersonalWorkspace",
              "FolderHierarchy"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "FolderDtoFeedType",
              "modelAsString": false
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "SimpleUserEntityDto": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string"
          },
          "IsInherited": {
            "type": "boolean"
          },
          "AssignedToFolderIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "MayHaveAttended": {
            "type": "boolean"
          },
          "MayHaveUnattended": {
            "type": "boolean"
          },
          "Type": {
            "enum": [
              "User",
              "Robot",
              "DirectoryUser",
              "DirectoryGroup",
              "DirectoryRobot"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "SimpleUserEntityDtoType",
              "modelAsString": false
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "RoleUsersDto": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SimpleUserEntityDto"
            }
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "SimpleFolderDto": {
        "type": "object",
        "properties": {
          "DisplayName": {
            "type": "string"
          },
          "FullyQualifiedName": {
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "FolderAssignmentsDto": {
        "type": "object",
        "properties": {
          "Folder": {
            "$ref": "#/definitions/SimpleFolderDto"
          },
          "Roles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RoleUsersDto"
            }
          }
        }
      },
      "UserRoleAssignmentsDto": {
        "type": "object",
        "properties": {
          "TenantRoles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RoleUsersDto"
            }
          },
          "PageItems": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FolderAssignmentsDto"
            }
          },
          "Count": {
            "format": "int32",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "FolderNavigationContextDto": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "type": "integer"
          },
          "DisplayName": {
            "type": "string"
          },
          "IsSelectable": {
            "type": "boolean"
          },
          "IsPersonal": {
            "type": "boolean"
          },
          "ProvisionType": {
            "enum": [
              "Manual",
              "Automatic"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "FolderNavigationContextDtoProvisionType",
              "modelAsString": false
            }
          },
          "Ancestors": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SimpleFolderDto"
            }
          },
          "ChildrenPage": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExtendedFolderDto"
            }
          },
          "ChildrenCount": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "FolderDto": {
        "required": [
          "DisplayName"
        ],
        "type": "object",
        "properties": {
          "Key": {
            "format": "uuid",
            "description": "Unique key for the folder",
            "type": "string"
          },
          "DisplayName": {
            "description": "Display name for the folder.",
            "maxLength": 115,
            "type": "string"
          },
          "FullyQualifiedName": {
            "description": "Name of folder prepended by the names of its ancestors.",
            "type": "string"
          },
          "Description": {
            "description": "Description of folder",
            "maxLength": 500,
            "type": "string"
          },
          "IsPersonal": {
            "description": "True if Personal",
            "type": "boolean",
            "readOnly": true
          },
          "ProvisionType": {
            "description": "Robot provisioning type",
            "enum": [
              "Manual",
              "Automatic"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "FolderDtoProvisionType",
              "modelAsString": false
            }
          },
          "PermissionModel": {
            "description": "Folder permissions model",
            "enum": [
              "InheritFromTenant",
              "FineGrained"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "FolderDtoPermissionModel",
              "modelAsString": false
            }
          },
          "ParentId": {
            "format": "int64",
            "description": "Id of parent folder in the folders hierarchy",
            "type": "integer"
          },
          "ParentKey": {
            "format": "uuid",
            "description": "Unique key for the parent folder",
            "type": "string"
          },
          "FeedType": {
            "description": "Folder feed type",
            "enum": [
              "Undefined",
              "Processes",
              "Libraries",
              "PersonalWorkspace",
              "FolderHierarchy"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "FolderDtoFeedType",
              "modelAsString": false
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "PageResultDtoOfFolderDto": {
        "type": "object",
        "properties": {
          "PageItems": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FolderDto"
            }
          },
          "Count": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ConsumptionLicenseDto": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "count": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "LicenseResultDto": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean"
          },
          "errorCode": {
            "enum": [
              "NoLicense",
              "LicenseExpired",
              "LicenseUnregistered",
              "NoAvailableLicenses",
              "NotEnoughAvailableSlots",
              "NotEnoughRuntimeLicenses",
              "LicenseIsAlreadyInUse",
              "InvalidRequest",
              "SlotsExceedLicenseLimit",
              "RuntimeDisabled",
              "ExternalNotSupported",
              "UsageExceedsLicenseLimit",
              "LicenseNotCompatible"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "LicenseResultDtoErrorCode",
              "modelAsString": false
            }
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "WebhookRobotDto": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "Name": {
            "type": "string",
            "readOnly": true
          },
          "MachineId": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "MachineName": {
            "type": "string",
            "readOnly": true
          },
          "Description": {
            "type": "string",
            "readOnly": true
          },
          "UserName": {
            "type": "string",
            "readOnly": true
          },
          "Type": {
            "enum": [
              "NonProduction",
              "Attended",
              "Unattended",
              "Studio",
              "Development",
              "RpaDeveloper",
              "StudioX",
              "CitizenDeveloper",
              "Headless",
              "StudioPro",
              "RpaDeveloperPro",
              "TestAutomation",
              "AutomationCloud"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "WebhookRobotDtoType",
              "modelAsString": false
            }
          },
          "HostingType": {
            "enum": [
              "Standard",
              "Floating"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "WebhookRobotDtoHostingType",
              "modelAsString": false
            }
          },
          "Environments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookEnvironmentDto"
            },
            "readOnly": true
          },
          "ExecutionSettings": {
            "type": "object",
            "additionalProperties": {},
            "readOnly": true
          }
        }
      },
      "MaintenanceStateLog": {
        "type": "object",
        "properties": {
          "state": {
            "enum": [
              "None",
              "Draining",
              "Suspended"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "MaintenanceStateLogState",
              "modelAsString": false
            }
          },
          "timeStamp": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "MaintenanceSetting": {
        "type": "object",
        "properties": {
          "state": {
            "enum": [
              "None",
              "Draining",
              "Suspended"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "MaintenanceSettingState",
              "modelAsString": false
            }
          },
          "maintenanceLogs": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MaintenanceStateLog"
            },
            "readOnly": true
          },
          "jobStopsAttempted": {
            "format": "int32",
            "type": "integer"
          },
          "jobKillsAttempted": {
            "format": "int32",
            "type": "integer"
          },
          "triggersSkipped": {
            "format": "int32",
            "type": "integer"
          },
          "systemTriggersSkipped": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ConsumptionLicenseStatsModel": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "used": {
            "format": "int64",
            "type": "integer"
          },
          "total": {
            "format": "int64",
            "type": "integer"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "CountStats": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "hasPermissions": {
            "description": "Gives a more descriptive result when getting stats through the API (as opposed to -1 for the count)\r\nused only when serializing the count stats",
            "type": "boolean",
            "readOnly": true
          }
        }
      },
      "LicenseStatsModel": {
        "type": "object",
        "properties": {
          "robotType": {
            "enum": [
              "NonProduction",
              "Attended",
              "Unattended",
              "Studio",
              "Development",
              "RpaDeveloper",
              "StudioX",
              "CitizenDeveloper",
              "Headless",
              "StudioPro",
              "RpaDeveloperPro",
              "TestAutomation",
              "AutomationCloud"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "LicenseStatsModelRobotType",
              "modelAsString": false
            }
          },
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          }
        }
      },
      "HostAvailabilityDto": {
        "type": "object",
        "properties": {
          "canConnect": {
            "description": "Target host is reachable and a succesful TCP connection could be made on the specified port",
            "type": "boolean"
          },
          "hasBadSsl": {
            "description": "Any error occurred during SSL/TLS authentication.\r\nIncludes bad certificates (name mismatch, expired certificates), unsupported protocol versions or cyphersuites",
            "type": "boolean"
          },
          "connectionError": {
            "description": "An error code that further describes the type of connection error.\r\nDoes not include TLS/SSL errors",
            "type": "string"
          }
        }
      },
      "BuildTestSetRequestMessage": {
        "required": [
          "releaseId",
          "versionNumber"
        ],
        "type": "object",
        "properties": {
          "releaseId": {
            "format": "int64",
            "type": "integer"
          },
          "versionNumber": {
            "type": "string"
          },
          "testCaseUniqueIds": {
            "type": "array",
            "items": {
              "format": "uuid",
              "type": "string"
            }
          }
        }
      },
      "TestPackageInfoDto": {
        "type": "object",
        "properties": {
          "packageIdentifier": {
            "type": "string"
          },
          "latestVersion": {
            "type": "string"
          },
          "latestPrereleaseVersion": {
            "type": "string"
          }
        }
      },
      "TestReleaseVersionDto": {
        "type": "object",
        "properties": {
          "releaseId": {
            "format": "int64",
            "type": "integer"
          },
          "versionNumber": {
            "type": "string"
          },
          "organizationUnitId": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "TestCaseExecutionAttachmentFilterDto": {
        "type": "object",
        "properties": {
          "testCaseExecutionId": {
            "format": "int64",
            "type": "integer"
          },
          "jobKey": {
            "format": "uuid",
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TestCaseExecutionAttachmentDto": {
        "type": "object",
        "properties": {
          "TestCaseExecutionId": {
            "format": "int64",
            "type": "integer"
          },
          "FileName": {
            "type": "string"
          },
          "MimeType": {
            "type": "string"
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string"
          },
          "Tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "TestSetExecutionAttachmentFilterDto": {
        "type": "object",
        "properties": {
          "testSetExecutionId": {
            "format": "int64",
            "type": "integer"
          },
          "batchExecutionKey": {
            "format": "uuid",
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TestSetExecutionAttachmentDto": {
        "type": "object",
        "properties": {
          "TestSetExecutionId": {
            "format": "int64",
            "type": "integer"
          },
          "FileName": {
            "type": "string"
          },
          "MimeType": {
            "type": "string"
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string"
          },
          "Tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "TestCaseExecutionArgumentsDto": {
        "required": [
          "testCaseExecutionId"
        ],
        "type": "object",
        "properties": {
          "testCaseExecutionId": {
            "format": "int64",
            "type": "integer"
          },
          "inputArguments": {}
        }
      },
      "ReexecuteTestCasesOptionsDto": {
        "required": [
          "testCaseExecutions"
        ],
        "type": "object",
        "properties": {
          "testCaseExecutions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TestCaseExecutionArgumentsDto"
            }
          },
          "robotId": {
            "format": "int64",
            "type": "integer"
          },
          "machineSessionId": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "TestEnvironmentDto": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "TestSetPackageDto": {
        "required": [
          "PackageIdentifier",
          "VersionMask"
        ],
        "type": "object",
        "properties": {
          "TestSetId": {
            "format": "int64",
            "type": "integer"
          },
          "TestSet": {
            "$ref": "#/definitions/TestSetDto"
          },
          "VersionMask": {
            "type": "string"
          },
          "PackageIdentifier": {
            "type": "string"
          },
          "IncludePrerelease": {
            "type": "boolean"
          },
          "LastModificationTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastModifierUserId": {
            "format": "int64",
            "type": "integer"
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string"
          },
          "CreatorUserId": {
            "format": "int64",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "TestCaseDefinitionDto": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "PackageIdentifier": {
            "type": "string"
          },
          "UniqueId": {
            "format": "uuid",
            "type": "string"
          },
          "AppVersion": {
            "type": "string"
          },
          "CreatedVersion": {
            "type": "string"
          },
          "LatestVersion": {
            "type": "string"
          },
          "LatestPrereleaseVersion": {
            "type": "string"
          },
          "FeedId": {
            "format": "uuid",
            "type": "string"
          },
          "LastModificationTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastModifierUserId": {
            "format": "int64",
            "type": "integer"
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string"
          },
          "CreatorUserId": {
            "format": "int64",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "TestCaseDto": {
        "required": [
          "DefinitionId",
          "ReleaseId",
          "VersionNumber"
        ],
        "type": "object",
        "properties": {
          "Enabled": {
            "type": "boolean"
          },
          "DefinitionId": {
            "format": "int64",
            "type": "integer"
          },
          "Definition": {
            "$ref": "#/definitions/TestCaseDefinitionDto"
          },
          "ReleaseId": {
            "format": "int64",
            "type": "integer"
          },
          "VersionNumber": {
            "type": "string"
          },
          "TestSetId": {
            "format": "int64",
            "type": "integer"
          },
          "TestSet": {
            "$ref": "#/definitions/TestSetDto"
          },
          "LastModificationTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastModifierUserId": {
            "format": "int64",
            "type": "integer"
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string"
          },
          "CreatorUserId": {
            "format": "int64",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "TestSetInputArgumentDto": {
        "required": [
          "Name",
          "Type",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          },
          "LastModificationTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastModifierUserId": {
            "format": "int64",
            "type": "integer"
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string"
          },
          "CreatorUserId": {
            "format": "int64",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "TestSetDto": {
        "required": [
          "Name",
          "Packages",
          "TestCases"
        ],
        "type": "object",
        "properties": {
          "Key": {
            "format": "uuid",
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "SourceType": {
            "enum": [
              "User",
              "ExternalTool",
              "Transient"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TestSetDtoSourceType",
              "modelAsString": false
            }
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "EnvironmentId": {
            "format": "int64",
            "type": "integer"
          },
          "Environment": {
            "$ref": "#/definitions/TestEnvironmentDto"
          },
          "TestCaseCount": {
            "format": "int32",
            "type": "integer"
          },
          "RobotId": {
            "format": "int64",
            "type": "integer"
          },
          "EnableCoverage": {
            "type": "boolean"
          },
          "Packages": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TestSetPackageDto"
            }
          },
          "TestCases": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TestCaseDto"
            }
          },
          "InputArguments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TestSetInputArgumentDto"
            }
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "DeleterUserId": {
            "format": "int64",
            "type": "integer"
          },
          "DeletionTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastModificationTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastModifierUserId": {
            "format": "int64",
            "type": "integer"
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string"
          },
          "CreatorUserId": {
            "format": "int64",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "TestSetExecutionDto": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "TestSetId": {
            "format": "int64",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "TestSet": {
            "$ref": "#/definitions/TestSetDto"
          },
          "StartTime": {
            "format": "date-time",
            "type": "string"
          },
          "EndTime": {
            "format": "date-time",
            "type": "string"
          },
          "Status": {
            "enum": [
              "Pending",
              "Running",
              "Cancelling",
              "Passed",
              "Failed",
              "Cancelled"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TestSetExecutionDtoStatus",
              "modelAsString": false
            }
          },
          "TriggerType": {
            "enum": [
              "Manual",
              "Scheduled",
              "ExternalTool"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TestSetExecutionDtoTriggerType",
              "modelAsString": false
            }
          },
          "ScheduleId": {
            "format": "int64",
            "type": "integer"
          },
          "BatchExecutionKey": {
            "format": "uuid",
            "type": "string"
          },
          "CoverageStatus": {
            "enum": [
              "Disabled",
              "Pending",
              "Processing",
              "Completed"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TestSetExecutionDtoCoverageStatus",
              "modelAsString": false
            }
          },
          "RunId": {
            "format": "int32",
            "type": "integer"
          },
          "TestCaseExecutions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TestCaseExecutionDto"
            }
          },
          "Attachments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TestSetExecutionAttachmentDto"
            }
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string"
          },
          "CreatorUserId": {
            "format": "int64",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "TestCaseAssertionDto": {
        "type": "object",
        "properties": {
          "Message": {
            "type": "string"
          },
          "Payload": {
            "type": "string"
          },
          "Succeeded": {
            "type": "boolean"
          },
          "TestCaseExecutionId": {
            "format": "int64",
            "type": "integer"
          },
          "HasScreenshot": {
            "type": "boolean"
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "TestCaseExecutionDto": {
        "type": "object",
        "properties": {
          "JobId": {
            "format": "int64",
            "type": "integer"
          },
          "JobKey": {
            "format": "uuid",
            "type": "string"
          },
          "TestSetExecutionId": {
            "format": "int64",
            "type": "integer"
          },
          "TestSetExecution": {
            "$ref": "#/definitions/TestSetExecutionDto"
          },
          "TestCaseId": {
            "format": "int64",
            "type": "integer"
          },
          "TestCase": {
            "$ref": "#/definitions/TestCaseDto"
          },
          "ReleaseVersionId": {
            "format": "int64",
            "type": "integer"
          },
          "VersionNumber": {
            "type": "string"
          },
          "EntryPointPath": {
            "type": "string"
          },
          "StartTime": {
            "format": "date-time",
            "type": "string"
          },
          "EndTime": {
            "format": "date-time",
            "type": "string"
          },
          "Status": {
            "enum": [
              "Pending",
              "Running",
              "Cancelling",
              "Passed",
              "Failed",
              "Cancelled"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TestCaseExecutionDtoStatus",
              "modelAsString": false
            }
          },
          "TestCaseAssertions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TestCaseAssertionDto"
            }
          },
          "TestCaseExecutionAttachments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TestCaseExecutionAttachmentDto"
            }
          },
          "DataVariationIdentifier": {
            "type": "string"
          },
          "OutputArguments": {
            "type": "string"
          },
          "InputArguments": {
            "type": "string"
          },
          "Info": {
            "type": "string"
          },
          "HostMachineName": {
            "type": "string"
          },
          "RobotName": {
            "type": "string"
          },
          "HasAssertions": {
            "type": "boolean"
          },
          "RunId": {
            "format": "int32",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "TestCaseExecutionOptionsDto": {
        "required": [
          "uniqueId"
        ],
        "type": "object",
        "properties": {
          "uniqueId": {
            "format": "uuid",
            "type": "string"
          },
          "packageIdentifier": {
            "type": "string"
          },
          "inputArgumentsVariations": {
            "type": "array",
            "items": {}
          }
        }
      },
      "TestSetExecutionOptionsDto": {
        "type": "object",
        "properties": {
          "batchExecutionKey": {
            "format": "uuid",
            "type": "string"
          },
          "triggerType": {
            "enum": [
              "Manual",
              "Scheduled",
              "ExternalTool"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TestSetExecutionOptionsDtoTriggerType",
              "modelAsString": false
            }
          },
          "testCases": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TestCaseExecutionOptionsDto"
            }
          },
          "executeOnlySpecifiedTestCases": {
            "type": "boolean"
          },
          "robotId": {
            "format": "int64",
            "type": "integer"
          },
          "machineSessionId": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "TestDataQueueAddItemDto": {
        "required": [
          "queueName"
        ],
        "type": "object",
        "properties": {
          "queueName": {
            "type": "string"
          },
          "content": {}
        }
      },
      "TestDataQueueItemDto": {
        "type": "object",
        "properties": {
          "testDataQueueId": {
            "format": "int64",
            "type": "integer"
          },
          "content": {},
          "isConsumed": {
            "type": "boolean"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "TestDataQueueBulkAddItemsDto": {
        "required": [
          "items",
          "queueName"
        ],
        "type": "object",
        "properties": {
          "queueName": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {}
          }
        }
      },
      "TestDataQueueGetNextItemDto": {
        "required": [
          "queueName",
          "setConsumed"
        ],
        "type": "object",
        "properties": {
          "queueName": {
            "type": "string"
          },
          "setConsumed": {
            "type": "boolean"
          }
        }
      },
      "TestDataQueueSetAllItemsConsumedDto": {
        "required": [
          "isConsumed",
          "queueName"
        ],
        "type": "object",
        "properties": {
          "queueName": {
            "type": "string"
          },
          "isConsumed": {
            "type": "boolean"
          }
        }
      },
      "TestDataQueueSetItemsConsumedDto": {
        "required": [
          "isConsumed",
          "itemIds"
        ],
        "type": "object",
        "properties": {
          "itemIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "isConsumed": {
            "type": "boolean"
          }
        }
      },
      "BulkTasksCompletionRequest": {
        "required": [
          "action",
          "data",
          "taskIds"
        ],
        "type": "object",
        "properties": {
          "action": {
            "description": "Action taken on this task",
            "type": "string"
          },
          "taskIds": {
            "description": "List of Task Ids which have to be Bulk edited",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "data": {
            "description": "Task data json"
          },
          "title": {
            "description": "Title of tasks",
            "maxLength": 512,
            "type": "string"
          },
          "taskCatalogId": {
            "format": "int64",
            "description": "Action Catalog to be associated with the tasks",
            "type": "integer"
          },
          "unsetTaskCatalog": {
            "description": "Unset/Unassociate action catalogs with the tasks\r\nSet to true for unassociating catalog",
            "type": "boolean"
          },
          "priority": {
            "description": "Priority of tasks",
            "enum": [
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "BulkTasksDataUpdateRequestPriority",
              "modelAsString": false
            }
          },
          "noteText": {
            "description": "Comment to be added while doing the bulk operation",
            "maxLength": 512,
            "type": "string"
          }
        }
      },
      "BulkOperationErrorResponse": {
        "type": "object",
        "properties": {
          "taskId": {
            "format": "int64",
            "description": "Gets or sets the taskId for this task operation.",
            "type": "integer"
          },
          "errorCode": {
            "format": "int32",
            "description": "Gets or sets the code of error occurred during this task's operation.",
            "type": "integer"
          },
          "errorMessage": {
            "description": "Gets or sets the translated message of error occurred during this task's operation.",
            "type": "string"
          }
        }
      },
      "BulkTasksDataUpdateRequest": {
        "required": [
          "data",
          "taskIds"
        ],
        "type": "object",
        "properties": {
          "taskIds": {
            "description": "List of Task Ids which have to be Bulk edited",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "data": {
            "description": "Task data json"
          },
          "title": {
            "description": "Title of tasks",
            "maxLength": 512,
            "type": "string"
          },
          "taskCatalogId": {
            "format": "int64",
            "description": "Action Catalog to be associated with the tasks",
            "type": "integer"
          },
          "unsetTaskCatalog": {
            "description": "Unset/Unassociate action catalogs with the tasks\r\nSet to true for unassociating catalog",
            "type": "boolean"
          },
          "priority": {
            "description": "Priority of tasks",
            "enum": [
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "BulkTasksDataUpdateRequestPriority",
              "modelAsString": false
            }
          },
          "noteText": {
            "description": "Comment to be added while doing the bulk operation",
            "maxLength": 512,
            "type": "string"
          }
        }
      },
      "TaskCompletionRequest": {
        "required": [
          "taskId"
        ],
        "type": "object",
        "properties": {
          "taskId": {
            "format": "int64",
            "description": "TaskId to retrieve form",
            "type": "integer"
          },
          "data": {
            "description": "Task data json"
          },
          "action": {
            "description": "Action taken on this task",
            "type": "string"
          }
        }
      },
      "FormTaskCreateRequest": {
        "description": "Class with only attributes needed for Creating Task (TaskType = TaskType.FormTask)",
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "formLayout": {
            "description": "Text representing the form layout schema"
          },
          "formLayoutId": {
            "format": "int64",
            "description": "Unique FormLayoutId for a form layout",
            "type": "integer"
          },
          "bulkFormLayoutId": {
            "format": "int64",
            "description": "Unique BulkFormLayoutId for a form layout",
            "type": "integer"
          },
          "title": {
            "description": "Gets or sets title of this task.",
            "maxLength": 512,
            "minLength": 0,
            "type": "string"
          },
          "priority": {
            "description": "Gets or sets priority of this task.",
            "enum": [
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "BaseTaskCreateRequestPriority",
              "modelAsString": false
            }
          },
          "data": {
            "description": "Task data"
          },
          "taskCatalogName": {
            "description": "Gets or sets the task catalog/category of the task",
            "maxLength": 50,
            "type": "string"
          },
          "externalTag": {
            "description": "Reference or name of external system",
            "maxLength": 128,
            "type": "string"
          }
        }
      },
      "TaskDataDto": {
        "description": "Dto with attributes required for Wait activity",
        "type": "object",
        "properties": {
          "status": {
            "description": "Task status",
            "enum": [
              "Unassigned",
              "Pending",
              "Completed"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TaskDataDtoStatus",
              "modelAsString": false
            }
          },
          "data": {
            "description": "Task form data json"
          },
          "action": {
            "description": "Task form action",
            "type": "string"
          },
          "waitJobState": {
            "description": "State of the job(if any) waiting on the current task",
            "enum": [
              "Pending",
              "Running",
              "Stopping",
              "Terminating",
              "Faulted",
              "Successful",
              "Stopped",
              "Suspended",
              "Resumed"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TaskDataDtoWaitJobState",
              "modelAsString": false
            }
          },
          "organizationUnitFullyQualifiedName": {
            "description": "Fully qualified folder name",
            "type": "string"
          },
          "title": {
            "description": "Gets or sets title of this task.",
            "type": "string"
          },
          "type": {
            "description": "Gets or sets type of this task.",
            "enum": [
              "FormTask",
              "ExternalTask",
              "DocumentValidationTask",
              "DocumentClassificationTask"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TaskMetadataDtoType",
              "modelAsString": false
            }
          },
          "priority": {
            "description": "Gets or sets priority of this task.",
            "enum": [
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TaskMetadataDtoPriority",
              "modelAsString": false
            }
          },
          "assignedToUserId": {
            "format": "int64",
            "description": "Gets the id of the actual assigned user, if any.",
            "type": "integer"
          },
          "organizationUnitId": {
            "format": "int64",
            "description": "Gets or sets the folder/organization-unit id.",
            "type": "integer"
          },
          "externalTag": {
            "description": "Identifier of external system where this task is handled",
            "type": "string"
          },
          "creatorJobKey": {
            "format": "uuid",
            "description": "Key of the job which created this task",
            "type": "string"
          },
          "waitJobKey": {
            "format": "uuid",
            "description": "Key job which is waiting on this task",
            "type": "string"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deleterUserId": {
            "format": "int64",
            "type": "integer"
          },
          "deletionTime": {
            "format": "date-time",
            "type": "string"
          },
          "lastModificationTime": {
            "format": "date-time",
            "type": "string"
          },
          "lastModifierUserId": {
            "format": "int64",
            "type": "integer"
          },
          "creationTime": {
            "format": "date-time",
            "type": "string"
          },
          "creatorUserId": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "UserLoginInfoDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "emailAddress": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "TaskFormDto": {
        "description": "Dto for task form",
        "type": "object",
        "properties": {
          "formLayout": {
            "description": "Task Form Layout json"
          },
          "formLayoutId": {
            "format": "int64",
            "description": "Task Form Layout Id",
            "type": "integer"
          },
          "bulkFormLayoutId": {
            "format": "int64",
            "description": "Task Form Layout Id",
            "type": "integer"
          },
          "actionLabel": {
            "description": "Task form action label",
            "type": "string"
          },
          "assignedToUser": {
            "$ref": "#/definitions/UserLoginInfoDto"
          },
          "status": {
            "description": "Task status",
            "enum": [
              "Unassigned",
              "Pending",
              "Completed"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TaskDataDtoStatus",
              "modelAsString": false
            }
          },
          "data": {
            "description": "Task form data json"
          },
          "action": {
            "description": "Task form action",
            "type": "string"
          },
          "waitJobState": {
            "description": "State of the job(if any) waiting on the current task",
            "enum": [
              "Pending",
              "Running",
              "Stopping",
              "Terminating",
              "Faulted",
              "Successful",
              "Stopped",
              "Suspended",
              "Resumed"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TaskDataDtoWaitJobState",
              "modelAsString": false
            }
          },
          "organizationUnitFullyQualifiedName": {
            "description": "Fully qualified folder name",
            "type": "string"
          },
          "title": {
            "description": "Gets or sets title of this task.",
            "type": "string"
          },
          "type": {
            "description": "Gets or sets type of this task.",
            "enum": [
              "FormTask",
              "ExternalTask",
              "DocumentValidationTask",
              "DocumentClassificationTask"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TaskMetadataDtoType",
              "modelAsString": false
            }
          },
          "priority": {
            "description": "Gets or sets priority of this task.",
            "enum": [
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TaskMetadataDtoPriority",
              "modelAsString": false
            }
          },
          "assignedToUserId": {
            "format": "int64",
            "description": "Gets the id of the actual assigned user, if any.",
            "type": "integer"
          },
          "organizationUnitId": {
            "format": "int64",
            "description": "Gets or sets the folder/organization-unit id.",
            "type": "integer"
          },
          "externalTag": {
            "description": "Identifier of external system where this task is handled",
            "type": "string"
          },
          "creatorJobKey": {
            "format": "uuid",
            "description": "Key of the job which created this task",
            "type": "string"
          },
          "waitJobKey": {
            "format": "uuid",
            "description": "Key job which is waiting on this task",
            "type": "string"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "deleterUserId": {
            "format": "int64",
            "type": "integer"
          },
          "deletionTime": {
            "format": "date-time",
            "type": "string"
          },
          "lastModificationTime": {
            "format": "date-time",
            "type": "string"
          },
          "lastModifierUserId": {
            "format": "int64",
            "type": "integer"
          },
          "creationTime": {
            "format": "date-time",
            "type": "string"
          },
          "creatorUserId": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "TaskSaveAndReassignmentRequest": {
        "description": "Class to hold save and reassignment request details of a task.",
        "type": "object",
        "properties": {
          "SaveData": {
            "description": "Gets or Sets whether the data has to be saved",
            "type": "boolean"
          },
          "Data": {
            "description": "Gets or sets the Task data"
          },
          "NoteText": {
            "description": "Gets or sets the Task Note",
            "maxLength": 512,
            "type": "string"
          },
          "TaskId": {
            "format": "int64",
            "description": "Gets or sets the taskId for this task assignment.",
            "minimum": 1,
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "description": "Gets or sets the userId for this task assignment.",
            "type": "integer"
          },
          "UserNameOrEmail": {
            "description": "Gets or sets the UserName or Email for this task assignment. If UserId is provided, this property is ignored.",
            "maxLength": 256,
            "type": "string"
          }
        }
      },
      "TaskDataSaveRequest": {
        "required": [
          "data",
          "taskId"
        ],
        "type": "object",
        "properties": {
          "taskId": {
            "format": "int64",
            "description": "TaskId to retrieve form",
            "type": "integer"
          },
          "data": {
            "description": "Task data json"
          }
        }
      },
      "AlertDto": {
        "description": "Stores notification data used to inform the users about specific application events.",
        "required": [
          "Severity"
        ],
        "type": "object",
        "properties": {
          "NotificationName": {
            "description": "The name of a specific type of notification, e.g. Robot.StatusChanged.NotResponding.",
            "type": "string"
          },
          "Data": {
            "description": "Stores data about the context in which the event occurred, in JSON format.",
            "type": "string"
          },
          "Component": {
            "description": "The component that raised the alert.",
            "enum": [
              "Robots",
              "Transactions",
              "Schedules",
              "Jobs",
              "Process",
              "Tasks",
              "Queues",
              "Folders",
              "PersonalWorkspaces",
              "TestAutomation",
              "Insights",
              "CloudRobots"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AlertDtoComponent",
              "modelAsString": false
            }
          },
          "Severity": {
            "description": "The severity level of the alert.",
            "enum": [
              "Info",
              "Success",
              "Warn",
              "Error",
              "Fatal"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AlertDtoSeverity",
              "modelAsString": false
            }
          },
          "CreationTime": {
            "format": "date-time",
            "description": "The date and time when the alert was generated.",
            "type": "string"
          },
          "State": {
            "description": "Defines if a specified notification has been read or not.\r\n<para />Members: Unread (0) - the specified notification has not been marked as read; Read (1) - the specified notification has been marked as read.",
            "enum": [
              "Unread",
              "Read"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AlertDtoState",
              "modelAsString": false
            }
          },
          "UserNotificationId": {
            "format": "uuid",
            "description": "The database unique identifier for the alert notification sent to the current user.",
            "type": "string"
          },
          "Id": {
            "format": "uuid",
            "type": "string"
          }
        }
      },
      "ODataValueOfIEnumerableOfAlertDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AlertDto"
            }
          }
        }
      },
      "ODataValueOfInt64": {
        "type": "object",
        "properties": {
          "value": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "AlertsMarkAsReadParameters": {
        "required": [
          "ids"
        ],
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "format": "uuid",
              "type": "string"
            }
          }
        }
      },
      "ProcessAlertDto": {
        "required": [
          "Message",
          "ProcessName",
          "RobotName",
          "Severity"
        ],
        "type": "object",
        "properties": {
          "Message": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string"
          },
          "Severity": {
            "enum": [
              "Info",
              "Success",
              "Warn",
              "Error",
              "Fatal"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ProcessAlertDtoSeverity",
              "modelAsString": false
            }
          },
          "RobotName": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string"
          },
          "ProcessName": {
            "maxLength": 512,
            "minLength": 0,
            "type": "string"
          },
          "Id": {
            "format": "uuid",
            "type": "string"
          }
        }
      },
      "AlertsRaiseProcessAlertParameters": {
        "type": "object",
        "properties": {
          "processAlert": {
            "$ref": "#/definitions/ProcessAlertDto"
          }
        }
      },
      "WebhookEnvironmentDto": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "Name": {
            "type": "string",
            "readOnly": true
          },
          "Description": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "CustomKeyValuePair": {
        "description": "Stores a custom pair of key and value for assets with type KeyValueList.",
        "type": "object",
        "properties": {
          "Key": {
            "description": "A piece of text representing the key.",
            "type": "string"
          },
          "Value": {
            "description": "A piece of text representing the value.",
            "type": "string"
          }
        }
      },
      "AssetRobotValueDto": {
        "description": "Stores the value of an asset associated with a robot as well as the robot association data.",
        "type": "object",
        "properties": {
          "RobotId": {
            "format": "int64",
            "description": "The Id of the robot with which the asset is associated.",
            "type": "integer"
          },
          "RobotName": {
            "description": "The name of the robot with which the asset is associated.",
            "type": "string"
          },
          "KeyTrail": {
            "description": "Masked value of the robot key.",
            "type": "string"
          },
          "ValueType": {
            "description": "Defines the type of value stored by the asset.",
            "enum": [
              "DBConnectionString",
              "HttpConnectionString",
              "Text",
              "Bool",
              "Integer",
              "Credential",
              "WindowsCredential",
              "KeyValueList"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AssetRobotValueDtoValueType",
              "modelAsString": false
            }
          },
          "StringValue": {
            "description": "The value of the asset when the value type is Text. Empty when the value type is not Text.",
            "maxLength": 1000000,
            "type": "string"
          },
          "BoolValue": {
            "description": "The value of the asset when the value type is Bool. False when the value type is not Bool.",
            "type": "boolean"
          },
          "IntValue": {
            "format": "int32",
            "description": "The value of the asset when the value type is Integer. 0 when the value type is not Integer.",
            "type": "integer"
          },
          "Value": {
            "description": "The textual representation of the asset value, irrespective of value type.",
            "type": "string"
          },
          "CredentialUsername": {
            "description": "The user name when the value type is Credential. Empty when the value type is not Credential.",
            "type": "string"
          },
          "CredentialPassword": {
            "description": "The password when the value type is Credential. Empty when the value type is not Credential.",
            "type": "string"
          },
          "ExternalName": {
            "description": "Contains the value of the key in the external store used to store the credentials.",
            "maxLength": 450,
            "minLength": 0,
            "type": "string"
          },
          "CredentialStoreId": {
            "format": "int64",
            "description": "The Credential Store used to store the credentials.",
            "type": "integer"
          },
          "KeyValueList": {
            "description": "A collection of key value pairs when the type is KeyValueList. Empty when the value type is not KeyValueList.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CustomKeyValuePair"
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "AssetUserValueDto": {
        "description": "Stores the value of an asset associated with a user.",
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int64",
            "description": "The Id of the user with which the asset is associated.",
            "type": "integer"
          },
          "UserName": {
            "description": "The name of the user which the asset is associated.",
            "type": "string"
          },
          "MachineId": {
            "format": "int64",
            "description": "The Id of the machine which the asset is associated",
            "type": "integer"
          },
          "MachineName": {
            "description": "The name of the machine which the asset is associated.",
            "type": "string"
          },
          "ValueType": {
            "description": "Defines the type of value stored by the asset.",
            "enum": [
              "DBConnectionString",
              "HttpConnectionString",
              "Text",
              "Bool",
              "Integer",
              "Credential",
              "WindowsCredential",
              "KeyValueList"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AssetUserValueDtoValueType",
              "modelAsString": false
            }
          },
          "StringValue": {
            "description": "The value of the asset when the value type is Text. Empty when the value type is not Text.",
            "maxLength": 1000000,
            "type": "string"
          },
          "BoolValue": {
            "description": "The value of the asset when the value type is Bool. False when the value type is not Bool.",
            "type": "boolean"
          },
          "IntValue": {
            "format": "int32",
            "description": "The value of the asset when the value type is Integer. 0 when the value type is not Integer.",
            "type": "integer"
          },
          "Value": {
            "description": "The textual representation of the asset value, irrespective of value type.",
            "type": "string"
          },
          "CredentialUsername": {
            "description": "The user name when the value type is Credential. Empty when the value type is not Credential.",
            "type": "string"
          },
          "CredentialPassword": {
            "description": "The password when the value type is Credential. Empty when the value type is not Credential.",
            "type": "string"
          },
          "CredentialStoreId": {
            "format": "int64",
            "description": "The Credential Store used to store the credentials.",
            "type": "integer"
          },
          "ExternalName": {
            "description": "Contains the value of the key in the external store used to store the credentials.",
            "maxLength": 450,
            "minLength": 0,
            "type": "string"
          },
          "KeyValueList": {
            "description": "A collection of key value pairs when the type is KeyValueList. Empty when the value type is not KeyValueList.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CustomKeyValuePair"
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "AssetDto": {
        "description": "Stores specific data so that robots can easily have access to it.",
        "required": [
          "Name",
          "ValueScope"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "description": "A custom name for the asset.",
            "maxLength": 256,
            "type": "string"
          },
          "CanBeDeleted": {
            "description": "States if an assets can be deleted. The default value of this property is true.",
            "type": "boolean"
          },
          "ValueScope": {
            "description": "Defines the scope of the asset.",
            "enum": [
              "Global",
              "PerRobot"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AssetDtoValueScope",
              "modelAsString": false
            }
          },
          "ValueType": {
            "description": "Defines the type of value stored by the asset.",
            "enum": [
              "DBConnectionString",
              "HttpConnectionString",
              "Text",
              "Bool",
              "Integer",
              "Credential",
              "WindowsCredential",
              "KeyValueList"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AssetDtoValueType",
              "modelAsString": false
            }
          },
          "Value": {
            "description": "The textual representation of the asset value, irrespective of value type.",
            "type": "string"
          },
          "StringValue": {
            "description": "The value of the asset when the value type is Text. Empty when the value type is not Text.",
            "maxLength": 1000000,
            "type": "string"
          },
          "BoolValue": {
            "description": "The value of the asset when the value type is Bool. False when the value type is not Bool.",
            "type": "boolean"
          },
          "IntValue": {
            "format": "int32",
            "description": "The value of the asset when the value type is Integer. 0 when the value type is not Integer.",
            "type": "integer"
          },
          "CredentialUsername": {
            "description": "The user name when the value type is Credential. Empty when the value type is not Credential.",
            "maxLength": 512,
            "type": "string"
          },
          "CredentialPassword": {
            "description": "The password when the value type is Credential. Empty when the value type is not Credential.",
            "maxLength": 256,
            "type": "string"
          },
          "ExternalName": {
            "description": "Contains the value of the key in the external store used to store the credentials.",
            "maxLength": 450,
            "minLength": 0,
            "type": "string"
          },
          "CredentialStoreId": {
            "format": "int64",
            "description": "The Credential Store used to store the credentials.",
            "type": "integer"
          },
          "KeyValueList": {
            "description": "A collection of key value pairs when the type is KeyValueList. Empty when the value type is not KeyValueList.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CustomKeyValuePair"
            }
          },
          "HasDefaultValue": {
            "description": "The asset has a default value set. This value will be null when set from legacy components that don't support\r\nthe PerRobot assets with default value feature.",
            "type": "boolean"
          },
          "Description": {
            "description": "The description of the asset.",
            "maxLength": 250,
            "type": "string"
          },
          "RobotValues": {
            "description": "The collection of asset values per robot. Empty if the asset type is Global or PerUser.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/AssetRobotValueDto"
            }
          },
          "UserValues": {
            "description": "The collection of asset values per user. Empty if the asset type is Global or PerRobot.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/AssetUserValueDto"
            }
          },
          "FoldersCount": {
            "format": "int32",
            "description": "Number of folders where the asset is shared.",
            "type": "integer"
          },
          "LastModificationTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastModifierUserId": {
            "format": "int64",
            "type": "integer"
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string"
          },
          "CreatorUserId": {
            "format": "int64",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfAssetDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AssetDto"
            }
          }
        }
      },
      "AccessibleFoldersDto": {
        "type": "object",
        "properties": {
          "AccessibleFolders": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SimpleFolderDto"
            }
          },
          "TotalFoldersCount": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "RobotAssetDto": {
        "description": "A robot asset stores the information of a per robot asset for a specific robot, without specifying the robot.",
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "description": "The asset name.",
            "maxLength": 128,
            "type": "string"
          },
          "ValueType": {
            "description": "Defines the type of value stored by the asset.",
            "enum": [
              "DBConnectionString",
              "HttpConnectionString",
              "Text",
              "Bool",
              "Integer",
              "Credential",
              "WindowsCredential",
              "KeyValueList"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotAssetDtoValueType",
              "modelAsString": false
            }
          },
          "StringValue": {
            "description": "The value of the asset when the value type is Text. Empty when the value type is not Text.",
            "maxLength": 1000000,
            "type": "string"
          },
          "BoolValue": {
            "description": "The value of the asset when the value type is Bool. False when the value type is not Bool.",
            "type": "boolean"
          },
          "IntValue": {
            "format": "int32",
            "description": "The value of the asset when the value type is Integer. 0 when the value type is not Integer.",
            "type": "integer"
          },
          "CredentialUsername": {
            "description": "The user name when the value type is Credential. Empty when the value type is not Credential.",
            "type": "string"
          },
          "CredentialPassword": {
            "description": "The password when the value type is Credential. Empty when the value type is not Credential.",
            "type": "string"
          },
          "ExternalName": {
            "description": "Contains the value of the key in the external store used to store the credentials.",
            "maxLength": 450,
            "minLength": 0,
            "type": "string"
          },
          "CredentialStoreId": {
            "format": "int64",
            "description": "The Credential Store used to store the credentials.",
            "type": "integer"
          },
          "KeyValueList": {
            "description": "A collection of key value pairs when the type is KeyValueList. Empty when the value type is not KeyValueList.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CustomKeyValuePair"
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "AssetsGetRobotAssetByNameForRobotKeyParameters": {
        "type": "object",
        "properties": {
          "robotKey": {
            "type": "string"
          },
          "assetName": {
            "type": "string"
          }
        }
      },
      "AssetsSetRobotAssetByRobotKeyParameters": {
        "type": "object",
        "properties": {
          "robotKey": {
            "type": "string"
          },
          "robotAsset": {
            "$ref": "#/definitions/RobotAssetDto"
          }
        }
      },
      "AssetFoldersShareDto": {
        "type": "object",
        "properties": {
          "AssetIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "ToAddFolderIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "ToRemoveFolderIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "AuditLogEntityDto": {
        "description": "Stores audit information about any action performed in Orchestrator.",
        "type": "object",
        "properties": {
          "AuditLogId": {
            "format": "int64",
            "description": "Business audit entry that triggered the changes",
            "type": "integer"
          },
          "CustomData": {
            "description": "Data about the old/new/included values",
            "type": "string"
          },
          "EntityId": {
            "format": "int64",
            "description": "The Id of the referred entity",
            "type": "integer"
          },
          "EntityName": {
            "description": "The name of the entity the auditLog refers to",
            "type": "string"
          },
          "Action": {
            "description": "The action (created, updated, deleted etc)",
            "enum": [
              "Unknown",
              "Create",
              "Update",
              "Delete",
              "StartJob",
              "StopJob",
              "Associate",
              "Upload",
              "ChangeStatus",
              "Import",
              "ChangePassword",
              "Register",
              "Toggle",
              "ResetPassword",
              "PasswordResetAttempt",
              "Download",
              "Acknowledge",
              "Activate",
              "Assign",
              "BulkUpload",
              "UpdateFeature",
              "ResumeJob",
              "Start",
              "End",
              "Skip",
              "Unassign",
              "Deactivate",
              "CreateBlobFileSas",
              "DeleteBlobFile",
              "Move",
              "Set",
              "StartDelete",
              "ExploreStart",
              "ExploreEnd",
              "Save",
              "Convert",
              "Forward",
              "BulkComplete",
              "BulkSave"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AuditLogEntityDtoAction",
              "modelAsString": false
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "AuditLogDto": {
        "description": "Stores audit information about any action performed in Orchestrator.",
        "type": "object",
        "properties": {
          "ServiceName": {
            "description": "The name of the Orchestrator service that performed a given action in the system.",
            "type": "string"
          },
          "MethodName": {
            "description": "The name of the service method that performed a given action in the system.",
            "type": "string"
          },
          "Parameters": {
            "description": "JSON representation of the method parameters and their values for the given action.",
            "type": "string"
          },
          "ExecutionTime": {
            "format": "date-time",
            "description": "The date and time when the action was performed.",
            "type": "string"
          },
          "Action": {
            "description": "The action performed (create, update, delete etc)",
            "enum": [
              "Unknown",
              "Create",
              "Update",
              "Delete",
              "StartJob",
              "StopJob",
              "Associate",
              "Upload",
              "ChangeStatus",
              "Import",
              "ChangePassword",
              "Register",
              "Toggle",
              "ResetPassword",
              "PasswordResetAttempt",
              "Download",
              "Acknowledge",
              "Activate",
              "Assign",
              "BulkUpload",
              "UpdateFeature",
              "ResumeJob",
              "Start",
              "End",
              "Skip",
              "Unassign",
              "Deactivate",
              "CreateBlobFileSas",
              "DeleteBlobFile",
              "Move",
              "Set",
              "StartDelete",
              "ExploreStart",
              "ExploreEnd",
              "Save",
              "Convert",
              "Forward",
              "BulkComplete",
              "BulkSave"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AuditLogDtoAction",
              "modelAsString": false
            }
          },
          "Component": {
            "description": "The component for which the action was performed",
            "enum": [
              "Unknown",
              "Assets",
              "Environments",
              "Processes",
              "Queues",
              "Robots",
              "Roles",
              "Schedules",
              "Users",
              "Comments",
              "Units",
              "Jobs",
              "Settings",
              "Packages",
              "License",
              "Tenant",
              "Machines",
              "Libraries",
              "Webhooks",
              "ExecutionMedia",
              "Monitoring",
              "CredentialStores",
              "DefaultCredentialStores",
              "TaskCatalogs",
              "Tasks",
              "Maintenance",
              "Folders",
              "DirectoryService",
              "Buckets",
              "DataRetentionPolicies",
              "TenantMove",
              "Secrets",
              "PersonalWorkspaces",
              "CloudSubscriptions",
              "TestSets",
              "TestSetSchedules",
              "TestDataQueues",
              "TestDataQueueItems"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AuditLogDtoComponent",
              "modelAsString": false
            }
          },
          "DisplayName": {
            "description": "The display name of the resource acted on, usually Name",
            "type": "string"
          },
          "EntityId": {
            "format": "int64",
            "description": "The Id of the resource acted on",
            "type": "integer"
          },
          "OperationText": {
            "description": "User friendly description of the change, e.g. \"User X created robot Y\"",
            "type": "string"
          },
          "UserName": {
            "description": "UserName that sent the request",
            "type": "string"
          },
          "UserType": {
            "description": "The type of user that sent the request",
            "enum": [
              "User",
              "Robot",
              "DirectoryUser",
              "DirectoryGroup",
              "DirectoryRobot"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AuditLogDtoUserType",
              "modelAsString": false
            }
          },
          "Entities": {
            "description": "Audit entity details collection",
            "type": "array",
            "items": {
              "$ref": "#/definitions/AuditLogEntityDto"
            }
          },
          "ExternalClientId": {
            "description": "External client identifier. Example: OAuth 3rd party app identifier that called Orchestrator.",
            "type": "string"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          },
          "UserIsDeleted": {
            "description": "Marks whether the users that did the action was deleted in the meantime",
            "type": "boolean"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfAuditLogDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AuditLogDto"
            }
          }
        }
      },
      "ODataValueOfIEnumerableOfAuditLogEntityDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AuditLogEntityDto"
            }
          }
        }
      },
      "BucketDto": {
        "required": [
          "Identifier",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "description": "Display name of the Bucket",
            "maxLength": 128,
            "type": "string"
          },
          "Description": {
            "description": "Description of the Bucket",
            "maxLength": 512,
            "type": "string"
          },
          "Identifier": {
            "format": "uuid",
            "description": "A stable unique identifier",
            "type": "string"
          },
          "StorageProvider": {
            "description": "Provider Name.\r\nOtherwise one of the supported providers:\r\n- FileSystem\r\n- Azure\r\n- Amazon\r\n- Minio\r\nLeave null for built-in Orchestrator host provider.",
            "type": "string"
          },
          "StorageParameters": {
            "description": "Provider specific initialization parameters.\r\nUse a $Password for where the password should be inserted.\r\nLeave null for built-in Orchestrator host provider.",
            "type": "string"
          },
          "StorageContainer": {
            "description": "Provider specific Container name (AWS, WASB).\r\nLeave null for built-in Orchestrator host provider.",
            "type": "string"
          },
          "Options": {
            "description": "Bucket options",
            "enum": [
              "None",
              "ReadOnly",
              "AuditReadAccess",
              "AccessDataThroughOrchestrator"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "BucketDtoOptions",
              "modelAsString": false
            }
          },
          "CredentialStoreId": {
            "format": "int64",
            "description": "Credential store used to keep the provider access password.\r\nLeave null for built-in Orchestrator host provider.",
            "type": "integer"
          },
          "ExternalName": {
            "description": "The external name of the password in the credential store.\r\nIf null, it defaults to the bucket name.\r\nLeave null for built-in Orchestrator host provider.",
            "maxLength": 450,
            "minLength": 0,
            "type": "string"
          },
          "Password": {
            "description": "Provider specific password/secret.\r\nIt is inserted as a replacement of the $Password token in the StorageParameters.\r\nLeave null for built-in Orchestrator host provider.",
            "type": "string"
          },
          "FoldersCount": {
            "format": "int32",
            "description": "Number of folders where the bucket is shared.",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfBucketDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/BucketDto"
            }
          }
        }
      },
      "BlobFileDto": {
        "type": "object",
        "properties": {
          "FullPath": {
            "type": "string"
          },
          "ContentType": {
            "type": "string"
          },
          "Size": {
            "format": "int64",
            "type": "integer"
          },
          "IsDirectory": {
            "type": "boolean"
          },
          "Id": {
            "type": "string"
          }
        }
      },
      "ODataValueOfIEnumerableOfBlobFileDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/BlobFileDto"
            }
          }
        }
      },
      "ResponseDictionaryDto": {
        "description": "Data type used to return Dictionary(string, string)",
        "type": "object",
        "properties": {
          "Keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BlobFileAccessDto": {
        "type": "object",
        "properties": {
          "Uri": {
            "type": "string"
          },
          "Verb": {
            "type": "string"
          },
          "Headers": {
            "$ref": "#/definitions/ResponseDictionaryDto"
          }
        }
      },
      "BucketFoldersShareDto": {
        "type": "object",
        "properties": {
          "BucketIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "ToAddFolderIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "ToRemoveFolderIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "ExtendedCalendarDto": {
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 150,
            "type": "string"
          },
          "TimeZoneId": {
            "maxLength": 80,
            "type": "string"
          },
          "ExcludedDates": {
            "type": "array",
            "items": {
              "format": "date-time",
              "type": "string"
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfExtendedCalendarDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExtendedCalendarDto"
            }
          }
        }
      },
      "CalendarsCalendarExistsParameters": {
        "type": "object",
        "properties": {
          "calendarName": {
            "type": "string"
          }
        }
      },
      "ODataValueOfBoolean": {
        "type": "object",
        "properties": {
          "value": {
            "type": "boolean"
          }
        }
      },
      "CredentialStoreDetailsDto": {
        "description": "Details about credential store",
        "type": "object",
        "properties": {
          "IsReadOnly": {
            "description": "Current store is read only",
            "type": "boolean"
          }
        }
      },
      "DefaultCredentialStoreDto": {
        "required": [
          "ResourceType"
        ],
        "type": "object",
        "properties": {
          "ResourceType": {
            "description": "This enum describes the type of resources that can be stored in the Credential Store. When\r\na new resource type is added, the default needs to be initialized in 3 places:\r\n1. Existing tenants: At migration time.\r\n2. Default tenant: At seed time in DefaultTenantCreator.cs.\r\n3. New tenants: In TenantService.cs.",
            "enum": [
              "AssetCredential",
              "RobotCredential",
              "BucketCredential",
              "Secrets"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "DefaultCredentialStoreDtoResourceType",
              "modelAsString": false
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "CredentialStoreDto": {
        "description": "Defines the properties of a Credential Store.",
        "required": [
          "Name",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "AdditionalConfiguration": {
            "description": "Additional information specific to the type of the Credential Store.",
            "type": "string"
          },
          "Details": {
            "$ref": "#/definitions/CredentialStoreDetailsDto"
          },
          "DefaultCredentialStores": {
            "description": "Default credential stores",
            "type": "array",
            "items": {
              "$ref": "#/definitions/DefaultCredentialStoreDto"
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfCredentialStoreDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CredentialStoreDto"
            }
          }
        }
      },
      "CredentialStoresSetDefaultStoreForResourceTypeParameters": {
        "required": [
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "resourceType": {
            "description": "This enum describes the type of resources that can be stored in the Credential Store. When\r\na new resource type is added, the default needs to be initialized in 3 places:\r\n1. Existing tenants: At migration time.\r\n2. Default tenant: At seed time in DefaultTenantCreator.cs.\r\n3. New tenants: In TenantService.cs.",
            "enum": [
              "AssetCredential",
              "RobotCredential",
              "BucketCredential",
              "Secrets"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "SetDefaultStoreForResourceTypeParametersResourceType",
              "modelAsString": false
            }
          }
        }
      },
      "ODataValueOfIEnumerableOfString": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CredentialStoreResourceDto": {
        "description": "Defines the resources such as assets, robots or bucket for a Credential Store.",
        "required": [
          "Name",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Type": {
            "description": "This enum describes the type of resources that can be stored in the Credential Store. When\r\na new resource type is added, the default needs to be initialized in 3 places:\r\n1. Existing tenants: At migration time.\r\n2. Default tenant: At seed time in DefaultTenantCreator.cs.\r\n3. New tenants: In TenantService.cs.",
            "enum": [
              "AssetCredential",
              "RobotCredential",
              "BucketCredential",
              "Secrets"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "CredentialStoreResourceDtoType",
              "modelAsString": false
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfCredentialStoreResourceDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CredentialStoreResourceDto"
            }
          }
        }
      },
      "WebhookSimpleJobDto": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "Key": {
            "format": "uuid",
            "type": "string",
            "readOnly": true
          },
          "State": {
            "enum": [
              "Pending",
              "Running",
              "Stopping",
              "Terminating",
              "Faulted",
              "Successful",
              "Stopped",
              "Suspended",
              "Resumed"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "WebhookSimpleJobDtoState",
              "modelAsString": false
            }
          },
          "StartTime": {
            "format": "date-time",
            "type": "string",
            "readOnly": true
          },
          "ResumeTime": {
            "format": "date-time",
            "type": "string",
            "readOnly": true
          },
          "EndTime": {
            "format": "date-time",
            "type": "string",
            "readOnly": true
          },
          "Info": {
            "type": "string",
            "readOnly": true
          },
          "OutputArguments": {
            "type": "object",
            "readOnly": true
          },
          "Robot": {
            "$ref": "#/definitions/WebhookSimpleRobotDto"
          },
          "Release": {
            "$ref": "#/definitions/WebhookSimpleReleaseDto"
          }
        }
      },
      "SimpleRobotDto": {
        "description": "Entity derived from RobotDto. Is shares all the properties of the base entity except the navigation properties.",
        "required": [
          "HostingType",
          "Name",
          "Type"
        ],
        "type": "object",
        "properties": {
          "LicenseKey": {
            "description": "The key is automatically generated from the server for the Robot machine.\r\n<para />For the robot to work, the same key must exist on both the robot and Orchestrator.\r\n<para />All robots on a machine must have the same license key in order to register correctly.",
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "MachineName": {
            "description": "The name of the machine a Robot is hosted on.",
            "maxLength": 450,
            "minLength": 0,
            "type": "string"
          },
          "MachineId": {
            "format": "int64",
            "description": "The Id of the machine a Robot is hosted on",
            "type": "integer"
          },
          "Name": {
            "description": "A custom name for the robot.",
            "maxLength": 19,
            "minLength": 0,
            "type": "string"
          },
          "Username": {
            "description": "The machine username. If the user is under a domain, you are required to also specify it in a DOMAIN\\username format.\r\n<para />Note: You must use short domain names, such as desktop\\administrator and NOT desktop.local/administrator.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "ExternalName": {
            "description": "Contains the value of the key in the external store used to store the password.",
            "maxLength": 450,
            "minLength": 0,
            "type": "string"
          },
          "Description": {
            "description": "Used to add additional information about a robot in order to better identify it.",
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          },
          "Type": {
            "description": "The Robot type.",
            "enum": [
              "NonProduction",
              "Attended",
              "Unattended",
              "Studio",
              "Development",
              "RpaDeveloper",
              "StudioX",
              "CitizenDeveloper",
              "Headless",
              "StudioPro",
              "RpaDeveloperPro",
              "TestAutomation",
              "AutomationCloud"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotDtoType",
              "modelAsString": false
            }
          },
          "HostingType": {
            "description": "The Robot hosting type (Standard / Floating).",
            "enum": [
              "Standard",
              "Floating"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotDtoHostingType",
              "modelAsString": false
            }
          },
          "ProvisionType": {
            "description": "The Robot provision type.",
            "enum": [
              "Manual",
              "Automatic"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotDtoProvisionType",
              "modelAsString": false
            }
          },
          "Password": {
            "description": "The Windows password associated with the machine username.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "CredentialStoreId": {
            "format": "int64",
            "description": "The Credential Store used to store the password.",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "description": "The associated user's Id.",
            "type": "integer"
          },
          "Enabled": {
            "description": "Specificies the state of the Robot (enabled/disabled) - a disabled robot cannot connect to Orchestrator",
            "type": "boolean"
          },
          "CredentialType": {
            "description": "The robot credentials type (Default/ SmartCard)",
            "enum": [
              "Default",
              "SmartCard",
              "NCipher",
              "SafeNet",
              "NoCredential"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotDtoCredentialType",
              "modelAsString": false
            }
          },
          "Environments": {
            "description": "The collection of environments the robot is part of.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/EnvironmentDto"
            }
          },
          "RobotEnvironments": {
            "description": "The comma separated textual representation of environment names the robot is part of.",
            "type": "string"
          },
          "ExecutionSettings": {
            "description": "A collection of key value pairs containing execution settings for this robot.",
            "type": "object",
            "additionalProperties": {}
          },
          "IsExternalLicensed": {
            "description": "Flag to indicate if the robot uses an external license",
            "type": "boolean"
          },
          "LimitConcurrentExecution": {
            "description": "Specifies if the robot can be used concurrently on multiple machines",
            "type": "boolean"
          },
          "LastModificationTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastModifierUserId": {
            "format": "int64",
            "type": "integer"
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string"
          },
          "CreatorUserId": {
            "format": "int64",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "EnvironmentDto": {
        "description": "A grouping of Robots.",
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "description": "A custom name for the environment.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "Description": {
            "description": "Used to add additional information about an environment in order to better identify it.",
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          },
          "Robots": {
            "description": "The collection of robots associated with the current environment.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/SimpleRobotDto"
            }
          },
          "Type": {
            "description": "DEPRECATED. The environment type specifies how it should be used.\r\nThis property is deprecated and should no longer be used.",
            "enum": [
              "Dev",
              "Test",
              "Prod"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "EnvironmentDtoType",
              "modelAsString": false
            },
            "x-deprecated": true
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfEnvironmentDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EnvironmentDto"
            }
          }
        }
      },
      "EnvironmentsAddRobotParameters": {
        "type": "object",
        "properties": {
          "robotId": {
            "type": "string"
          }
        }
      },
      "EnvironmentsRemoveRobotParameters": {
        "type": "object",
        "properties": {
          "robotId": {
            "type": "string"
          }
        }
      },
      "EnvironmentsSetRobotsParameters": {
        "required": [
          "addedRobotIds",
          "removedRobotIds"
        ],
        "type": "object",
        "properties": {
          "addedRobotIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "removedRobotIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "ODataValueOfIEnumerableOfInt64": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "RobotDto": {
        "description": "A Robot is an execution host that runs processes built in UiPath Studio.",
        "required": [
          "HostingType",
          "Name",
          "Type"
        ],
        "type": "object",
        "properties": {
          "LicenseKey": {
            "description": "The key is automatically generated from the server for the Robot machine.\r\n<para />For the robot to work, the same key must exist on both the robot and Orchestrator.\r\n<para />All robots on a machine must have the same license key in order to register correctly.",
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "MachineName": {
            "description": "The name of the machine a Robot is hosted on.",
            "maxLength": 450,
            "minLength": 0,
            "type": "string"
          },
          "MachineId": {
            "format": "int64",
            "description": "The Id of the machine a Robot is hosted on",
            "type": "integer"
          },
          "Name": {
            "description": "A custom name for the robot.",
            "maxLength": 19,
            "minLength": 0,
            "type": "string"
          },
          "Username": {
            "description": "The machine username. If the user is under a domain, you are required to also specify it in a DOMAIN\\username format.\r\n<para />Note: You must use short domain names, such as desktop\\administrator and NOT desktop.local/administrator.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "ExternalName": {
            "description": "Contains the value of the key in the external store used to store the password.",
            "maxLength": 450,
            "minLength": 0,
            "type": "string"
          },
          "Description": {
            "description": "Used to add additional information about a robot in order to better identify it.",
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          },
          "Type": {
            "description": "The Robot type.",
            "enum": [
              "NonProduction",
              "Attended",
              "Unattended",
              "Studio",
              "Development",
              "RpaDeveloper",
              "StudioX",
              "CitizenDeveloper",
              "Headless",
              "StudioPro",
              "RpaDeveloperPro",
              "TestAutomation",
              "AutomationCloud"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotDtoType",
              "modelAsString": false
            }
          },
          "HostingType": {
            "description": "The Robot hosting type (Standard / Floating).",
            "enum": [
              "Standard",
              "Floating"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotDtoHostingType",
              "modelAsString": false
            }
          },
          "ProvisionType": {
            "description": "The Robot provision type.",
            "enum": [
              "Manual",
              "Automatic"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotDtoProvisionType",
              "modelAsString": false
            }
          },
          "Password": {
            "description": "The Windows password associated with the machine username.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "CredentialStoreId": {
            "format": "int64",
            "description": "The Credential Store used to store the password.",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "description": "The associated user's Id.",
            "type": "integer"
          },
          "Enabled": {
            "description": "Specificies the state of the Robot (enabled/disabled) - a disabled robot cannot connect to Orchestrator",
            "type": "boolean"
          },
          "CredentialType": {
            "description": "The robot credentials type (Default/ SmartCard)",
            "enum": [
              "Default",
              "SmartCard",
              "NCipher",
              "SafeNet",
              "NoCredential"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotDtoCredentialType",
              "modelAsString": false
            }
          },
          "Environments": {
            "description": "The collection of environments the robot is part of.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/EnvironmentDto"
            }
          },
          "RobotEnvironments": {
            "description": "The comma separated textual representation of environment names the robot is part of.",
            "type": "string"
          },
          "ExecutionSettings": {
            "description": "A collection of key value pairs containing execution settings for this robot.",
            "type": "object",
            "additionalProperties": {}
          },
          "IsExternalLicensed": {
            "description": "Flag to indicate if the robot uses an external license",
            "type": "boolean"
          },
          "LimitConcurrentExecution": {
            "description": "Specifies if the robot can be used concurrently on multiple machines",
            "type": "boolean"
          },
          "LastModificationTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastModifierUserId": {
            "format": "int64",
            "type": "integer"
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string"
          },
          "CreatorUserId": {
            "format": "int64",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfRobotDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RobotDto"
            }
          }
        }
      },
      "ExecutionMediaDto": {
        "type": "object",
        "properties": {
          "StorageLocation": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "Name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "JobId": {
            "format": "int64",
            "type": "integer"
          },
          "ReleaseName": {
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfExecutionMediaDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExecutionMediaDto"
            }
          }
        }
      },
      "ExecutionMediaDeleteMediaByJobIdParameters": {
        "required": [
          "jobId"
        ],
        "type": "object",
        "properties": {
          "jobId": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfFolderDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FolderDto"
            }
          }
        }
      },
      "FoldersRemoveMachinesFromFolderParameters": {
        "required": [
          "machineIds"
        ],
        "type": "object",
        "properties": {
          "machineIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "FoldersRemoveUserFromFolderParameters": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "FolderRolesDto": {
        "description": "Association between a folder and a set of roles.",
        "type": "object",
        "properties": {
          "FolderId": {
            "format": "int64",
            "type": "integer"
          },
          "RoleIds": {
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "DomainUserAssignmentDto": {
        "type": "object",
        "properties": {
          "Domain": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "DirectoryIdentifier": {
            "type": "string"
          },
          "UserType": {
            "enum": [
              "User",
              "Robot",
              "DirectoryUser",
              "DirectoryGroup",
              "DirectoryRobot"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "DomainUserAssignmentDtoUserType",
              "modelAsString": false
            }
          },
          "RolesPerFolder": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FolderRolesDto"
            }
          }
        }
      },
      "FoldersAssignDomainUserParameters": {
        "type": "object",
        "properties": {
          "assignment": {
            "$ref": "#/definitions/DomainUserAssignmentDto"
          }
        }
      },
      "MachineAssignmentsDto": {
        "type": "object",
        "properties": {
          "MachineIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "FolderIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "FoldersAssignMachinesParameters": {
        "type": "object",
        "properties": {
          "assignments": {
            "$ref": "#/definitions/MachineAssignmentsDto"
          }
        }
      },
      "UserAssignmentsDto": {
        "type": "object",
        "properties": {
          "UserIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "RolesPerFolder": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FolderRolesDto"
            }
          }
        }
      },
      "FoldersAssignUsersParameters": {
        "type": "object",
        "properties": {
          "assignments": {
            "$ref": "#/definitions/UserAssignmentsDto"
          }
        }
      },
      "UpdateInfoDto": {
        "type": "object",
        "properties": {
          "updateStatus": {
            "enum": [
              "None",
              "InProgress",
              "Failed",
              "NonCompliant",
              "Compliant",
              "NotApplicable"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "UpdateInfoDtoUpdateStatus",
              "modelAsString": false
            }
          },
          "reason": {
            "enum": [
              "NonCompliantWithDifferentVersion",
              "NonCompliantWithoutTargetVersion",
              "NotApplicableForOlderSessions",
              "NotApplicableForMachineType",
              "NotApplicableTemplateWithoutRobotSessions",
              "NotApplicableForPlatform",
              "NotApplicableForTargetFramework"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "UpdateInfoDtoReason",
              "modelAsString": false
            }
          },
          "targetUpdateVersion": {
            "type": "string"
          },
          "isCommunity": {
            "type": "boolean"
          },
          "statusInfo": {
            "type": "string"
          }
        }
      },
      "MachinesRobotVersionDto": {
        "type": "object",
        "properties": {
          "Count": {
            "format": "int64",
            "description": "The number of Robots on the Machine with the specified version.",
            "type": "integer"
          },
          "Version": {
            "description": "The Version of the Robot hosted on the Machine.",
            "type": "string"
          },
          "MachineId": {
            "format": "int64",
            "description": "The Id of the Machine.",
            "type": "integer"
          }
        }
      },
      "RobotUserDto": {
        "required": [
          "RobotId"
        ],
        "type": "object",
        "properties": {
          "UserName": {
            "description": "The name of the user.",
            "type": "string"
          },
          "RobotId": {
            "format": "int64",
            "description": "The Id of the Robot.",
            "type": "integer"
          },
          "HasTriggers": {
            "description": "Whether the machine robot has triggers defined or not.",
            "type": "boolean"
          }
        }
      },
      "AutoScalingProfileDto": {
        "type": "object",
        "properties": {
          "MinMachinesAvailable": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer"
          },
          "IdleTimeoutMinutes": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer"
          },
          "AllocationScaleFactor": {
            "format": "double",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "Type": {
            "enum": [
              "CostEfficient",
              "Balanced",
              "Fast",
              "Custom"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AutoScalingProfileDtoType",
              "modelAsString": false
            }
          },
          "StartTime": {
            "format": "date-time",
            "type": "string"
          },
          "EndTime": {
            "format": "date-time",
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "UpdatePolicyDto": {
        "description": "The policy applied for update robots' versions",
        "type": "object",
        "properties": {
          "Type": {
            "description": "The type of the policy (None/ SpecificVersion/ LatestVersion)",
            "enum": [
              "None",
              "SpecificVersion",
              "LatestVersion",
              "LatestPatch"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "UpdatePolicyDtoType",
              "modelAsString": false
            }
          },
          "SpecificVersion": {
            "description": "The specific version used for SpecificVersion policy type",
            "maxLength": 128,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "MachineFolderDto": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "IsAssignedToFolder": {
            "type": "boolean"
          },
          "HasMachineRobots": {
            "type": "boolean"
          },
          "IsInherited": {
            "type": "boolean"
          },
          "PropagateToSubFolders": {
            "type": "boolean"
          },
          "InheritedFromFolderName": {
            "type": "string"
          },
          "LicenseKey": {
            "description": "The key is automatically generated from the server for the Robot machine.\r\n<para />For the robot to work, the same key must exist on both the robot and Orchestrator.\r\n<para />All robots on a machine must have the same license key in order to register correctly.",
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "UpdateInfo": {
            "$ref": "#/definitions/UpdateInfoDto"
          },
          "Name": {
            "description": "The name of the Machine a Robot is hosted on.",
            "maxLength": 450,
            "minLength": 0,
            "type": "string"
          },
          "Description": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          },
          "Type": {
            "description": "The type of the Machine (Standard / Template).",
            "enum": [
              "Standard",
              "Template"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "MachineDtoType",
              "modelAsString": false
            }
          },
          "Scope": {
            "description": "The scope of the Machine (Default / Shared / PW / Cloud / Serverless).",
            "enum": [
              "Default",
              "Shared",
              "PersonalWorkspace",
              "Cloud",
              "Serverless"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "MachineDtoScope",
              "modelAsString": false
            }
          },
          "NonProductionSlots": {
            "format": "int32",
            "description": "Number of NonProduction slots to be reserved at runtime",
            "type": "integer"
          },
          "UnattendedSlots": {
            "format": "int32",
            "description": "Number of Unattended slots to be reserved at runtime",
            "type": "integer"
          },
          "HeadlessSlots": {
            "format": "int32",
            "description": "Number of Headless slots to be reserved at runtime",
            "type": "integer"
          },
          "TestAutomationSlots": {
            "format": "int32",
            "description": "Number of TestAutomation slots to be reserved at runtime",
            "type": "integer"
          },
          "AutomationCloudSlots": {
            "format": "int32",
            "description": "Number of AutomationCloud slots to be reserved at runtime",
            "type": "integer"
          },
          "Key": {
            "format": "uuid",
            "description": "An immutable unique identifier that is preserved during tenant migration",
            "type": "string"
          },
          "RobotVersions": {
            "description": "The versions of the Robots hosted on the Machine.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/MachinesRobotVersionDto"
            }
          },
          "RobotUsers": {
            "description": "Robots assigned to template machine.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/RobotUserDto"
            }
          },
          "AutoScalingProfiles": {
            "description": "AutoScaling Profiles assigned to the machine.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/AutoScalingProfileDto"
            }
          },
          "AutoScalingProfile": {
            "description": "The profile that drives auto scaling.",
            "enum": [
              "CostEfficient",
              "Balanced",
              "Fast",
              "Custom"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "MachineDtoAutoScalingProfile",
              "modelAsString": false
            }
          },
          "AutomationType": {
            "description": "The automation type the machine supports.",
            "enum": [
              "Any",
              "Foreground",
              "Background"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "MachineDtoAutomationType",
              "modelAsString": false
            }
          },
          "TargetFramework": {
            "description": "The target frameworks the machine supports.",
            "enum": [
              "Any",
              "Windows",
              "Portable"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "MachineDtoTargetFramework",
              "modelAsString": false
            }
          },
          "UpdatePolicy": {
            "$ref": "#/definitions/UpdatePolicyDto"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfMachineFolderDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MachineFolderDto"
            }
          }
        }
      },
      "MoveFolderMachineChange": {
        "type": "object",
        "properties": {
          "MachineId": {
            "format": "int64",
            "type": "integer"
          },
          "MachineName": {
            "type": "string"
          },
          "OldMachineFolderState": {
            "enum": [
              "Unknown",
              "NotAssigned",
              "Assigned",
              "Inherited",
              "EroAcrError",
              "ServerlessError"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "MoveFolderMachineChangeOldMachineFolderState",
              "modelAsString": false
            }
          },
          "NewMachineFolderState": {
            "enum": [
              "Unknown",
              "NotAssigned",
              "Assigned",
              "Inherited",
              "EroAcrError",
              "ServerlessError"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "MoveFolderMachineChangeNewMachineFolderState",
              "modelAsString": false
            }
          }
        }
      },
      "ODataValueOfIEnumerableOfMoveFolderMachineChange": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MoveFolderMachineChange"
            }
          }
        }
      },
      "UserEntityDto": {
        "type": "object",
        "properties": {
          "FullName": {
            "type": "string"
          },
          "AuthenticationSource": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "IsInherited": {
            "type": "boolean"
          },
          "AssignedToFolderIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "MayHaveAttended": {
            "type": "boolean"
          },
          "MayHaveUnattended": {
            "type": "boolean"
          },
          "Type": {
            "enum": [
              "User",
              "Robot",
              "DirectoryUser",
              "DirectoryGroup",
              "DirectoryRobot"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "SimpleUserEntityDtoType",
              "modelAsString": false
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "SimpleRoleDto": {
        "type": "object",
        "properties": {
          "Origin": {
            "enum": [
              "Assigned",
              "Inherited"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "SimpleRoleDtoOrigin",
              "modelAsString": false
            }
          },
          "RoleType": {
            "enum": [
              "Mixed",
              "Tenant",
              "Folder"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "SimpleRoleDtoRoleType",
              "modelAsString": false
            }
          },
          "InheritedFromFolder": {
            "$ref": "#/definitions/SimpleFolderDto"
          },
          "Name": {
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "UserRolesDto": {
        "description": "Association between a user and a set of roles.",
        "type": "object",
        "properties": {
          "UserEntity": {
            "$ref": "#/definitions/UserEntityDto"
          },
          "Roles": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SimpleRoleDto"
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfUserRolesDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserRolesDto"
            }
          }
        }
      },
      "FolderMachineInheritDto": {
        "type": "object",
        "properties": {
          "MachineId": {
            "format": "int64",
            "type": "integer"
          },
          "FolderId": {
            "format": "int64",
            "type": "integer"
          },
          "InheritEnabled": {
            "type": "boolean"
          }
        }
      },
      "MachinesFolderAssociationsDto": {
        "type": "object",
        "properties": {
          "FolderId": {
            "format": "int64",
            "type": "integer"
          },
          "AddedMachineIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "RemovedMachineIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "FoldersUpdateMachinesToFolderAssociationsParameters": {
        "type": "object",
        "properties": {
          "associations": {
            "$ref": "#/definitions/MachinesFolderAssociationsDto"
          }
        }
      },
      "WebhookSimpleReleaseDto": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "description": "The Id of the process",
            "type": "integer"
          },
          "Key": {
            "description": "The unique key of the process",
            "type": "string"
          },
          "ProcessKey": {
            "description": "The name of the process",
            "type": "string"
          }
        }
      },
      "HostLicenseDto": {
        "description": "Stores information about the host license used to activate one or more tenants.",
        "type": "object",
        "properties": {
          "TenantsCount": {
            "format": "int32",
            "description": "The number of tenants licensed from this license file",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "description": "License Id",
            "type": "integer"
          },
          "ExpireDate": {
            "format": "int64",
            "description": "License expiration date in Epoch format",
            "type": "integer"
          },
          "GracePeriodEndDate": {
            "format": "int64",
            "description": "License grace period end date in Epoch format",
            "type": "integer"
          },
          "GracePeriod": {
            "format": "int64",
            "description": "Number of grace period days",
            "type": "integer"
          },
          "VersionControl": {
            "description": "The product version which can use this license",
            "type": "string"
          },
          "Allowed": {
            "description": "Contains the number of allowed licenses for each type",
            "type": "object",
            "additionalProperties": {
              "format": "int64",
              "type": "integer"
            }
          },
          "Used": {
            "description": "Contains the number of used licenses for each type",
            "type": "object",
            "additionalProperties": {
              "format": "int64",
              "type": "integer"
            }
          },
          "AttendedConcurrent": {
            "description": "States whether the license is Attended Concurrent",
            "type": "boolean"
          },
          "DevelopmentConcurrent": {
            "description": "States whether the license is Development Concurrent",
            "type": "boolean"
          },
          "StudioXConcurrent": {
            "description": "States whether the license is Studio Business Concurrent",
            "type": "boolean"
          },
          "StudioProConcurrent": {
            "description": "States whether the license is Studio Pro Concurrent",
            "type": "boolean"
          },
          "LicensedFeatures": {
            "description": "What features are licensed (valid for individually-licensed features, like Analytics)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "IsRegistered": {
            "description": "True if the current tenant is registered with a license. False otherwise.",
            "type": "boolean"
          },
          "IsCommunity": {
            "description": "True if the current tenant is registered with a community license.",
            "type": "boolean"
          },
          "SubscriptionCode": {
            "description": "The license subscription code",
            "type": "string"
          },
          "IsExpired": {
            "description": "States whether the license is still valid or not.",
            "type": "boolean"
          },
          "CreationTime": {
            "format": "date-time",
            "description": "The date when the license was uploaded.",
            "type": "string"
          },
          "Code": {
            "description": "The license code.",
            "type": "string"
          },
          "UserLicensingEnabled": {
            "description": "Whether user licensing is enabled or not.",
            "type": "boolean"
          }
        }
      },
      "ODataValueOfIEnumerableOfHostLicenseDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/HostLicenseDto"
            }
          }
        }
      },
      "HostLicensesActivateLicenseOnlineParameters": {
        "type": "object",
        "properties": {
          "licenseKey": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "HostLicensesDeactivateLicenseOnlineParameters": {
        "type": "object"
      },
      "HostLicensesDeleteTenantLicenseParameters": {
        "required": [
          "tenantId"
        ],
        "type": "object",
        "properties": {
          "tenantId": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "HostLicensesGetDeactivateLicenseOfflineParameters": {
        "type": "object"
      },
      "ODataValueOfString": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        }
      },
      "HostLicensesGetLicenseOfflineParameters": {
        "type": "object",
        "properties": {
          "licenseKey": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "LicenseDto": {
        "description": "Stores information about the license used to activate a tenant.",
        "type": "object",
        "properties": {
          "HostLicenseId": {
            "format": "int64",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "description": "License Id",
            "type": "integer"
          },
          "ExpireDate": {
            "format": "int64",
            "description": "License expiration date in Epoch format",
            "type": "integer"
          },
          "GracePeriodEndDate": {
            "format": "int64",
            "description": "License grace period end date in Epoch format",
            "type": "integer"
          },
          "GracePeriod": {
            "format": "int64",
            "description": "Number of grace period days",
            "type": "integer"
          },
          "VersionControl": {
            "description": "The product version which can use this license",
            "type": "string"
          },
          "Allowed": {
            "description": "Contains the number of allowed licenses for each type",
            "type": "object",
            "additionalProperties": {
              "format": "int64",
              "type": "integer"
            }
          },
          "Used": {
            "description": "Contains the number of used licenses for each type",
            "type": "object",
            "additionalProperties": {
              "format": "int64",
              "type": "integer"
            }
          },
          "AttendedConcurrent": {
            "description": "States whether the license is Attended Concurrent",
            "type": "boolean"
          },
          "DevelopmentConcurrent": {
            "description": "States whether the license is Development Concurrent",
            "type": "boolean"
          },
          "StudioXConcurrent": {
            "description": "States whether the license is Studio Business Concurrent",
            "type": "boolean"
          },
          "StudioProConcurrent": {
            "description": "States whether the license is Studio Pro Concurrent",
            "type": "boolean"
          },
          "LicensedFeatures": {
            "description": "What features are licensed (valid for individually-licensed features, like Analytics)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "IsRegistered": {
            "description": "True if the current tenant is registered with a license. False otherwise.",
            "type": "boolean"
          },
          "IsCommunity": {
            "description": "True if the current tenant is registered with a community license.",
            "type": "boolean"
          },
          "SubscriptionCode": {
            "description": "The license subscription code",
            "type": "string"
          },
          "IsExpired": {
            "description": "States whether the license is still valid or not.",
            "type": "boolean"
          },
          "CreationTime": {
            "format": "date-time",
            "description": "The date when the license was uploaded.",
            "type": "string"
          },
          "Code": {
            "description": "The license code.",
            "type": "string"
          },
          "UserLicensingEnabled": {
            "description": "Whether user licensing is enabled or not.",
            "type": "boolean"
          }
        }
      },
      "HostLicensePerTenantDto": {
        "type": "object",
        "properties": {
          "TenantId": {
            "format": "int32",
            "description": "The tenant's Id",
            "type": "integer"
          },
          "HostLicenseId": {
            "format": "int64",
            "description": "The host license's Id",
            "type": "integer"
          }
        },
        "additionalProperties": {}
      },
      "HostLicensesSetTenantLicenseParameters": {
        "type": "object",
        "properties": {
          "license": {
            "$ref": "#/definitions/HostLicensePerTenantDto"
          }
        }
      },
      "EntryPointDataVariationDto": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "string"
          },
          "ContentType": {
            "enum": [
              "Json"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "EntryPointDataVariationDtoContentType",
              "modelAsString": false
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "EntryPointDto": {
        "type": "object",
        "properties": {
          "UniqueId": {
            "format": "uuid",
            "type": "string"
          },
          "Path": {
            "type": "string"
          },
          "InputArguments": {
            "type": "string"
          },
          "OutputArguments": {
            "type": "string"
          },
          "DataVariation": {
            "$ref": "#/definitions/EntryPointDataVariationDto"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ReleaseVersionDto": {
        "description": "Stores data about a version of the various versions of the process associated with a certain release.\r\n<para />If a certain version is associated on and off with a release a new ReleaseVersion object is created for each association.",
        "required": [
          "ReleaseId",
          "VersionNumber"
        ],
        "type": "object",
        "properties": {
          "ReleaseId": {
            "format": "int64",
            "description": "The Id of the parent release.",
            "type": "integer"
          },
          "VersionNumber": {
            "description": "The version of process associated with the release.",
            "maxLength": 50,
            "type": "string"
          },
          "CreationTime": {
            "format": "date-time",
            "description": "The date and time when the version was associated with the release.",
            "type": "string"
          },
          "ReleaseName": {
            "description": "The name of the process associated with the release.",
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ArgumentMetadata": {
        "type": "object",
        "properties": {
          "Input": {
            "type": "string"
          },
          "Output": {
            "type": "string"
          }
        }
      },
      "ProcessSettingsDto": {
        "type": "object",
        "properties": {
          "ErrorRecordingEnabled": {
            "type": "boolean"
          },
          "Duration": {
            "format": "int32",
            "type": "integer"
          },
          "Frequency": {
            "format": "int32",
            "type": "integer"
          },
          "Quality": {
            "format": "int32",
            "type": "integer"
          },
          "AutoStartProcess": {
            "type": "boolean"
          },
          "AlwaysRunning": {
            "type": "boolean"
          }
        }
      },
      "SimpleReleaseDto": {
        "description": "Entity derived from BaseReleaseDto. It shares all the properties of the base entity except the navigation properties.",
        "required": [
          "Name",
          "ProcessKey",
          "ProcessVersion"
        ],
        "type": "object",
        "properties": {
          "Key": {
            "description": "A unique identifier associated to each release.",
            "type": "string"
          },
          "ProcessKey": {
            "description": "The unique identifier of the process associated with the release.",
            "type": "string"
          },
          "ProcessVersion": {
            "description": "The version of the process associated with the release.",
            "type": "string"
          },
          "IsLatestVersion": {
            "description": "States whether the version of process associated with the release is latest or not.",
            "type": "boolean"
          },
          "IsProcessDeleted": {
            "description": "States whether the process associated with the release is deleted or not.",
            "type": "boolean"
          },
          "Description": {
            "description": "Used to add additional information about a release in order to better identify it.",
            "type": "string"
          },
          "Name": {
            "description": "A custom name of the release. The default name format is ProcessName_EnvironmentName.",
            "type": "string"
          },
          "EnvironmentId": {
            "format": "int64",
            "description": "The Id of the environment associated with the release.",
            "type": "integer"
          },
          "EnvironmentName": {
            "description": "The name of the environment associated with the release.",
            "type": "string"
          },
          "Environment": {
            "$ref": "#/definitions/EnvironmentDto"
          },
          "EntryPointId": {
            "format": "int64",
            "type": "integer"
          },
          "EntryPoint": {
            "$ref": "#/definitions/EntryPointDto"
          },
          "InputArguments": {
            "description": "Input parameters in JSON format to be passed as default values to job execution.",
            "maxLength": 10000,
            "type": "string"
          },
          "ProcessType": {
            "enum": [
              "Undefined",
              "Process",
              "TestAutomationProcess"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ReleaseDtoProcessType",
              "modelAsString": false
            }
          },
          "SupportsMultipleEntryPoints": {
            "type": "boolean"
          },
          "RequiresUserInteraction": {
            "type": "boolean"
          },
          "IsAttended": {
            "type": "boolean"
          },
          "IsCompiled": {
            "type": "boolean"
          },
          "CurrentVersion": {
            "$ref": "#/definitions/ReleaseVersionDto"
          },
          "ReleaseVersions": {
            "description": "The collection of release versions that current release had over time.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/ReleaseVersionDto"
            }
          },
          "Arguments": {
            "$ref": "#/definitions/ArgumentMetadata"
          },
          "ProcessSettings": {
            "$ref": "#/definitions/ProcessSettingsDto"
          },
          "AutoUpdate": {
            "type": "boolean"
          },
          "FeedId": {
            "format": "uuid",
            "type": "string"
          },
          "JobPriority": {
            "description": "The execution priority. If null, it defaults to Normal.",
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ReleaseDtoJobPriority",
              "modelAsString": false
            }
          },
          "OrganizationUnitId": {
            "format": "int64",
            "description": "Id of the folder this release is part of.",
            "type": "integer"
          },
          "OrganizationUnitFullyQualifiedName": {
            "description": "Fully qualified name of the folder this release is part of.",
            "type": "string"
          },
          "TargetFramework": {
            "enum": [
              "Legacy",
              "Windows",
              "Portable"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ReleaseDtoTargetFramework",
              "modelAsString": false
            }
          },
          "LastModificationTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastModifierUserId": {
            "format": "int64",
            "type": "integer"
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string"
          },
          "CreatorUserId": {
            "format": "int64",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ExtendedMachineDto": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/MachineDto"
          }
        ],
        "properties": {
          "LicenseKey": {
            "description": "The key is automatically generated from the server for the Robot machine.\r\n<para />For the robot to work, the same key must exist on both the robot and Orchestrator.\r\n<para />All robots on a machine must have the same license key in order to register correctly.",
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "UpdateInfo": {
            "$ref": "#/definitions/UpdateInfoDto"
          }
        }
      },
      "CloudServiceSubscriptionDto": {
        "description": "Represents a cloud service subscription",
        "type": "object",
        "properties": {
          "key": {
            "format": "uuid",
            "description": "The globally unique key identifying the subscription",
            "type": "string"
          },
          "name": {
            "description": "The name of the subscription",
            "type": "string"
          },
          "description": {
            "description": "An optional description",
            "type": "string"
          }
        }
      },
      "ResourceGroupDto": {
        "description": "Represents a resource group",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the resource group",
            "type": "string"
          }
        }
      },
      "ImageDto": {
        "description": "Represent a machine image",
        "type": "object",
        "properties": {
          "id": {
            "description": "The resource identifier",
            "type": "string"
          },
          "name": {
            "description": "The name of the image",
            "type": "string"
          }
        }
      },
      "NetworkDto": {
        "description": "Represent a network",
        "type": "object",
        "properties": {
          "id": {
            "description": "The resource identifier",
            "type": "string"
          },
          "name": {
            "description": "The name of the network",
            "type": "string"
          },
          "subnets": {
            "description": "The subnets in the network",
            "type": "array",
            "items": {
              "$ref": "#/definitions/SubnetDto"
            },
            "readOnly": true
          }
        }
      },
      "SubnetDto": {
        "description": "Represent a network subnet",
        "type": "object",
        "properties": {
          "id": {
            "description": "The resource identifier",
            "type": "string"
          },
          "name": {
            "description": "The name of the subnet",
            "type": "string"
          },
          "network": {
            "$ref": "#/definitions/NetworkDto"
          }
        }
      },
      "RegionDto": {
        "description": "Represents a region",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the region",
            "type": "string"
          },
          "location": {
            "description": "The location of the region",
            "type": "string"
          }
        }
      },
      "VirtualMachineInfoDto": {
        "description": "Represents a Machine",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the machine",
            "type": "string"
          },
          "resourceId": {
            "description": "The CSP global resource identtifier",
            "type": "string"
          },
          "hostMachineName": {
            "description": "The host name of the machine",
            "type": "string"
          },
          "available": {
            "description": "Is machine Available for use or not",
            "type": "boolean"
          }
        }
      },
      "CloudTemplateDto": {
        "description": "The cloud template that hosts the Robot",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/MachineDto"
          }
        ],
        "properties": {
          "subscription": {
            "$ref": "#/definitions/CloudServiceSubscriptionDto"
          },
          "poolSizeCap": {
            "format": "int32",
            "description": "The maximum number of machines that can be provisioned in the pool",
            "type": "integer"
          },
          "resourceGroup": {
            "$ref": "#/definitions/ResourceGroupDto"
          },
          "machineImage": {
            "$ref": "#/definitions/ImageDto"
          },
          "machineSize": {
            "description": "The size of the machines",
            "type": "string"
          },
          "machineSizeGroup": {
            "description": "The size group of the machines",
            "enum": [
              "Small",
              "Medium",
              "Large"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "CloudTemplateDtoMachineSizeGroup",
              "modelAsString": false
            }
          },
          "machineSubnet": {
            "$ref": "#/definitions/SubnetDto"
          },
          "region": {
            "$ref": "#/definitions/RegionDto"
          },
          "provisioning": {
            "description": "The Provisioning type of the spec",
            "enum": [
              "Auto",
              "Manual",
              "External"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "CloudTemplateDtoProvisioning",
              "modelAsString": false
            }
          },
          "hosting": {
            "description": "The Hosting type of the spec",
            "enum": [
              "Customer",
              "System"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "CloudTemplateDtoHosting",
              "modelAsString": false
            }
          },
          "virtualMachines": {
            "description": "The list of machines",
            "type": "array",
            "items": {
              "$ref": "#/definitions/VirtualMachineInfoDto"
            }
          },
          "specKey": {
            "format": "uuid",
            "description": "Spec key associated to this template. Used for BYOM machine availability",
            "type": "string"
          }
        }
      },
      "MachineDto": {
        "description": "The Machine that hosts the Robot",
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "LicenseKey": {
            "description": "The key is automatically generated from the server for the Robot machine.\r\n<para />For the robot to work, the same key must exist on both the robot and Orchestrator.\r\n<para />All robots on a machine must have the same license key in order to register correctly.",
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "Name": {
            "description": "The name of the Machine a Robot is hosted on.",
            "maxLength": 450,
            "minLength": 0,
            "type": "string"
          },
          "Description": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          },
          "Type": {
            "description": "The type of the Machine (Standard / Template).",
            "enum": [
              "Standard",
              "Template"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "MachineDtoType",
              "modelAsString": false
            }
          },
          "Scope": {
            "description": "The scope of the Machine (Default / Shared / PW / Cloud / Serverless).",
            "enum": [
              "Default",
              "Shared",
              "PersonalWorkspace",
              "Cloud",
              "Serverless"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "MachineDtoScope",
              "modelAsString": false
            }
          },
          "NonProductionSlots": {
            "format": "int32",
            "description": "Number of NonProduction slots to be reserved at runtime",
            "type": "integer"
          },
          "UnattendedSlots": {
            "format": "int32",
            "description": "Number of Unattended slots to be reserved at runtime",
            "type": "integer"
          },
          "HeadlessSlots": {
            "format": "int32",
            "description": "Number of Headless slots to be reserved at runtime",
            "type": "integer"
          },
          "TestAutomationSlots": {
            "format": "int32",
            "description": "Number of TestAutomation slots to be reserved at runtime",
            "type": "integer"
          },
          "AutomationCloudSlots": {
            "format": "int32",
            "description": "Number of AutomationCloud slots to be reserved at runtime",
            "type": "integer"
          },
          "Key": {
            "format": "uuid",
            "description": "An immutable unique identifier that is preserved during tenant migration",
            "type": "string"
          },
          "RobotVersions": {
            "description": "The versions of the Robots hosted on the Machine.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/MachinesRobotVersionDto"
            }
          },
          "RobotUsers": {
            "description": "Robots assigned to template machine.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/RobotUserDto"
            }
          },
          "AutoScalingProfiles": {
            "description": "AutoScaling Profiles assigned to the machine.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/AutoScalingProfileDto"
            }
          },
          "AutoScalingProfile": {
            "description": "The profile that drives auto scaling.",
            "enum": [
              "CostEfficient",
              "Balanced",
              "Fast",
              "Custom"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "MachineDtoAutoScalingProfile",
              "modelAsString": false
            }
          },
          "AutomationType": {
            "description": "The automation type the machine supports.",
            "enum": [
              "Any",
              "Foreground",
              "Background"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "MachineDtoAutomationType",
              "modelAsString": false
            }
          },
          "TargetFramework": {
            "description": "The target frameworks the machine supports.",
            "enum": [
              "Any",
              "Windows",
              "Portable"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "MachineDtoTargetFramework",
              "modelAsString": false
            }
          },
          "UpdatePolicy": {
            "$ref": "#/definitions/UpdatePolicyDto"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "JobDto": {
        "description": "Represents a scheduled or manual execution of a process on a robot.",
        "type": "object",
        "properties": {
          "Key": {
            "format": "uuid",
            "description": "The unique job identifier.",
            "type": "string"
          },
          "StartTime": {
            "format": "date-time",
            "description": "The date and time when the job execution started or null if the job hasn't started yet.",
            "type": "string"
          },
          "EndTime": {
            "format": "date-time",
            "description": "The date and time when the job execution ended or null if the job hasn't ended yet.",
            "type": "string"
          },
          "State": {
            "description": "The state in which the job is.",
            "enum": [
              "Pending",
              "Running",
              "Stopping",
              "Terminating",
              "Faulted",
              "Successful",
              "Stopped",
              "Suspended",
              "Resumed"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "JobDtoState",
              "modelAsString": false
            }
          },
          "JobPriority": {
            "description": "Execution priority.",
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "JobDtoJobPriority",
              "modelAsString": false
            }
          },
          "Robot": {
            "$ref": "#/definitions/SimpleRobotDto"
          },
          "Release": {
            "$ref": "#/definitions/SimpleReleaseDto"
          },
          "Source": {
            "description": "The Source name of the job.",
            "type": "string"
          },
          "SourceType": {
            "description": "The Source type of the job.",
            "enum": [
              "Manual",
              "Schedule",
              "Agent",
              "Queue",
              "StudioWeb",
              "IntegrationTrigger",
              "StudioDesktop"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "JobDtoSourceType",
              "modelAsString": false
            }
          },
          "BatchExecutionKey": {
            "format": "uuid",
            "description": "The unique identifier grouping multiple jobs. It is usually generated when the job is created by a schedule.",
            "type": "string"
          },
          "Info": {
            "description": "Additional information about the current job.",
            "type": "string"
          },
          "CreationTime": {
            "format": "date-time",
            "description": "The date and time when the job was created.",
            "type": "string"
          },
          "StartingScheduleId": {
            "format": "int64",
            "description": "The Id of the schedule that started the job, or null if the job was started by the user.",
            "type": "integer"
          },
          "ReleaseName": {
            "description": "The name of the release associated with the current name.",
            "type": "string"
          },
          "Type": {
            "description": "The type of the job, Attended if started via the robot, Unattended otherwise",
            "enum": [
              "Unattended",
              "Attended"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "JobDtoType",
              "modelAsString": false
            }
          },
          "InputArguments": {
            "description": "Input parameters in JSON format to be passed to job execution",
            "type": "string"
          },
          "OutputArguments": {
            "description": "Output parameters in JSON format resulted from job execution",
            "type": "string"
          },
          "HostMachineName": {
            "description": "The name of the machine where the Robot run the job.",
            "type": "string"
          },
          "HasMediaRecorded": {
            "description": "True if any execution media has been recorded for this job, false otherwise.",
            "type": "boolean"
          },
          "PersistenceId": {
            "format": "uuid",
            "description": "The persistence instance id for a suspended job",
            "type": "string"
          },
          "ResumeVersion": {
            "format": "int32",
            "description": "Distinguishes between multiple job suspend/resume cycles",
            "type": "integer"
          },
          "StopStrategy": {
            "enum": [
              "SoftStop",
              "Kill"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "JobDtoStopStrategy",
              "modelAsString": false
            }
          },
          "RuntimeType": {
            "description": "The runtime type of the robot which can pick up the job",
            "enum": [
              "NonProduction",
              "Attended",
              "Unattended",
              "Studio",
              "Development",
              "RpaDeveloper",
              "StudioX",
              "CitizenDeveloper",
              "Headless",
              "StudioPro",
              "RpaDeveloperPro",
              "TestAutomation",
              "AutomationCloud"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "JobDtoRuntimeType",
              "modelAsString": false
            }
          },
          "RequiresUserInteraction": {
            "type": "boolean"
          },
          "ReleaseVersionId": {
            "format": "int64",
            "type": "integer"
          },
          "EntryPointPath": {
            "description": "Path to the entry point workflow (XAML) that will be executed by the robot",
            "maxLength": 512,
            "type": "string"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "description": "Id of the folder this job is part of.",
            "type": "integer"
          },
          "OrganizationUnitFullyQualifiedName": {
            "description": "Fully qualified name of the folder this job is part of.",
            "type": "string"
          },
          "Reference": {
            "description": "Reference identifier for the job",
            "type": "string"
          },
          "ProcessType": {
            "enum": [
              "Undefined",
              "Process",
              "TestAutomationProcess"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "JobDtoProcessType",
              "modelAsString": false
            }
          },
          "Machine": {
            "$ref": "#/definitions/MachineDto"
          },
          "ProfilingOptions": {
            "description": "Options to instruct the robot what profiling info to collect (code coverage, CPU / memory utilization, etc)",
            "type": "string"
          },
          "ResumeOnSameContext": {
            "description": "Flag for honoring initial machine and robot choice upon resumption of job if suspended. <br />\r\nIf set, the job will resume on the same robot-machine pair on which it initially ran.",
            "type": "boolean"
          },
          "LocalSystemAccount": {
            "description": "The account under which the robot executor will run the job",
            "type": "string"
          },
          "OrchestratorUserIdentity": {
            "description": "The orchestrator identity used to make API calls",
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfJobDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/JobDto"
            }
          }
        }
      },
      "JobsStopJobParameters": {
        "required": [
          "strategy"
        ],
        "type": "object",
        "properties": {
          "strategy": {
            "enum": [
              "SoftStop",
              "Kill"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "StopJobParametersStrategy",
              "modelAsString": false
            }
          }
        }
      },
      "ValidationResultDto": {
        "type": "object",
        "properties": {
          "IsValid": {
            "type": "boolean"
          },
          "Errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          }
        }
      },
      "JobsRestartJobParameters": {
        "required": [
          "jobId"
        ],
        "type": "object",
        "properties": {
          "jobId": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "JobsResumeJobParameters": {
        "required": [
          "jobKey"
        ],
        "type": "object",
        "properties": {
          "jobKey": {
            "format": "uuid",
            "type": "string"
          }
        }
      },
      "MachineRobotDto": {
        "type": "object",
        "properties": {
          "MachineId": {
            "format": "int64",
            "description": "The Id of the Machine.",
            "type": "integer"
          },
          "MachineName": {
            "description": "The name of the Machine.",
            "type": "string"
          },
          "RobotId": {
            "format": "int64",
            "description": "The Id of the Robot.",
            "type": "integer"
          },
          "RobotUserName": {
            "description": "The robot user name.",
            "type": "string"
          }
        }
      },
      "StartProcessDto": {
        "description": "The Start Process transfers information from client to the server during JobsController.StartJobs custom action.",
        "type": "object",
        "properties": {
          "ReleaseKey": {
            "description": "The unique key of the release associated with the process.",
            "type": "string"
          },
          "Strategy": {
            "description": "States which robots from the environment are being run by the process.",
            "enum": [
              "All",
              "Specific",
              "RobotCount",
              "JobsCount",
              "ModernJobsCount"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "StartProcessDtoStrategy",
              "modelAsString": false
            }
          },
          "RobotIds": {
            "description": "The collection of ids of specific robots selected to be run by the current process. This collection must be empty only if the start strategy is not Specific.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "MachineSessionIds": {
            "description": "The machines used for running the job. If empty, the job will start on the first available machine",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "NoOfRobots": {
            "format": "int32",
            "description": "DEPRECATED. Number of pending jobs to be created in the environment, for the current process. This number must be greater than 0 only if the start strategy is RobotCount.",
            "type": "integer",
            "x-deprecated": true
          },
          "JobsCount": {
            "format": "int32",
            "description": "Number of pending jobs to be created in the environment, for the current process. This number must be greater than 0 only if the start strategy is JobsCount.",
            "type": "integer"
          },
          "Source": {
            "description": "The Source of the job starting the current process.",
            "enum": [
              "Manual",
              "Schedule",
              "Queue",
              "StudioWeb",
              "IntegrationTrigger",
              "StudioDesktop"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "StartProcessDtoSource",
              "modelAsString": false
            }
          },
          "JobPriority": {
            "description": "Execution priority. If null, defaults to the JobPriority of its release.",
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "StartProcessDtoJobPriority",
              "modelAsString": false
            }
          },
          "RuntimeType": {
            "enum": [
              "NonProduction",
              "Attended",
              "Unattended",
              "Studio",
              "Development",
              "RpaDeveloper",
              "StudioX",
              "CitizenDeveloper",
              "Headless",
              "StudioPro",
              "RpaDeveloperPro",
              "TestAutomation",
              "AutomationCloud"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "StartProcessDtoRuntimeType",
              "modelAsString": false
            }
          },
          "InputArguments": {
            "description": "Input parameters in JSON format to be passed to job execution.",
            "maxLength": 10000,
            "type": "string"
          },
          "Reference": {
            "description": "Optional user-specified reference for jobs",
            "maxLength": 128,
            "type": "string"
          },
          "MachineRobots": {
            "description": "The machine-robot mappings used for running the job.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/MachineRobotDto"
            }
          },
          "TargetFramework": {
            "enum": [
              "Legacy",
              "Windows",
              "Portable"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "StartProcessDtoTargetFramework",
              "modelAsString": false
            }
          },
          "ResumeOnSameContext": {
            "description": "Gets or sets flag for honoring initial machine and robot choice upon resumption of created jobs, if jobs are suspended. <br />\r\nIf set, the jobs will resume on the same robot-machine pair on which they initially ran.",
            "type": "boolean"
          },
          "BatchExecutionKey": {
            "format": "uuid",
            "description": "Optional BatchExecutionKey",
            "type": "string"
          },
          "RequiresUserInteraction": {
            "description": "Specifies if the process can run in headless mode.",
            "type": "boolean"
          },
          "StopProcessExpression": {
            "description": "Number of seconds after which a running process will be stopped.",
            "type": "string"
          },
          "StopStrategy": {
            "description": "The way a running process is stopped.",
            "enum": [
              "SoftStop",
              "Kill"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "StartProcessDtoStopStrategy",
              "modelAsString": false
            }
          },
          "KillProcessExpression": {
            "description": "Grace period (in seconds) for soft stop. If a process doesn't stop after this amount, it will be killed",
            "type": "string"
          }
        }
      },
      "JobsStartJobsParameters": {
        "type": "object",
        "properties": {
          "startInfo": {
            "$ref": "#/definitions/StartProcessDto"
          }
        }
      },
      "JobsStopJobsParameters": {
        "required": [
          "jobIds",
          "strategy"
        ],
        "type": "object",
        "properties": {
          "jobIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "strategy": {
            "enum": [
              "SoftStop",
              "Kill"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "StopJobsParametersStrategy",
              "modelAsString": false
            }
          }
        }
      },
      "JobsValidateDynamicJobParameters": {
        "type": "object",
        "properties": {
          "startInfo": {
            "$ref": "#/definitions/StartProcessDto"
          }
        }
      },
      "JobTriggerDto": {
        "description": "A trigger for resuming a job",
        "type": "object",
        "properties": {
          "JobId": {
            "format": "int64",
            "type": "integer"
          },
          "TriggerType": {
            "description": "Resume type (job, queue, task etc)",
            "enum": [
              "None",
              "QueueItem",
              "Job",
              "Task",
              "Timer"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "JobTriggerDtoTriggerType",
              "modelAsString": false
            }
          },
          "Status": {
            "description": "Job trigger status (new, ready, fired etc)",
            "enum": [
              "New",
              "Ready",
              "Fired"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "JobTriggerDtoStatus",
              "modelAsString": false
            }
          },
          "ItemId": {
            "format": "int64",
            "description": "item Id (queue item id, task id, job id etc)",
            "type": "integer"
          },
          "Timer": {
            "format": "date-time",
            "description": "Resume timer (for time trigger)",
            "type": "string"
          },
          "TriggerMessage": {
            "description": "Workflow provided resume trigger description/message",
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfJobTriggerDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/JobTriggerDto"
            }
          }
        }
      },
      "JobTriggerWithWaitEventsDto": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "description": "Job Trigger Id",
            "type": "integer"
          },
          "JobId": {
            "format": "int64",
            "description": "Job Id",
            "type": "integer"
          },
          "TriggerType": {
            "description": "Resume type (job, queue, task etc)",
            "enum": [
              "None",
              "QueueItem",
              "Job",
              "Task",
              "Timer"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "JobTriggerWaitEventModelTriggerType",
              "modelAsString": false
            }
          },
          "Status": {
            "description": "Job trigger status (new, ready, fired etc)",
            "enum": [
              "New",
              "Ready",
              "Fired"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "JobTriggerWaitEventModelStatus",
              "modelAsString": false
            }
          },
          "ItemId": {
            "format": "int64",
            "description": "item Id (queue item id, task id, job id etc)",
            "type": "integer"
          },
          "Timer": {
            "format": "date-time",
            "description": "Resume timer (for time trigger)",
            "type": "string"
          },
          "TriggerMessage": {
            "description": "Workflow provided resume trigger description/message",
            "type": "string"
          },
          "ItemName": {
            "description": "Name of the Item on which wait is placed",
            "type": "string"
          },
          "AssignedToUserId": {
            "format": "int64",
            "description": "Assigned to UserId",
            "type": "integer"
          },
          "Name": {
            "description": "Assigned to User - Name",
            "type": "string"
          },
          "Surname": {
            "description": "Assigned to User - SurName",
            "type": "string"
          },
          "UserName": {
            "description": "Assigned to User - UserName",
            "type": "string"
          },
          "EmailAddress": {
            "description": "Assigned to User - EmailAddress",
            "type": "string"
          },
          "CreationTime": {
            "format": "date-time",
            "description": "Creationtime of the item",
            "type": "string"
          },
          "ModifiedTime": {
            "format": "date-time",
            "description": "Modification time of the item",
            "type": "string"
          }
        }
      },
      "ODataValueOfIEnumerableOfJobTriggerWithWaitEventsDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/JobTriggerWithWaitEventsDto"
            }
          }
        }
      },
      "LibraryDto": {
        "type": "object",
        "properties": {
          "Created": {
            "format": "date-time",
            "type": "string"
          },
          "LastUpdated": {
            "format": "date-time",
            "type": "string"
          },
          "Owners": {
            "type": "string"
          },
          "IconUrl": {
            "type": "string"
          },
          "Summary": {
            "type": "string"
          },
          "PackageSize": {
            "format": "int64",
            "type": "integer"
          },
          "IsPrerelease": {
            "type": "boolean"
          },
          "Title": {
            "description": "The custom name of the package.",
            "type": "string"
          },
          "Version": {
            "description": "The current version of the given package.",
            "type": "string"
          },
          "Key": {
            "description": "The unique identifier for the package.",
            "type": "string"
          },
          "Description": {
            "description": "Used to add additional information about a package in order to better identify it.",
            "type": "string"
          },
          "Published": {
            "format": "date-time",
            "description": "The date and time when the package was published or uploaded.",
            "type": "string"
          },
          "IsLatestVersion": {
            "description": "Specifies whether the current version is the latest of the given package.",
            "type": "boolean"
          },
          "OldVersion": {
            "description": "Specifies the last version before the current one.",
            "type": "string"
          },
          "ReleaseNotes": {
            "description": "Package release notes.",
            "type": "string"
          },
          "Authors": {
            "description": "Package authors.",
            "type": "string"
          },
          "ProjectType": {
            "description": "Package project type.",
            "enum": [
              "Undefined",
              "Process",
              "ProcessLibrary",
              "BusinessProcess",
              "BusinessProcessLibrary",
              "TestAutomationProcess"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "PackageDtoProjectType",
              "modelAsString": false
            }
          },
          "Tags": {
            "description": "Package tags.",
            "type": "string"
          },
          "IsCompiled": {
            "description": "Disable explore packages for compiled processes",
            "type": "boolean"
          },
          "LicenseUrl": {
            "description": "License URL",
            "type": "string"
          },
          "ProjectUrl": {
            "description": "Project URL",
            "type": "string"
          },
          "Id": {
            "type": "string"
          }
        }
      },
      "ODataValueOfIEnumerableOfLibraryDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LibraryDto"
            }
          }
        }
      },
      "BulkItemDtoOfString": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string"
          },
          "Status": {
            "enum": [
              "Continue",
              "SwitchingProtocols",
              "Processing",
              "EarlyHints",
              "OK",
              "Created",
              "Accepted",
              "NonAuthoritativeInformation",
              "NoContent",
              "ResetContent",
              "PartialContent",
              "MultiStatus",
              "AlreadyReported",
              "IMUsed",
              "MultipleChoices",
              "Ambiguous",
              "MovedPermanently",
              "Moved",
              "Found",
              "Redirect",
              "SeeOther",
              "RedirectMethod",
              "NotModified",
              "UseProxy",
              "Unused",
              "TemporaryRedirect",
              "RedirectKeepVerb",
              "PermanentRedirect",
              "BadRequest",
              "Unauthorized",
              "PaymentRequired",
              "Forbidden",
              "NotFound",
              "MethodNotAllowed",
              "NotAcceptable",
              "ProxyAuthenticationRequired",
              "RequestTimeout",
              "Conflict",
              "Gone",
              "LengthRequired",
              "PreconditionFailed",
              "RequestEntityTooLarge",
              "RequestUriTooLong",
              "UnsupportedMediaType",
              "RequestedRangeNotSatisfiable",
              "ExpectationFailed",
              "MisdirectedRequest",
              "UnprocessableEntity",
              "Locked",
              "FailedDependency",
              "UpgradeRequired",
              "PreconditionRequired",
              "TooManyRequests",
              "RequestHeaderFieldsTooLarge",
              "UnavailableForLegalReasons",
              "InternalServerError",
              "NotImplemented",
              "BadGateway",
              "ServiceUnavailable",
              "GatewayTimeout",
              "HttpVersionNotSupported",
              "VariantAlsoNegotiates",
              "InsufficientStorage",
              "LoopDetected",
              "NotExtended",
              "NetworkAuthenticationRequired"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "BulkItemDto`1Status",
              "modelAsString": false
            }
          },
          "Body": {
            "type": "string"
          }
        }
      },
      "ODataValueOfIEnumerableOfBulkItemDtoOfString": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/BulkItemDtoOfString"
            }
          }
        }
      },
      "LicenseNamedUserDto": {
        "description": "Stores information about a named-user license (attended/development).",
        "type": "object",
        "properties": {
          "Key": {
            "description": "The license key.",
            "type": "string"
          },
          "UserName": {
            "description": "The Robot's UserName.",
            "type": "string"
          },
          "LastLoginDate": {
            "format": "date-time",
            "description": "The last date when the Robot acquired a license.",
            "type": "string"
          },
          "MachinesCount": {
            "format": "int32",
            "description": "Total number of machines where a robot with UserName is defined.",
            "type": "integer"
          },
          "IsLicensed": {
            "description": "If the license is in use.",
            "type": "boolean"
          },
          "IsExternalLicensed": {
            "description": "If the robot is external licensed",
            "type": "boolean"
          },
          "ActiveRobotId": {
            "format": "int64",
            "description": "The Id of the Robot that uses the license.",
            "type": "integer"
          },
          "MachineNames": {
            "description": "The Machine names of the defined Robot.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ActiveMachineNames": {
            "description": "The Machine names of the connected and licensed Robot.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ODataValueOfIEnumerableOfLicenseNamedUserDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LicenseNamedUserDto"
            }
          }
        }
      },
      "LicensesRuntimeToggleEnabledParameters": {
        "required": [
          "enabled",
          "robotType"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "robotType": {
            "enum": [
              "NonProduction",
              "Attended",
              "Unattended",
              "Studio",
              "Development",
              "RpaDeveloper",
              "StudioX",
              "CitizenDeveloper",
              "Headless",
              "StudioPro",
              "RpaDeveloperPro",
              "TestAutomation",
              "AutomationCloud"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ToggleEnabledParametersRobotType",
              "modelAsString": false
            }
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "LicenseRuntimeDto": {
        "description": "Stores information about a runtime license (unattended/non-production).",
        "type": "object",
        "properties": {
          "Key": {
            "description": "The license key.",
            "type": "string"
          },
          "MachineId": {
            "format": "int64",
            "description": "The Machine's Id.",
            "type": "integer"
          },
          "MachineName": {
            "description": "The Machine's Name.",
            "type": "string"
          },
          "HostMachineName": {
            "description": "The Host machine's Name.",
            "type": "string"
          },
          "ServiceUserName": {
            "description": "The Service username when installed in user mode.",
            "type": "string"
          },
          "MachineType": {
            "description": "The Machine's Type.",
            "enum": [
              "Standard",
              "Template"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "LicenseRuntimeDtoMachineType",
              "modelAsString": false
            }
          },
          "Runtimes": {
            "format": "int32",
            "description": "Maximum number of runtimes.",
            "type": "integer"
          },
          "RobotsCount": {
            "format": "int32",
            "description": "Total number of Robots.",
            "type": "integer"
          },
          "ExecutingCount": {
            "format": "int32",
            "description": "How many Robots acquired a license.",
            "type": "integer"
          },
          "IsOnline": {
            "description": "If the machine is online.",
            "type": "boolean"
          },
          "IsLicensed": {
            "description": "If the machine is licensed.",
            "type": "boolean"
          },
          "Enabled": {
            "description": "If the machine is allowed to consume licenses.",
            "type": "boolean"
          }
        }
      },
      "ODataValueOfIEnumerableOfLicenseRuntimeDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LicenseRuntimeDto"
            }
          }
        }
      },
      "ODataValueOfIEnumerableOfExtendedMachineDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExtendedMachineDto"
            }
          }
        }
      },
      "MachineDeleteBulkRequest": {
        "type": "object",
        "properties": {
          "machineIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "ODataValueOfIEnumerableOfMachineDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MachineDto"
            }
          }
        }
      },
      "MachineRuntimeDto": {
        "type": "object",
        "properties": {
          "Type": {
            "enum": [
              "NonProduction",
              "Attended",
              "Unattended",
              "Studio",
              "Development",
              "RpaDeveloper",
              "StudioX",
              "CitizenDeveloper",
              "Headless",
              "StudioPro",
              "RpaDeveloperPro",
              "TestAutomation",
              "AutomationCloud"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "MachineRuntimeDtoType",
              "modelAsString": false
            }
          },
          "Total": {
            "format": "int64",
            "type": "integer"
          },
          "Connected": {
            "format": "int64",
            "type": "integer"
          },
          "Available": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfMachineRuntimeDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MachineRuntimeDto"
            }
          }
        }
      },
      "MessageTemplateDto": {
        "description": "Used to store various predefined application message templates like custom login layout.",
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "description": "The name of a specific template (e.g. Templates.LoginLayout).",
            "maxLength": 256,
            "type": "string"
          },
          "Value": {
            "description": "The value assigned to a specific template.",
            "type": "string"
          },
          "Id": {
            "type": "string"
          }
        }
      },
      "ODataValueOfIEnumerableOfMessageTemplateDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MessageTemplateDto"
            }
          }
        }
      },
      "OrganizationUnitDto": {
        "description": "Stores information about an organization unit in Orchestrator.\r\n<para /> An orchestrator unit can be understood as a company department and it is used to group different entities.",
        "required": [
          "DisplayName"
        ],
        "type": "object",
        "properties": {
          "DisplayName": {
            "description": "The name of the organization unit.",
            "maxLength": 128,
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfOrganizationUnitDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OrganizationUnitDto"
            }
          }
        }
      },
      "OrganizationUnitsSetUsersParameters": {
        "required": [
          "addedUserIds",
          "removedUserIds"
        ],
        "type": "object",
        "properties": {
          "addedUserIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "removedUserIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "UserRoleDto": {
        "description": "Stores information about the association between a user and a role.",
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int64",
            "description": "The Id of the associated user.",
            "type": "integer"
          },
          "RoleId": {
            "format": "int32",
            "description": "The Id of the associated role.",
            "type": "integer"
          },
          "UserName": {
            "description": "The name of the associated user",
            "type": "string"
          },
          "RoleName": {
            "description": "The name of the associated role",
            "type": "string"
          },
          "RoleType": {
            "enum": [
              "Mixed",
              "Tenant",
              "Folder"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "UserRoleDtoRoleType",
              "modelAsString": false
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "AttendedRobotDto": {
        "type": "object",
        "properties": {
          "UserName": {
            "description": "The UserName used to authenticate on the Host Machine.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "ExecutionSettings": {
            "description": "An object containing execution settings for the Robot.",
            "type": "object",
            "additionalProperties": {}
          },
          "RobotId": {
            "format": "int64",
            "description": "The actual Id of the provisioned Robot.",
            "type": "integer"
          },
          "RobotType": {
            "description": "The actual Type of the provisioned Robot.",
            "enum": [
              "NonProduction",
              "Attended",
              "Unattended",
              "Studio",
              "Development",
              "RpaDeveloper",
              "StudioX",
              "CitizenDeveloper",
              "Headless",
              "StudioPro",
              "RpaDeveloperPro",
              "TestAutomation",
              "AutomationCloud"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "AttendedRobotDtoRobotType",
              "modelAsString": false
            }
          }
        }
      },
      "UnattendedRobotDto": {
        "type": "object",
        "properties": {
          "UserName": {
            "description": "The UserName used to authenticate on the Host Machine.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "Password": {
            "description": "The Password used to authenticate on the Host Machine.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "CredentialStoreId": {
            "format": "int64",
            "description": "The Credential Store used to store the password.",
            "type": "integer"
          },
          "CredentialType": {
            "description": "The robot credentials type (Default/ SmartCard)",
            "enum": [
              "Default",
              "SmartCard",
              "NCipher",
              "SafeNet",
              "NoCredential"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "UnattendedRobotDtoCredentialType",
              "modelAsString": false
            }
          },
          "CredentialExternalName": {
            "description": "Contains the value of the key in the external store used to store the password.",
            "maxLength": 450,
            "minLength": 0,
            "type": "string"
          },
          "ExecutionSettings": {
            "description": "An object containing execution settings for the Robot.",
            "type": "object",
            "additionalProperties": {}
          },
          "LimitConcurrentExecution": {
            "description": "Specifies if the robot can be used concurrently on multiple machines",
            "type": "boolean"
          },
          "RobotId": {
            "format": "int64",
            "description": "The actual Id of the provisioned Robot.",
            "type": "integer"
          },
          "MachineMappingsCount": {
            "format": "int32",
            "description": "Number of assigned machine mappings.",
            "type": "integer"
          }
        }
      },
      "UserNotificationSubscription": {
        "type": "object",
        "properties": {
          "Queues": {
            "type": "boolean"
          },
          "Robots": {
            "type": "boolean"
          },
          "Jobs": {
            "type": "boolean"
          },
          "Schedules": {
            "type": "boolean"
          },
          "Tasks": {
            "type": "boolean"
          },
          "QueueItems": {
            "type": "boolean"
          },
          "Insights": {
            "type": "boolean"
          },
          "CloudRobots": {
            "type": "boolean"
          }
        }
      },
      "UserDto": {
        "description": "Stores information about assigned role(s) and email settings, and enables a person or a Robot to login to Orchestrator.",
        "type": "object",
        "properties": {
          "Name": {
            "description": "The name of the person for which the user is created.",
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "Surname": {
            "description": "The surname of the person for which the user is created.",
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "UserName": {
            "description": "The name used to login to Orchestrator.",
            "type": "string"
          },
          "Domain": {
            "description": "The domain from which the user is imported",
            "type": "string"
          },
          "DirectoryIdentifier": {
            "description": "The directory identifier from which the user is imported",
            "type": "string"
          },
          "FullName": {
            "description": "The full name of the person constructed with the format Name Surname.",
            "type": "string"
          },
          "EmailAddress": {
            "format": "email",
            "description": "The e-mail address associated with the user.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "IsEmailConfirmed": {
            "description": "States if the email address is valid or not.",
            "type": "boolean"
          },
          "LastLoginTime": {
            "format": "date-time",
            "description": "The date and time when the user last logged in, or null if the user never logged in.",
            "type": "string"
          },
          "IsActive": {
            "description": "States if the user is active or not. An inactive user cannot login to Orchestrator.",
            "type": "boolean"
          },
          "CreationTime": {
            "format": "date-time",
            "description": "The date and time when the user was created.",
            "type": "string"
          },
          "AuthenticationSource": {
            "description": "The source which authenticated this user.",
            "type": "string"
          },
          "Password": {
            "description": "The password used during application login.",
            "type": "string"
          },
          "IsExternalLicensed": {
            "type": "boolean"
          },
          "UserRoles": {
            "description": "The collection of roles associated with the user.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserRoleDto"
            }
          },
          "RolesList": {
            "description": "The collection of role names associated with the user.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "LoginProviders": {
            "description": "The collection of entities that can authenticate the user.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "OrganizationUnits": {
            "description": "The collection of organization units associated with the user.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/OrganizationUnitDto"
            }
          },
          "TenantId": {
            "format": "int32",
            "description": "The id of the tenant owning the user.",
            "type": "integer"
          },
          "TenancyName": {
            "description": "The name of the tenant owning the user.",
            "type": "string"
          },
          "TenantDisplayName": {
            "description": "The display name of the tenant owning the user.",
            "type": "string"
          },
          "TenantKey": {
            "description": "The key of the tenant owning the user.",
            "type": "string"
          },
          "Type": {
            "description": "The user type.",
            "enum": [
              "User",
              "Robot",
              "DirectoryUser",
              "DirectoryGroup",
              "DirectoryRobot"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "UserDtoType",
              "modelAsString": false
            }
          },
          "ProvisionType": {
            "description": "The user type.",
            "enum": [
              "Manual",
              "Automatic"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "UserDtoProvisionType",
              "modelAsString": false
            }
          },
          "LicenseType": {
            "description": "The user's license type.",
            "enum": [
              "NonProduction",
              "Attended",
              "Unattended",
              "Studio",
              "Development",
              "RpaDeveloper",
              "StudioX",
              "CitizenDeveloper",
              "Headless",
              "StudioPro",
              "RpaDeveloperPro",
              "TestAutomation",
              "AutomationCloud"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "UserDtoLicenseType",
              "modelAsString": false
            }
          },
          "RobotProvision": {
            "$ref": "#/definitions/AttendedRobotDto"
          },
          "UnattendedRobot": {
            "$ref": "#/definitions/UnattendedRobotDto"
          },
          "NotificationSubscription": {
            "$ref": "#/definitions/UserNotificationSubscription"
          },
          "Key": {
            "format": "uuid",
            "description": "Unique key for a user",
            "type": "string"
          },
          "MayHaveUserSession": {
            "description": "Specifies whether this user is allowed to have a User session (default: true)",
            "type": "boolean"
          },
          "MayHaveRobotSession": {
            "description": "Specifies whether this user is allowed to have an Attended Robot attached (default: true)",
            "type": "boolean"
          },
          "MayHaveUnattendedSession": {
            "description": "Specifies whether this user is allowed to have an Unattended Robot attached (default: false)",
            "type": "boolean"
          },
          "BypassBasicAuthRestriction": {
            "description": "Specifies whether this user bypasses the \"Auth.RestrictBasicAuthentication\" application setting (default: false)",
            "type": "boolean"
          },
          "MayHavePersonalWorkspace": {
            "description": "Specifies whether this user is allowed to have a Personal Workspace",
            "type": "boolean"
          },
          "UpdatePolicy": {
            "$ref": "#/definitions/UpdatePolicyDto"
          },
          "LastModificationTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastModifierUserId": {
            "format": "int64",
            "type": "integer"
          },
          "CreatorUserId": {
            "format": "int64",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfUserDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserDto"
            }
          }
        }
      },
      "PermissionDto": {
        "description": "Stores information about an application permission and role association.",
        "type": "object",
        "properties": {
          "Name": {
            "description": "The name of the application permission.",
            "type": "string"
          },
          "IsGranted": {
            "description": "States if a user associated with the role will be allowed or denied to perform the actions governed by the permission.",
            "type": "boolean"
          },
          "RoleId": {
            "format": "int32",
            "description": "The Id of the role associated with the permission.",
            "type": "integer"
          },
          "Scope": {
            "description": "The application scope in which the permission will be applied",
            "enum": [
              "Global",
              "Folder",
              "GlobalOrFolder"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "PermissionDtoScope",
              "modelAsString": false
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfPermissionDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/PermissionDto"
            }
          }
        }
      },
      "ProcessDto": {
        "description": "A process is a project defined in UiPath Studio and published in Orchestrator from UiPath Studio or manually.",
        "type": "object",
        "properties": {
          "IsActive": {
            "description": "Specifies if the process is still active.",
            "type": "boolean"
          },
          "Arguments": {
            "$ref": "#/definitions/ArgumentMetadata"
          },
          "SupportsMultipleEntryPoints": {
            "description": "Specifies if the process has multiple entry points.",
            "type": "boolean"
          },
          "MainEntryPointPath": {
            "description": "The main entry point path.",
            "type": "string"
          },
          "RequiresUserInteraction": {
            "description": "Specifies if the process can run in headless mode.",
            "type": "boolean"
          },
          "IsAttended": {
            "type": "boolean"
          },
          "TargetFramework": {
            "enum": [
              "Legacy",
              "Windows",
              "Portable"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ProcessDtoTargetFramework",
              "modelAsString": false
            }
          },
          "EntryPoints": {
            "description": "Entry points.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/EntryPointDto"
            }
          },
          "Title": {
            "description": "The custom name of the package.",
            "type": "string"
          },
          "Version": {
            "description": "The current version of the given package.",
            "type": "string"
          },
          "Key": {
            "description": "The unique identifier for the package.",
            "type": "string"
          },
          "Description": {
            "description": "Used to add additional information about a package in order to better identify it.",
            "type": "string"
          },
          "Published": {
            "format": "date-time",
            "description": "The date and time when the package was published or uploaded.",
            "type": "string"
          },
          "IsLatestVersion": {
            "description": "Specifies whether the current version is the latest of the given package.",
            "type": "boolean"
          },
          "OldVersion": {
            "description": "Specifies the last version before the current one.",
            "type": "string"
          },
          "ReleaseNotes": {
            "description": "Package release notes.",
            "type": "string"
          },
          "Authors": {
            "description": "Package authors.",
            "type": "string"
          },
          "ProjectType": {
            "description": "Package project type.",
            "enum": [
              "Undefined",
              "Process",
              "ProcessLibrary",
              "BusinessProcess",
              "BusinessProcessLibrary",
              "TestAutomationProcess"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "PackageDtoProjectType",
              "modelAsString": false
            }
          },
          "Tags": {
            "description": "Package tags.",
            "type": "string"
          },
          "IsCompiled": {
            "description": "Disable explore packages for compiled processes",
            "type": "boolean"
          },
          "LicenseUrl": {
            "description": "License URL",
            "type": "string"
          },
          "ProjectUrl": {
            "description": "Project URL",
            "type": "string"
          },
          "Id": {
            "type": "string"
          }
        }
      },
      "ODataValueOfIEnumerableOfProcessDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ProcessDto"
            }
          }
        }
      },
      "ProcessesSetArgumentsParameters": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "arguments": {
            "$ref": "#/definitions/ArgumentMetadata"
          }
        }
      },
      "RobotExecutorDto": {
        "description": "Stores information about a robot on which a process will be executed.",
        "type": "object",
        "properties": {
          "MachineName": {
            "description": "The name of the machine on which the robot runs the job.",
            "type": "string"
          },
          "Name": {
            "description": "The name of the robot that runs the job.",
            "type": "string"
          },
          "Description": {
            "description": "The description of the robot that runs the job.",
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ProcessScheduleDto": {
        "description": "Defines the schedule of a process that can be executed at regular intervals, on selected Robots, all of them or a specified number of Robots.",
        "required": [
          "Name",
          "TimeZoneId"
        ],
        "type": "object",
        "properties": {
          "Enabled": {
            "description": "Specifies if the schedule is active or not.",
            "type": "boolean"
          },
          "Name": {
            "description": "The name of the schedule.",
            "maxLength": 255,
            "type": "string"
          },
          "ReleaseId": {
            "format": "int64",
            "description": "The Id of the process associated with the schedule.",
            "type": "integer"
          },
          "ReleaseKey": {
            "description": "The unique key of the process associated with the schedule.",
            "type": "string"
          },
          "ReleaseName": {
            "description": "The name of the process associated with the schedule.",
            "type": "string"
          },
          "PackageName": {
            "description": "The name of the package to be triggered with the schedule.",
            "type": "string"
          },
          "EnvironmentName": {
            "description": "The name of the environment associated with the schedule.",
            "type": "string"
          },
          "EnvironmentId": {
            "description": "The Id of the environment associated with the schedule.",
            "type": "string"
          },
          "JobPriority": {
            "description": "The execution priority. If null, it will start jobs with the release's priority.",
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ProcessScheduleDtoJobPriority",
              "modelAsString": false
            }
          },
          "RuntimeType": {
            "description": "The runtime type of the robot",
            "enum": [
              "NonProduction",
              "Attended",
              "Unattended",
              "Studio",
              "Development",
              "RpaDeveloper",
              "StudioX",
              "CitizenDeveloper",
              "Headless",
              "StudioPro",
              "RpaDeveloperPro",
              "TestAutomation",
              "AutomationCloud"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ProcessScheduleDtoRuntimeType",
              "modelAsString": false
            }
          },
          "StartProcessCron": {
            "description": "The start cron expression of the schedule.",
            "type": "string"
          },
          "StartProcessCronDetails": {
            "description": "Various details that can be associated to the time period expression of the schedule.",
            "type": "string"
          },
          "StartProcessCronSummary": {
            "description": "Human readable form of cron expression of the schedule.",
            "type": "string"
          },
          "StartProcessNextOccurrence": {
            "format": "date-time",
            "description": "The date and time when the associated process will be run next.",
            "type": "string"
          },
          "StartStrategy": {
            "format": "int32",
            "description": "States which robots from the environment are being run by the schedule.",
            "type": "integer"
          },
          "ExecutorRobots": {
            "description": "The collection of specific robots selected to be targeted by the current schedule. This collection must be empty if the start strategy is not 0 (specific robots).",
            "type": "array",
            "items": {
              "$ref": "#/definitions/RobotExecutorDto"
            }
          },
          "StopProcessExpression": {
            "description": "Number of seconds after which a running process will be stopped.",
            "type": "string"
          },
          "StopStrategy": {
            "description": "The way a running process is stopped.",
            "enum": [
              "SoftStop",
              "Kill"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ProcessScheduleDtoStopStrategy",
              "modelAsString": false
            }
          },
          "KillProcessExpression": {
            "description": "Grace period (in seconds) for soft stop. If a process doesn't stop after this amount, it will be killed",
            "type": "string"
          },
          "ExternalJobKey": {
            "description": "The unique identifier of the external job associated with the jobs generated by this schedule. A key is generated for each group of jobs triggered by this schedule.",
            "type": "string"
          },
          "TimeZoneId": {
            "description": "The timezone under which the schedule will run.",
            "maxLength": 80,
            "type": "string"
          },
          "TimeZoneIana": {
            "description": "The timezone under which the schedule will run in Iana Standard.",
            "type": "string"
          },
          "UseCalendar": {
            "description": "DEPRECATED. Specify whether the schedule uses any calendar.",
            "type": "boolean",
            "x-deprecated": true
          },
          "CalendarId": {
            "format": "int64",
            "description": "The id of the calendar that a process schedule uses.",
            "type": "integer"
          },
          "CalendarName": {
            "description": "The name of the calendar.",
            "type": "string"
          },
          "StopProcessDate": {
            "format": "date-time",
            "type": "string"
          },
          "InputArguments": {
            "description": "Input parameters that will be passed to each job created by this schedule.",
            "maxLength": 10000,
            "type": "string"
          },
          "QueueDefinitionId": {
            "format": "int64",
            "description": "The Id of the queue that uses this schedule for activation (trigger jobs when new queue items are added)",
            "type": "integer"
          },
          "QueueDefinitionName": {
            "description": "The Name of the queue that uses this schedule for activation (trigger jobs when new queue items are added)",
            "type": "string"
          },
          "ItemsActivationThreshold": {
            "format": "int64",
            "description": "The minimum number of queue items that should trigger the process activation.",
            "maximum": 10000,
            "minimum": 1,
            "type": "integer"
          },
          "ItemsPerJobActivationTarget": {
            "format": "int64",
            "description": "The target ratio between the number of queue items and the Total number of jobs created by a process.",
            "maximum": 10000,
            "minimum": 1,
            "type": "integer"
          },
          "MaxJobsForActivation": {
            "format": "int32",
            "description": "The maximum number of jobs that a process can create as result of a Queue driven activation.",
            "maximum": 10000,
            "minimum": 1,
            "type": "integer"
          },
          "ResumeOnSameContext": {
            "description": "Flag for honoring initial machine and robot choice upon resumption of created jobs, if jobs are suspended. <br />\r\nIf set, the jobs will resume on the same robot-machine pair on which they initially ran.",
            "type": "boolean"
          },
          "MachineRobots": {
            "description": "The machine robots.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/MachineRobotDto"
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfProcessScheduleDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ProcessScheduleDto"
            }
          }
        }
      },
      "ProcessSetEnabledRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "scheduleIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "ProcessSchedulesValidateProcessScheduleParameters": {
        "type": "object",
        "properties": {
          "processSchedule": {
            "$ref": "#/definitions/ProcessScheduleDto"
          }
        }
      },
      "QueueDefinitionDto": {
        "description": "The definition of a work queue. A work queue contains work items that are processed by robots.",
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "description": "A custom name for the queue.",
            "type": "string"
          },
          "Description": {
            "description": "Used to add additional information about a queue in order to better identify it.",
            "type": "string"
          },
          "MaxNumberOfRetries": {
            "format": "int32",
            "description": "An integer value representing the number of times an item of this queue can be retried if its processing fails with application exception and auto retry is on.",
            "type": "integer"
          },
          "AcceptAutomaticallyRetry": {
            "description": "States whether a robot should retry to process an item if, after processing, it failed with application exception.",
            "type": "boolean"
          },
          "EnforceUniqueReference": {
            "description": "States whether Item Reference field should be unique per Queue. Deleted and retried items are not checked against this rule.",
            "type": "boolean"
          },
          "SpecificDataJsonSchema": {
            "description": "JSON schema enforced onto the specific data field.",
            "type": "string"
          },
          "OutputDataJsonSchema": {
            "description": "JSON schema enforced onto the output data field.",
            "type": "string"
          },
          "AnalyticsDataJsonSchema": {
            "description": "JSON schema enforced onto the analytics data field.",
            "type": "string"
          },
          "CreationTime": {
            "format": "date-time",
            "description": "The date and time when the queue was created.",
            "type": "string"
          },
          "ProcessScheduleId": {
            "format": "int64",
            "description": "The Id of the process schedule associated with the queue.",
            "type": "integer"
          },
          "SlaInMinutes": {
            "format": "int32",
            "description": "Queue item processing SLA on the QueueDefinition level.",
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer"
          },
          "RiskSlaInMinutes": {
            "format": "int32",
            "description": "Queue Item processing Risk SLA on the QueueDefinition level.",
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer"
          },
          "ReleaseId": {
            "format": "int64",
            "description": "The ProcessId Queue is associated with.",
            "type": "integer"
          },
          "IsProcessInCurrentFolder": {
            "description": "Flag to determine if the release is in the current folder",
            "type": "boolean"
          },
          "FoldersCount": {
            "format": "int32",
            "description": "Number of folders where the queue is shared.",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "description": "DEPRECATED. ",
            "type": "integer",
            "x-deprecated": true
          },
          "OrganizationUnitFullyQualifiedName": {
            "description": "DEPRECATED. ",
            "type": "string",
            "x-deprecated": true
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfQueueDefinitionDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/QueueDefinitionDto"
            }
          }
        }
      },
      "QueueFoldersShareDto": {
        "type": "object",
        "properties": {
          "QueueIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "ToAddFolderIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "ToRemoveFolderIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "QueueItemCommentDto": {
        "description": "Stores information about a comment posted by an Orchestrator user on a queue item.",
        "required": [
          "Text"
        ],
        "type": "object",
        "properties": {
          "Text": {
            "description": "The comment body.",
            "maxLength": 512,
            "minLength": 0,
            "type": "string"
          },
          "QueueItemId": {
            "format": "int64",
            "description": "The Id of a Queue Item that the current item is connected to.",
            "type": "integer"
          },
          "CreationTime": {
            "format": "date-time",
            "description": "DEPRECATED. The date and time when the comment was created.",
            "type": "string",
            "x-deprecated": true
          },
          "UserId": {
            "format": "int64",
            "description": "The id of the User that authored the comment.",
            "type": "integer"
          },
          "UserName": {
            "description": "The name of the User that authored the comment.",
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfQueueItemCommentDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/QueueItemCommentDto"
            }
          }
        }
      },
      "QueueItemEventDto": {
        "description": "Stores information about an event on a queue item.",
        "type": "object",
        "properties": {
          "QueueItemId": {
            "format": "int64",
            "description": "The Id of a Queue Item that the current item is connected to.",
            "type": "integer"
          },
          "Timestamp": {
            "format": "date-time",
            "description": "The Date and Time when the event occured.",
            "type": "string"
          },
          "Action": {
            "description": "The Action that caused the event.",
            "enum": [
              "Create",
              "Edit",
              "Delete",
              "Status",
              "Retry"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "QueueItemEventDtoAction",
              "modelAsString": false
            }
          },
          "Data": {
            "description": "The Data associated to the event.",
            "type": "string"
          },
          "UserId": {
            "format": "int64",
            "description": "The Id of the User that caused the event.",
            "type": "integer"
          },
          "UserName": {
            "description": "The Name of the User that caused the event.",
            "type": "string"
          },
          "Status": {
            "description": "Processing Status when event snapshot was taken.",
            "enum": [
              "New",
              "InProgress",
              "Failed",
              "Successful",
              "Abandoned",
              "Retried",
              "Deleted"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "QueueItemEventDtoStatus",
              "modelAsString": false
            }
          },
          "ReviewStatus": {
            "description": "Review Status when event snapshot was taken.",
            "enum": [
              "None",
              "InReview",
              "Verified",
              "Retried"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "QueueItemEventDtoReviewStatus",
              "modelAsString": false
            }
          },
          "ReviewerUserId": {
            "format": "int64",
            "description": "Reviewer User Id when event snapshot was taken.",
            "type": "integer"
          },
          "ReviewerUserName": {
            "description": "Reviewer User Name when event snapshot was taken.",
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfQueueItemEventDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/QueueItemEventDto"
            }
          }
        }
      },
      "ProcessingExceptionDto": {
        "description": "Stores information about exceptions thrown while processing failed queue items.",
        "type": "object",
        "properties": {
          "Reason": {
            "description": "The reason the processing failed.",
            "type": "string"
          },
          "Details": {
            "description": "Stores additional details about the exception.",
            "type": "string"
          },
          "Type": {
            "description": "The processing exception type, if any.",
            "enum": [
              "ApplicationException",
              "BusinessException"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ProcessingExceptionDtoType",
              "modelAsString": false
            }
          },
          "AssociatedImageFilePath": {
            "description": "A path on the robot running computer to an image file that stores relevant information about the exception - e.g. a system print screen.",
            "type": "string"
          },
          "CreationTime": {
            "format": "date-time",
            "description": "Time when the exception occurred",
            "type": "string"
          }
        }
      },
      "JobCompletedEventDto": {
        "description": "This event is raised whenever a job has completed successfully",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Job": {
            "$ref": "#/definitions/WebhookSimpleJobDto"
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "job.completed"
      },
      "JobFaultedEventDto": {
        "description": "This event is raised whenever a job has failed to finish execution",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Job": {
            "$ref": "#/definitions/WebhookSimpleJobDto"
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "job.faulted"
      },
      "WebhookStartProcessDto": {
        "type": "object",
        "properties": {
          "ReleaseKey": {
            "format": "uuid",
            "description": "The unique key of the release associated with the process.",
            "type": "string",
            "readOnly": true
          },
          "Strategy": {
            "description": "States which robots from the environment are being run by the process.",
            "enum": [
              "All",
              "Specific",
              "RobotCount",
              "JobsCount",
              "ModernJobsCount"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "WebhookStartProcessDtoStrategy",
              "modelAsString": false
            }
          },
          "RobotIds": {
            "description": "The collection of ids of specific robots selected to be run by the current process. This collection must be empty only if the start strategy is not Specific.",
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "readOnly": true
          },
          "JobsCount": {
            "format": "int32",
            "description": "Number of pending jobs to be created in the environment, for the current process. This number must be greater than 0 only if the start strategy is JobsCount.",
            "type": "integer",
            "readOnly": true
          },
          "Source": {
            "description": "The Source of the job starting the current process.",
            "enum": [
              "Manual",
              "Schedule",
              "Queue",
              "StudioWeb",
              "IntegrationTrigger",
              "StudioDesktop"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "WebhookStartProcessDtoSource",
              "modelAsString": false
            }
          }
        }
      },
      "SimpleUserDto": {
        "description": "Entity derived from UserDto. Is shares all the properties of the base entity except the navigation properties.",
        "type": "object",
        "properties": {
          "Name": {
            "description": "The name of the person for which the user is created.",
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "Surname": {
            "description": "The surname of the person for which the user is created.",
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "UserName": {
            "description": "The name used to login to Orchestrator.",
            "type": "string"
          },
          "Domain": {
            "description": "The domain from which the user is imported",
            "type": "string"
          },
          "DirectoryIdentifier": {
            "description": "The directory identifier from which the user is imported",
            "type": "string"
          },
          "FullName": {
            "description": "The full name of the person constructed with the format Name Surname.",
            "type": "string"
          },
          "EmailAddress": {
            "format": "email",
            "description": "The e-mail address associated with the user.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "IsEmailConfirmed": {
            "description": "States if the email address is valid or not.",
            "type": "boolean"
          },
          "LastLoginTime": {
            "format": "date-time",
            "description": "The date and time when the user last logged in, or null if the user never logged in.",
            "type": "string"
          },
          "IsActive": {
            "description": "States if the user is active or not. An inactive user cannot login to Orchestrator.",
            "type": "boolean"
          },
          "CreationTime": {
            "format": "date-time",
            "description": "The date and time when the user was created.",
            "type": "string"
          },
          "AuthenticationSource": {
            "description": "The source which authenticated this user.",
            "type": "string"
          },
          "Password": {
            "description": "The password used during application login.",
            "type": "string"
          },
          "IsExternalLicensed": {
            "type": "boolean"
          },
          "UserRoles": {
            "description": "The collection of roles associated with the user.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserRoleDto"
            }
          },
          "RolesList": {
            "description": "The collection of role names associated with the user.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "LoginProviders": {
            "description": "The collection of entities that can authenticate the user.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "OrganizationUnits": {
            "description": "The collection of organization units associated with the user.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/OrganizationUnitDto"
            }
          },
          "TenantId": {
            "format": "int32",
            "description": "The id of the tenant owning the user.",
            "type": "integer"
          },
          "TenancyName": {
            "description": "The name of the tenant owning the user.",
            "type": "string"
          },
          "TenantDisplayName": {
            "description": "The display name of the tenant owning the user.",
            "type": "string"
          },
          "TenantKey": {
            "description": "The key of the tenant owning the user.",
            "type": "string"
          },
          "Type": {
            "description": "The user type.",
            "enum": [
              "User",
              "Robot",
              "DirectoryUser",
              "DirectoryGroup",
              "DirectoryRobot"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "UserDtoType",
              "modelAsString": false
            }
          },
          "ProvisionType": {
            "description": "The user type.",
            "enum": [
              "Manual",
              "Automatic"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "UserDtoProvisionType",
              "modelAsString": false
            }
          },
          "LicenseType": {
            "description": "The user's license type.",
            "enum": [
              "NonProduction",
              "Attended",
              "Unattended",
              "Studio",
              "Development",
              "RpaDeveloper",
              "StudioX",
              "CitizenDeveloper",
              "Headless",
              "StudioPro",
              "RpaDeveloperPro",
              "TestAutomation",
              "AutomationCloud"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "UserDtoLicenseType",
              "modelAsString": false
            }
          },
          "RobotProvision": {
            "$ref": "#/definitions/AttendedRobotDto"
          },
          "UnattendedRobot": {
            "$ref": "#/definitions/UnattendedRobotDto"
          },
          "NotificationSubscription": {
            "$ref": "#/definitions/UserNotificationSubscription"
          },
          "Key": {
            "format": "uuid",
            "description": "Unique key for a user",
            "type": "string"
          },
          "MayHaveUserSession": {
            "description": "Specifies whether this user is allowed to have a User session (default: true)",
            "type": "boolean"
          },
          "MayHaveRobotSession": {
            "description": "Specifies whether this user is allowed to have an Attended Robot attached (default: true)",
            "type": "boolean"
          },
          "MayHaveUnattendedSession": {
            "description": "Specifies whether this user is allowed to have an Unattended Robot attached (default: false)",
            "type": "boolean"
          },
          "BypassBasicAuthRestriction": {
            "description": "Specifies whether this user bypasses the \"Auth.RestrictBasicAuthentication\" application setting (default: false)",
            "type": "boolean"
          },
          "MayHavePersonalWorkspace": {
            "description": "Specifies whether this user is allowed to have a Personal Workspace",
            "type": "boolean"
          },
          "UpdatePolicy": {
            "$ref": "#/definitions/UpdatePolicyDto"
          },
          "LastModificationTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastModifierUserId": {
            "format": "int64",
            "type": "integer"
          },
          "CreatorUserId": {
            "format": "int64",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "QueueItemDto": {
        "description": "Defines a piece of data that can be processed by a robot and the information associated with its processing status.\r\n<para />Queue items are grouped in queues.",
        "type": "object",
        "properties": {
          "QueueDefinitionId": {
            "format": "int64",
            "description": "The Id of the parent queue.",
            "type": "integer"
          },
          "QueueDefinition": {
            "$ref": "#/definitions/QueueDefinitionDto"
          },
          "ProcessingException": {
            "$ref": "#/definitions/ProcessingExceptionDto"
          },
          "SpecificContent": {
            "description": "A collection of key value pairs containing custom data configured in the Add Queue Item activity, in UiPath Studio.",
            "type": "object",
            "additionalProperties": {}
          },
          "Output": {
            "description": "A collection of key value pairs containing custom data resulted after successful processing.",
            "type": "object",
            "additionalProperties": {}
          },
          "OutputData": {
            "description": "A JSON representation of the output data generated by the item's processing.",
            "type": "string"
          },
          "Analytics": {
            "description": "A collection of key value pairs containing custom data for further analytics processing.",
            "type": "object",
            "additionalProperties": {}
          },
          "AnalyticsData": {
            "description": "A JSON representation of the analytics data generated by the item's processing.",
            "type": "string"
          },
          "Status": {
            "description": "The processing state of the item.",
            "enum": [
              "New",
              "InProgress",
              "Failed",
              "Successful",
              "Abandoned",
              "Retried",
              "Deleted"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "QueueItemDtoStatus",
              "modelAsString": false
            }
          },
          "ReviewStatus": {
            "description": "The review state of the item - applicable only for failed items.",
            "enum": [
              "None",
              "InReview",
              "Verified",
              "Retried"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "QueueItemDtoReviewStatus",
              "modelAsString": false
            }
          },
          "ReviewerUserId": {
            "format": "int64",
            "description": "The UserId of the Reviewer, if any.",
            "type": "integer"
          },
          "ReviewerUser": {
            "$ref": "#/definitions/SimpleUserDto"
          },
          "Key": {
            "format": "uuid",
            "description": "The unique identifier of a queue item.",
            "type": "string"
          },
          "Reference": {
            "description": "An optional, user-specified value for queue item identification.",
            "maxLength": 128,
            "minLength": 0,
            "type": "string"
          },
          "ProcessingExceptionType": {
            "description": "The processing exception. If the item has not been processed or has been processed successfully it will be null.",
            "enum": [
              "ApplicationException",
              "BusinessException"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "QueueItemDtoProcessingExceptionType",
              "modelAsString": false
            }
          },
          "DueDate": {
            "format": "date-time",
            "description": "The latest date and time at which the item should be processed. If empty the item can be processed at any given time.",
            "type": "string"
          },
          "RiskSlaDate": {
            "format": "date-time",
            "description": "The RiskSla date at time which is considered as risk zone for the item to be processed.",
            "type": "string"
          },
          "Priority": {
            "description": "Sets the processing importance for a given item.",
            "enum": [
              "High",
              "Normal",
              "Low"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "QueueItemDtoPriority",
              "modelAsString": false
            }
          },
          "Robot": {
            "$ref": "#/definitions/SimpleRobotDto"
          },
          "DeferDate": {
            "format": "date-time",
            "description": "The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.",
            "type": "string"
          },
          "StartProcessing": {
            "format": "date-time",
            "description": "The date and time at which the item processing started. This is null if the item was not processed.",
            "type": "string"
          },
          "EndProcessing": {
            "format": "date-time",
            "description": "The date and time at which the item processing ended. This is null if the item was not processed.",
            "type": "string"
          },
          "SecondsInPreviousAttempts": {
            "format": "int32",
            "description": "The number of seconds that the last failed processing lasted.",
            "type": "integer"
          },
          "AncestorId": {
            "format": "int64",
            "description": "The Id of an ancestor item connected to the current item.",
            "type": "integer"
          },
          "RetryNumber": {
            "format": "int32",
            "description": "The number of times this work item has been processed.\r\n<para />This can be higher than 0 only if MaxRetried number is set and the item processing failed at least once with ApplicationException.",
            "type": "integer"
          },
          "SpecificData": {
            "description": "A JSON representation of the specific content.",
            "type": "string"
          },
          "CreationTime": {
            "format": "date-time",
            "description": "The date and time when the item was created.",
            "type": "string"
          },
          "Progress": {
            "description": "String field which is used to keep track of the business flow progress.",
            "type": "string"
          },
          "RowVersion": {
            "format": "byte",
            "description": "Identifier used for optimistic concurrency, so Orchestrator can figure whether data is out of date or not.",
            "type": "string"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "description": "DEPRECATED. ",
            "type": "integer",
            "x-deprecated": true
          },
          "OrganizationUnitFullyQualifiedName": {
            "description": "DEPRECATED. ",
            "type": "string",
            "x-deprecated": true
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfQueueItemDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/QueueItemDto"
            }
          }
        }
      },
      "QueueItemDataDto": {
        "description": "Defines the work item content.",
        "type": "object",
        "properties": {
          "Name": {
            "description": "The name of the queue into which the item will be added.",
            "type": "string"
          },
          "Priority": {
            "description": "Sets the processing importance for a given item.",
            "enum": [
              "High",
              "Normal",
              "Low"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "QueueItemDataDtoPriority",
              "modelAsString": false
            }
          },
          "SpecificContent": {
            "description": "A collection of key value pairs containing custom data configured in the Add Queue Item activity, in UiPath Studio.",
            "type": "object",
            "additionalProperties": {}
          },
          "DeferDate": {
            "format": "date-time",
            "description": "The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.",
            "type": "string"
          },
          "DueDate": {
            "format": "date-time",
            "description": "The latest date and time at which the item should be processed. If empty the item can be processed at any given time.",
            "type": "string"
          },
          "RiskSlaDate": {
            "format": "date-time",
            "description": "The RiskSla date at time which is considered as risk zone for the item to be processed.",
            "type": "string"
          },
          "Reference": {
            "description": "An optional, user-specified value for queue item identification.",
            "maxLength": 128,
            "minLength": 0,
            "type": "string"
          },
          "Progress": {
            "description": "String field which is used to keep track of the business flow progress.",
            "type": "string"
          }
        }
      },
      "QueueItemsSetTransactionProgressParameters": {
        "type": "object",
        "properties": {
          "progress": {
            "type": "string"
          }
        }
      },
      "ODataValueOfIEnumerableOfSimpleUserDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SimpleUserDto"
            }
          }
        }
      },
      "LongVersionedEntity": {
        "type": "object",
        "properties": {
          "RowVersion": {
            "format": "byte",
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "QueueItemDeleteBulkRequest": {
        "type": "object",
        "properties": {
          "queueItems": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LongVersionedEntity"
            }
          }
        }
      },
      "BulkOperationResponseDtoOfInt64": {
        "type": "object",
        "properties": {
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string"
          },
          "FailedItems": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "QueueItemsSetItemReviewerParameters": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "format": "int64",
            "type": "integer"
          },
          "queueItems": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LongVersionedEntity"
            }
          }
        }
      },
      "QueueItemsSetItemReviewStatusParameters": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "queueItems": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LongVersionedEntity"
            }
          }
        }
      },
      "QueueItemsUnsetItemReviewerParameters": {
        "type": "object",
        "properties": {
          "queueItems": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LongVersionedEntity"
            }
          }
        }
      },
      "QueueProcessingRecordDto": {
        "description": "Stores aggregated report information about the processing status of all the items from a given queue in a specific time period.",
        "type": "object",
        "properties": {
          "QueueDefinitionId": {
            "format": "int64",
            "description": "The Id of the queue for which the report is done.",
            "type": "integer"
          },
          "UiQueueMetadata": {
            "$ref": "#/definitions/QueueDefinitionDto"
          },
          "ProcessingTime": {
            "format": "date-time",
            "description": "The date and time when the report is computed.",
            "type": "string"
          },
          "ReportType": {
            "description": "The aggregation period used in the report.",
            "enum": [
              "All",
              "Minute",
              "Hour",
              "Day"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "QueueProcessingRecordDtoReportType",
              "modelAsString": false
            }
          },
          "NumberOfRemainingTransactions": {
            "format": "int32",
            "description": "The number of unprocessed (new) items.",
            "type": "integer"
          },
          "NumberOfInProgressTransactions": {
            "format": "int32",
            "description": "The number of items in progress.",
            "type": "integer"
          },
          "NumberOfApplicationExceptions": {
            "format": "int32",
            "description": "The total number of application exceptions thrown while processing queue items in the given time period.",
            "type": "integer"
          },
          "NumberOfBusinessExceptions": {
            "format": "int32",
            "description": "The total number of business exceptions thrown while processing queue items in the given time period.",
            "type": "integer"
          },
          "NumberOfSuccessfulTransactions": {
            "format": "int32",
            "description": "The total number of successfully processed queue items in the given time period.",
            "type": "integer"
          },
          "NumberOfRetriedItems": {
            "format": "int32",
            "description": "The total number of processing retries occurred in the given time period.",
            "type": "integer"
          },
          "ApplicationExceptionsProcessingTime": {
            "format": "decimal",
            "description": "The total number of seconds spent processing queue items that failed with application exception in the given time period.",
            "type": "number"
          },
          "BusinessExceptionsProcessingTime": {
            "format": "decimal",
            "description": "The total number of seconds spent processing queue items that failed with business exception in the given time period.",
            "type": "number"
          },
          "SuccessfulTransactionsProcessingTime": {
            "format": "decimal",
            "description": "The total number of seconds spent processing successful queue items in the given time period.",
            "type": "number"
          },
          "TotalNumberOfTransactions": {
            "format": "int32",
            "description": "The total number of item processing transactions, both failed and successful.",
            "type": "integer"
          },
          "TenantId": {
            "format": "int32",
            "description": "The Id of the queue tenant.",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfQueueProcessingRecordDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/QueueProcessingRecordDto"
            }
          }
        }
      },
      "QueueProcessingStatusDto": {
        "description": "Stores aggregated report information about the processing status of all the items from a given queue.",
        "type": "object",
        "properties": {
          "ItemsToProcess": {
            "format": "int32",
            "description": "The total number of items in the queue with the status New.",
            "type": "integer"
          },
          "ItemsInProgress": {
            "format": "int32",
            "description": "The total number of items in the queue with the status InProgress.",
            "type": "integer"
          },
          "QueueDefinitionId": {
            "format": "int64",
            "description": "The Id of the queue for which the report is done.",
            "type": "integer"
          },
          "QueueDefinitionName": {
            "description": "The name of the queue for which the report is done.",
            "type": "string"
          },
          "QueueDefinitionDescription": {
            "description": "The description of the queue for which the report is done.",
            "type": "string"
          },
          "QueueDefinitionAcceptAutomaticallyRetry": {
            "description": "States whether the queue accepts automatic item retry or not.",
            "type": "boolean"
          },
          "QueueDefinitionMaxNumberOfRetries": {
            "format": "int32",
            "description": "The maximum number of retries allowed for any item of the queue.",
            "type": "integer"
          },
          "QueueDefinitionEnforceUniqueReference": {
            "description": "States whether Item Reference field should be unique per Queue. Deleted and retried items are not checked against this rule.",
            "type": "boolean"
          },
          "ProcessingMeanTime": {
            "format": "decimal",
            "description": "The average time spent processing a successful item.",
            "type": "number"
          },
          "SuccessfulTransactionsNo": {
            "format": "int32",
            "description": "The total number of successfully processed items.",
            "type": "integer"
          },
          "ApplicationExceptionsNo": {
            "format": "int32",
            "description": "The total number of application exceptions thrown while processing queue items.",
            "type": "integer"
          },
          "BusinessExceptionsNo": {
            "format": "int32",
            "description": "The total number of business exceptions thrown while processing queue items.",
            "type": "integer"
          },
          "SuccessfulTransactionsProcessingTime": {
            "format": "decimal",
            "description": "The total number of seconds spent processing successful queue items.",
            "type": "number"
          },
          "ApplicationExceptionsProcessingTime": {
            "format": "decimal",
            "description": "The total number of seconds spent processing queue items that failed with application exception.",
            "type": "number"
          },
          "BusinessExceptionsProcessingTime": {
            "format": "decimal",
            "description": "The total number of seconds spent processing queue items that failed with business exception.",
            "type": "number"
          },
          "TotalNumberOfTransactions": {
            "format": "int32",
            "description": "The total number of item processing transactions, both failed and successful.",
            "type": "integer"
          },
          "LastProcessed": {
            "format": "date-time",
            "description": "The date and time of the last item processing.",
            "type": "string"
          },
          "ReleaseName": {
            "description": "The name of the process associated with the queue.",
            "type": "string"
          },
          "ReleaseId": {
            "format": "int64",
            "description": "The ProcessId Queue is associated with.",
            "type": "integer"
          },
          "IsProcessInCurrentFolder": {
            "description": "Flag to determine if the release is in the current folder",
            "type": "boolean"
          },
          "SpecificDataJsonSchemaExists": {
            "description": "Optional JSON schema enforced onto the specific data field is set.",
            "type": "boolean"
          },
          "OutputDataJsonSchemaExists": {
            "description": "Optional JSON schema enforced onto the output data field is set.",
            "type": "boolean"
          },
          "AnalyticsDataJsonSchemaExists": {
            "description": "Optional JSON schema enforced onto the analytics data field is set.",
            "type": "boolean"
          },
          "ProcessScheduleId": {
            "format": "int64",
            "description": "The Id of the process schedule associated with the queue.",
            "type": "integer"
          },
          "QueueFoldersCount": {
            "format": "int32",
            "description": "The number of folders where the queue definition is shared.",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfQueueProcessingStatusDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/QueueProcessingStatusDto"
            }
          }
        }
      },
      "TransactionResultDto": {
        "description": "Stores data sent when processing an item ended.",
        "type": "object",
        "properties": {
          "IsSuccessful": {
            "description": "States if the processing was successful or not.",
            "type": "boolean"
          },
          "ProcessingException": {
            "$ref": "#/definitions/ProcessingExceptionDto"
          },
          "DeferDate": {
            "format": "date-time",
            "description": "The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.",
            "type": "string"
          },
          "DueDate": {
            "format": "date-time",
            "description": "The latest date and time at which the item should be processed. If empty the item can be processed at any given time.",
            "type": "string"
          },
          "Output": {
            "description": "A collection of key value pairs containing custom data resulted after successful processing.",
            "type": "object",
            "additionalProperties": {}
          },
          "Analytics": {
            "description": "A collection of key value pairs containing custom data for further analytics processing.",
            "type": "object",
            "additionalProperties": {}
          },
          "Progress": {
            "description": "String field which is used to keep track of the business flow progress.",
            "type": "string"
          }
        }
      },
      "QueuesSetTransactionResultParameters": {
        "type": "object",
        "properties": {
          "transactionResult": {
            "$ref": "#/definitions/TransactionResultDto"
          }
        }
      },
      "QueuesAddQueueItemParameters": {
        "type": "object",
        "properties": {
          "itemData": {
            "$ref": "#/definitions/QueueItemDataDto"
          }
        }
      },
      "QueuesBulkAddQueueItemsParameters": {
        "required": [
          "commitType"
        ],
        "type": "object",
        "properties": {
          "queueName": {
            "type": "string"
          },
          "commitType": {
            "enum": [
              "AllOrNothing",
              "StopOnFirstFailure",
              "ProcessAllIndependently"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "BulkAddQueueItemsParametersCommitType",
              "modelAsString": false
            }
          },
          "queueItems": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/QueueItemDataDto"
            }
          }
        }
      },
      "FailedQueueItemDto": {
        "description": "Stores the result of the BulkAddQueueItems operation.",
        "type": "object",
        "properties": {
          "Ordinal": {
            "format": "int32",
            "description": "Ordinal of the item that failed.\r\nA value of null means that offending item is unknown.",
            "type": "integer"
          },
          "ErrorCode": {
            "description": "Error code.",
            "enum": [
              "Unknown",
              "MultipleErrors",
              "InvalidRequest",
              "NameAlreadyUsed",
              "ItemNotFound",
              "StringProtectFailed",
              "ItemAlreadyExists",
              "ErrorDeleting",
              "ErrorInserting",
              "ErrorUpdating",
              "ErrorSendingEmail",
              "InvalidArgument",
              "SqlAcquireLockFailure",
              "LibrariesFeedInUse",
              "HasDependentItems",
              "ItemIsInUse",
              "ParameterMissing",
              "ParameterInvalid",
              "DuplicateReference",
              "ForbiddenOperation",
              "InvalidUser",
              "FeatureDisabled",
              "OptimisticConcurrency",
              "EncryptionException",
              "CannotCreateOrMigrateTenantDb",
              "TenantIsRequired",
              "FieldNotEditable",
              "ServiceUnavailable",
              "SharedAccessSignatureFailure",
              "ProviderNotSupported",
              "EmailAlreadyUsed",
              "MaxSiblingsLimitReached",
              "InvalidAuditRelationship",
              "InvalidOrganizationUnit",
              "RequiredOrganizationUnit",
              "OrganizationUnitNotEditable",
              "NoOrganizationUnitWithPermissions",
              "MultipleOrganizationUnitsOnSession",
              "InvalidPermissionInCrossFolderRequest",
              "MachineAlreadyPairedWithDifferentLicenseKey",
              "NoAvailableLicenses",
              "HasAttachedRobots",
              "InvalidMachineKey",
              "MachineNameRequired",
              "UserNameRequired",
              "CannotDeleteBusyRobot",
              "MachineNameCannotChange",
              "MachineLicenseCannotChange",
              "CannotUpdateBusyRobot",
              "MachineTypeCannotChange",
              "UserNameInvalid",
              "SessionAlreadyActive",
              "CannotAssignMachineToFloatingRobot",
              "CannotUpdateRobotHostingType",
              "CannotAssignMachineTemplateToStandardRobot",
              "CannotUpdateActiveSession",
              "MachineTemplateUniqueLicenseKey",
              "InvalidMachineId",
              "InvalidNonProductionMachineSlots",
              "InvalidUnattendedMachineSlots",
              "DisconnectedRobot",
              "UnresponsiveRobot",
              "UnsupportedFloatingSessionRobotType",
              "UnsupportedStandardSessionRobotType",
              "RobotNotFoundUseInteractive",
              "MachineScopeProtected",
              "MachineKeyCannotChange",
              "TenantIdMismatch",
              "UserDoesNotHaveRobot",
              "NoDefaultAutoScalingProfile",
              "InvalidAutoScalingProfileSchedule",
              "CannotPropagateMachineToSubfolders",
              "MachineRuntimeProtected",
              "IncompatibleOS",
              "IncompatibleRobotVersion",
              "EnvironmentDeploymentConflict",
              "ServerConflict",
              "ActionAlreadyPerformed",
              "UnavailableResources",
              "UserIsDeleted",
              "UserIsLockedOut",
              "ChangePassword",
              "PasswordExpired",
              "InvalidPassword",
              "CannotDeleteStaticRole",
              "UserNotEditable",
              "DomainUnreachable",
              "PasswordResetFailed",
              "ConfirmEmailFailed",
              "CannotUsePreviousPassword",
              "RoleIsNotEditable",
              "UserNotFoundInDomain",
              "CannotUpdateUsername",
              "InvalidLoginMethod",
              "InvalidUsernameOrPassword",
              "MultipleMatchingUsers",
              "CannotCallFromHost",
              "CreateNotAllowed",
              "ProvisionError",
              "EmptyDirectoryParam",
              "NotDirectoryUserOrGroup",
              "NoUsersFound",
              "CannotChangeRoleType",
              "InvalidTenantRole",
              "InvalidFolderRole",
              "HostTenantKeyNotFound",
              "CannotAssignFolderRolesToUser",
              "CannotAssignTenantRolesToFolder",
              "InvalidAuthenticationToken",
              "CannotDeleteLastAdmin",
              "CannotUnassignLastAdmin",
              "CannotInactivateLastAdmin",
              "CredentialAssetEmptyPasswordForNewUser",
              "CredentialAssetEmptyForNewRobot",
              "AssetTypeNonUpdatable",
              "AssetNotAvailableForRobot",
              "AssetNotFound",
              "InvalidCron",
              "ScheduleWillNeverRun",
              "ScheduleMisfired",
              "ScheduleInvalidTimeZone",
              "InvalidScheduleKey",
              "ScheduleIsNotEnabled",
              "ScheduleNotAssociatedWithAQueue",
              "ScheduleCannotBeAssociatedWithAQueue",
              "UserIsAssignedToTriggers",
              "InvalidCronRecurrence",
              "DisabledDueToConsecutiveFailures",
              "MachineRobotHasAttachedTriggers",
              "UserHasAttachedTriggers",
              "DownloadUnavailable",
              "CannotConnectToPackagesRepository",
              "NotSupportedByExternalFeeds",
              "ErrorDownloading",
              "InvalidPackageDetails",
              "TenantFeedInUse",
              "InvalidProcessKey",
              "JobTypeCannotBeStopped",
              "JobCannotBeCancelled",
              "JobCannotBeTerminated",
              "VersionNotFound",
              "ProcessNotFound",
              "HasAttachedProcesses",
              "InvalidExtension",
              "InvalidPackageCount",
              "PreviousVersionNotFound",
              "HasRunningJobs",
              "TenantNotFound",
              "PendingJobsAlreadyExist",
              "InvalidStartJobRobotIds",
              "UnregisteredCannotStartJobs",
              "LicenseExpiredCannotStartJobs",
              "InvalidReleaseKey",
              "InvalidPackageVersion",
              "TenantIsDisabled",
              "PackageNotFound",
              "NoRobotsAvailable",
              "PathTooLong",
              "JobExecutionFaulted",
              "InvalidJobIdOrRobotKey",
              "InvalidJobStateForSuspend",
              "JobNotFoundByPersistenceId",
              "SuspendJobStateNotFound",
              "ErrorPackagePublish",
              "ErrorSavingPackageDefinition",
              "MaxNumberJobsAlreadyExist",
              "HasSlaEnabedQueuesAssociated",
              "VersionsManagedAutomatically",
              "InaccessibleFeed",
              "TestAutomationJobExecutionNotSupported",
              "TestAutomationProcessAlreadyExists",
              "CannotRestartUnfinishedJob",
              "CyberArkEditPasswordNotAllowed",
              "LogMessageNotFound",
              "LogRobotNameNotFound",
              "EncryptionKeyNotFound",
              "EncryptionKeyIncorrectFormat",
              "AzureKeyVaultRetrieveIssue",
              "AzureKeyVaultStoreIssue",
              "TransactionReferenceRequired",
              "InvalidTransactionProgressStatus",
              "TransactionNotStarted",
              "ReviewerNotAvailable",
              "QueueDefinitionParametersCannotChange",
              "QueueProcessingApplicationException",
              "QueueItemSchemaViolationException",
              "InvalidQueueSchemaDefinition",
              "InvalidQueueSchemaDefinitionChange",
              "InvalidQueueSchemaType",
              "QueueSchemaDefinitionNotFound",
              "SlaEnableQueueDefinitionFailure",
              "QueueSlaAtPredictedRisk",
              "QueueSlaPredictedBreach",
              "QueueItemContentSizeExceeded",
              "LicenseNotFound",
              "LicenseExpired",
              "LicenseAlreadyInUse",
              "InvalidLicenseFormat",
              "LicenseLimitExceeded",
              "UnattendedLicenseLimitExceeded",
              "NonProductionLicenseLimitExceeded",
              "AttendedLicenseLimitExceeded",
              "DevelopmentLicenseLimitExceeded",
              "RobotFailedToAcquireLicense",
              "NonProductionSlotsLimitExceeded",
              "UnattendedSlotsLimitExceeded",
              "LicenseUnregistered",
              "LicenseNotAvailable",
              "NotEnoughAvailableSlots",
              "NotEnoughRuntimeLicenses",
              "SlotsExceedLicenseLimit",
              "NotEnoughAvailableLicenses",
              "HostLicenseLimitExceeded",
              "NoHostLicense",
              "LicenseNewInvalidArguments",
              "LicenseMachineDisabled",
              "CannotDisableBusyMachine",
              "HeadlessSlotsLimitExceeded",
              "HeadlessLicenseLimitExceeded",
              "TestAutomationSlotsLimitExceeded",
              "TestAutomationLicenseLimitExceeded",
              "LicenseNotCompatible",
              "AutomationCloudLicenseLimitExceeded",
              "ArgumentMetadataExtract",
              "ArgumentMetadataValidation",
              "ArgumentDefinitionExtract",
              "ArgumentValueExtract",
              "ArgumentValidation",
              "PackageMetadataExtract",
              "PackageMetadataValidation",
              "ProjectTypeChangedOnUpload",
              "EntryPointUniqueIdsAlreadyUsed",
              "EntryPointNotValidForRelease",
              "EntryPointNotAllowedForTestAutomationRelease",
              "UnknownWebhookEventType",
              "WebhookQuotaReached",
              "ExecutionMediaStorageUnavailable",
              "ExecutionMediaNotAvailableForJob",
              "ExecutionMediaContentNotAvailable",
              "CannotDeleteDefaultCredentialStore",
              "CredentialStoreNotFound",
              "UnknownCredentialStoreType",
              "InvalidCredentialStoreConfiguration",
              "FailedToReadFromCredentialStore",
              "FailedToWriteToCredentialStore",
              "CannotDeleteNonEmptyCredentialStore",
              "FailedToDeleteFromCredentialStore",
              "TaskAssignmentError",
              "TaskCompletionError",
              "TaskAssigneeMismatchError",
              "TaskFormInvalidFormLayout",
              "TaskFormInvalidFormPayload",
              "TaskFormMultipleActions",
              "TaskFormNoAction",
              "TaskFormInvalidAction",
              "TasksNotAllowedInModernFolder",
              "NoFolderExistAsTaskAdmin",
              "NoFolderExistAsTaskUser",
              "TaskAlreadyCompletedBySameUser",
              "TaskTypeMistmatch",
              "TaskNotAlreadyAssigned",
              "TaskAssigneeNotPermitted",
              "TaskAssignerNotPermitted",
              "DuplicateTaskAssignment",
              "TaskAlreadyAssignedToSameUser",
              "TaskAlreadyAssignedToAnotherUser",
              "TaskAlreadyCompletedByAnotherUser",
              "TaskSaveError",
              "TaskFormNoData",
              "TaskForwardError",
              "TaskFormSubmitButtonMissing",
              "TaskDeletionGenericError",
              "TaskAlreadyDeletedBySameUser",
              "TaskAlreadyDeletedByAnotherUser",
              "TaskDeleterNotPermitted",
              "DuplicateTaskDelete",
              "NoFolderExistsWithTaskCatalogView",
              "TaskCatalogMultipleDistinctColumn",
              "TaskCatalogDistinctColumnInvalid",
              "TaskFormLayoutAndIdMissing",
              "TaskFormDuplicateFormLayoutGuid",
              "TaskFormFormLayoutGuidNotFound",
              "TaskFormLayoutOrGuidMissing",
              "TaskFormLayoutAndIdBothNotSupported",
              "TaskFormLayoutIdNotFound",
              "TasksBulkFormLayoutIdsNotSameOrNull",
              "EmptyTasksBulkOperationRequest",
              "TaskMaximumBulkOperationLimitExceeded",
              "TasksBulkOperationError",
              "TasksBulkOperationInvalidCatalog",
              "TasksBulkUpdateWithTaskCatalogAndUnsetIsInvalid",
              "InvalidSecureStoreContext",
              "MailSmtpSettingsError",
              "CannotDeleteCalendarWhenUsedBySchedule",
              "MandatoryPropertiesForRootFolderNotSpecified",
              "IncompatibleFolderProperties",
              "NoHierarchyAllowedForClassicFolders",
              "MaximumFolderHierarchyDepthReached",
              "CannotChangeRobotProvisionType",
              "CannotChangeFolderPermissionModel",
              "CannotEditFolderParent",
              "EntitiesRequiredForAssignmentNotFound",
              "CannotAssignRolesToNonFineGrainedFolders",
              "InvalidFolderDisplayName",
              "AssociationAlreadyExists",
              "UserDoesNotHaveAccessToFolder",
              "CannotChangeRobotUserFolderAssignments",
              "CannotAssignMachineToClassicFolder",
              "StrategyNotAvailableInModernFolder",
              "StrategyNotAvailableInClassicFolder",
              "ValidModernFolderIdRequired",
              "NoMachineAssociatedWithFolder",
              "ClassicFoldersCannotBeInvolvedInMoveOperation",
              "CannotMoveToDescendantFolder",
              "CannotDisableTriggersInHierarchy",
              "CannotKillJobsInHierarchy",
              "CannotDeleteEntitiesInHierarchy",
              "NotInFinalStateJobsExist",
              "ModernFoldersCannotInheritRolesFromTenant",
              "CannotChangeFolderFeedType",
              "CannotCreatePersonalWorkspace",
              "CannotSetMachineRobots",
              "FolderNotFound",
              "CannotUnassignFromFolder",
              "MachineAssociatedWithFolderConflict",
              "CannotAssignMachineToFolder",
              "CannotAssignPersonalWorkspaceMachines",
              "CannotMoveFolder",
              "MaintenanceActive",
              "TenantMaintenanceActive",
              "TenantMaintenanceNotActive",
              "AnalyticsNotAuthorized",
              "AnalyticsTenantNotProvisioned",
              "AnalyticsUserIsHostUser",
              "AnalyticsUserHasNoEmail",
              "AnalyticsUserNotFound",
              "AnalyticsAdminEmailProhibited",
              "AnalyticsDbQueryFailure",
              "InvalidStorageProvider",
              "BucketIsReadOnly",
              "InvalidBlobFilePath",
              "UnavailableStorageProvider",
              "BucketDoesNotExists",
              "BucketSecretNotFoundInCredentialStore",
              "TestSetNotNewOnCreate",
              "TestAutomationKeyMismatch",
              "TestSetNewOnUpdate",
              "TestSetEmpty",
              "TestSetDuplicatePackages",
              "TestSetVersionMaskInvalid",
              "TestSetDefinitionNotFound",
              "TestSetTestCaseInvalid",
              "TestSetTestCaseVersionInvalid",
              "TestAutomationVersionInvalid",
              "TestSetExecutionEmptyTestSet",
              "TestSetExecutionCreateFailed",
              "TestSetExecutionDuplicateUniqueIds",
              "TestCaseAssertionScreenshotMimeTypeMissing",
              "TestCaseAssertionScreenshotMissing",
              "TestSetExecutionBatchExecutionKeyAlreadyExists",
              "TestDataQueueContentJsonSchemaInvalid",
              "TestDataQueueNameChangeNotAllowed",
              "TestDataQueueItemViolatesContentJsonSchema",
              "TestDataQueueItemsFromMultipleQueues",
              "TestDataQueueItemsBulkAddMixed",
              "TestDataQueueBulkOperationInProgress",
              "TestSetDuplicateInputArgument",
              "TestSetExecutionInvalidExecutionTarget",
              "AttachmentInvalid",
              "TestCasesReexecuteFailed",
              "TestSetTestCaseMissingReleaseVersion",
              "TestCaseDefinitionDuplicateIds",
              "TestCaseDefinitionInUse",
              "InvalidTenantMoveStatus",
              "TenantMoveIdConflict",
              "TenantMoveMigrationConflict",
              "MediaFileNotFound",
              "MediaFileNotFoundForKey",
              "InvalidMediaFilesUpload",
              "MediaFileTypeNotSupported",
              "CannotBeExploredByOwner",
              "AlreadyExploredByCurrentUser",
              "NotExploredCurrentUser",
              "CannotRemoveMachineFromPersonalWorkspace",
              "CannotToggleDebugMode",
              "CheckForUpdatesWithProductDuplicates",
              "AccountIdMissing",
              "AccountIdPartitionKeyMismatch",
              "IdentityKeyMissing",
              "InvalidDownloadUri",
              "InstallationIdMissing",
              "UpdateRequestRetryFailed",
              "InvalidProductVersion",
              "ProductVersionUpdateNotAllowed",
              "ContentLengthTooLarge"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "FailedQueueItemDtoErrorCode",
              "modelAsString": false
            }
          },
          "ErrorMessage": {
            "description": "Error message.",
            "type": "string"
          }
        }
      },
      "BulkOperationResponseDtoOfFailedQueueItemDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "failedItems": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FailedQueueItemDto"
            }
          }
        }
      },
      "TransactionDataDto": {
        "description": "Stores data sent when processing of an existing or a new item starts.",
        "type": "object",
        "properties": {
          "Name": {
            "description": "The name of the queue in which to search for the next item or in which to insert the item before marking it as InProgress and sending it to the robot.",
            "type": "string"
          },
          "RobotIdentifier": {
            "format": "uuid",
            "description": "The unique key identifying the robot that sent the request.",
            "type": "string"
          },
          "SpecificContent": {
            "description": "If not null a new item will be added to the queue with this content before being moved to InProgress state and returned to the robot for processing.\r\n<para />If null the next available item in the list will be moved to InProgress state and returned to the robot for processing.",
            "type": "object",
            "additionalProperties": {}
          },
          "DeferDate": {
            "format": "date-time",
            "description": "The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.",
            "type": "string"
          },
          "DueDate": {
            "format": "date-time",
            "description": "The latest date and time at which the item should be processed. If empty the item can be processed at any given time.",
            "type": "string"
          },
          "Reference": {
            "description": "An optional, user-specified value for queue item identification.",
            "maxLength": 128,
            "minLength": 0,
            "type": "string"
          },
          "ReferenceFilterOption": {
            "description": "Declares the strategy used to filter the Reference value.",
            "enum": [
              "Equals",
              "StartsWith"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TransactionDataDtoReferenceFilterOption",
              "modelAsString": false
            }
          }
        }
      },
      "QueuesStartTransactionParameters": {
        "type": "object",
        "properties": {
          "transactionData": {
            "$ref": "#/definitions/TransactionDataDto"
          }
        }
      },
      "ReleaseDto": {
        "required": [
          "Name",
          "ProcessKey",
          "ProcessVersion"
        ],
        "type": "object",
        "properties": {
          "Key": {
            "description": "A unique identifier associated to each release.",
            "type": "string"
          },
          "ProcessKey": {
            "description": "The unique identifier of the process associated with the release.",
            "type": "string"
          },
          "ProcessVersion": {
            "description": "The version of the process associated with the release.",
            "type": "string"
          },
          "IsLatestVersion": {
            "description": "States whether the version of process associated with the release is latest or not.",
            "type": "boolean"
          },
          "IsProcessDeleted": {
            "description": "States whether the process associated with the release is deleted or not.",
            "type": "boolean"
          },
          "Description": {
            "description": "Used to add additional information about a release in order to better identify it.",
            "type": "string"
          },
          "Name": {
            "description": "A custom name of the release. The default name format is ProcessName_EnvironmentName.",
            "type": "string"
          },
          "EnvironmentId": {
            "format": "int64",
            "description": "The Id of the environment associated with the release.",
            "type": "integer"
          },
          "EnvironmentName": {
            "description": "The name of the environment associated with the release.",
            "type": "string"
          },
          "Environment": {
            "$ref": "#/definitions/EnvironmentDto"
          },
          "EntryPointId": {
            "format": "int64",
            "type": "integer"
          },
          "EntryPoint": {
            "$ref": "#/definitions/EntryPointDto"
          },
          "InputArguments": {
            "description": "Input parameters in JSON format to be passed as default values to job execution.",
            "maxLength": 10000,
            "type": "string"
          },
          "ProcessType": {
            "enum": [
              "Undefined",
              "Process",
              "TestAutomationProcess"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ReleaseDtoProcessType",
              "modelAsString": false
            }
          },
          "SupportsMultipleEntryPoints": {
            "type": "boolean"
          },
          "RequiresUserInteraction": {
            "type": "boolean"
          },
          "IsAttended": {
            "type": "boolean"
          },
          "IsCompiled": {
            "type": "boolean"
          },
          "CurrentVersion": {
            "$ref": "#/definitions/ReleaseVersionDto"
          },
          "ReleaseVersions": {
            "description": "The collection of release versions that current release had over time.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/ReleaseVersionDto"
            }
          },
          "Arguments": {
            "$ref": "#/definitions/ArgumentMetadata"
          },
          "ProcessSettings": {
            "$ref": "#/definitions/ProcessSettingsDto"
          },
          "AutoUpdate": {
            "type": "boolean"
          },
          "FeedId": {
            "format": "uuid",
            "type": "string"
          },
          "JobPriority": {
            "description": "The execution priority. If null, it defaults to Normal.",
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ReleaseDtoJobPriority",
              "modelAsString": false
            }
          },
          "OrganizationUnitId": {
            "format": "int64",
            "description": "Id of the folder this release is part of.",
            "type": "integer"
          },
          "OrganizationUnitFullyQualifiedName": {
            "description": "Fully qualified name of the folder this release is part of.",
            "type": "string"
          },
          "TargetFramework": {
            "enum": [
              "Legacy",
              "Windows",
              "Portable"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ReleaseDtoTargetFramework",
              "modelAsString": false
            }
          },
          "LastModificationTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastModifierUserId": {
            "format": "int64",
            "type": "integer"
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string"
          },
          "CreatorUserId": {
            "format": "int64",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfReleaseDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ReleaseDto"
            }
          }
        }
      },
      "ReleasesUpdateToSpecificPackageVersionParameters": {
        "type": "object",
        "properties": {
          "packageVersion": {
            "type": "string"
          }
        }
      },
      "ReleasesUpdateToLatestPackageVersionBulkParameters": {
        "required": [
          "releaseIds"
        ],
        "type": "object",
        "properties": {
          "releaseIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "LogDto": {
        "description": "Logs generated by Robots and execution reports. Can be stored in ElasticSearch and/or to a local SQL database.\r\n<para />Note: The endpoint for this type is /odata/RobotLogs URL.",
        "type": "object",
        "properties": {
          "Level": {
            "description": "Defines the log severity.",
            "enum": [
              "Trace",
              "Debug",
              "Info",
              "Warn",
              "Error",
              "Fatal"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "LogDtoLevel",
              "modelAsString": false
            }
          },
          "WindowsIdentity": {
            "description": "The name of the user that performed the action that was logged.",
            "type": "string"
          },
          "ProcessName": {
            "description": "The name of the process.",
            "type": "string"
          },
          "TimeStamp": {
            "format": "date-time",
            "description": "The exact date and time the action was performed.",
            "type": "string"
          },
          "Message": {
            "description": "The log message. This can also be a message logged through the Log Message activity in UiPath Studio.",
            "type": "string"
          },
          "JobKey": {
            "format": "uuid",
            "description": "The key of the job running the process that generated the log, if any.",
            "type": "string"
          },
          "RawMessage": {
            "description": "A JSON format message containing all the above fields.",
            "type": "string"
          },
          "RobotName": {
            "description": "The name of the Robot that generated the log.",
            "type": "string"
          },
          "HostMachineName": {
            "description": "The name of the machine that generated the log",
            "type": "string"
          },
          "MachineId": {
            "format": "int64",
            "description": "The Id of the Machine on which the Robot that generated the log is running.",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfLogDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LogDto"
            }
          }
        }
      },
      "RobotsConvertToFloatingParameters": {
        "required": [
          "robotId"
        ],
        "type": "object",
        "properties": {
          "robotId": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "RobotsDeleteBulkParameters": {
        "required": [
          "robotIds"
        ],
        "type": "object",
        "properties": {
          "robotIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "ExtendedRobotDto": {
        "required": [
          "HostingType",
          "Name",
          "Type"
        ],
        "type": "object",
        "properties": {
          "User": {
            "$ref": "#/definitions/UserDto"
          },
          "LicenseKey": {
            "description": "The key is automatically generated from the server for the Robot machine.\r\n<para />For the robot to work, the same key must exist on both the robot and Orchestrator.\r\n<para />All robots on a machine must have the same license key in order to register correctly.",
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "MachineName": {
            "description": "The name of the machine a Robot is hosted on.",
            "maxLength": 450,
            "minLength": 0,
            "type": "string"
          },
          "MachineId": {
            "format": "int64",
            "description": "The Id of the machine a Robot is hosted on",
            "type": "integer"
          },
          "Name": {
            "description": "A custom name for the robot.",
            "maxLength": 19,
            "minLength": 0,
            "type": "string"
          },
          "Username": {
            "description": "The machine username. If the user is under a domain, you are required to also specify it in a DOMAIN\\username format.\r\n<para />Note: You must use short domain names, such as desktop\\administrator and NOT desktop.local/administrator.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "ExternalName": {
            "description": "Contains the value of the key in the external store used to store the password.",
            "maxLength": 450,
            "minLength": 0,
            "type": "string"
          },
          "Description": {
            "description": "Used to add additional information about a robot in order to better identify it.",
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          },
          "Type": {
            "description": "The Robot type.",
            "enum": [
              "NonProduction",
              "Attended",
              "Unattended",
              "Studio",
              "Development",
              "RpaDeveloper",
              "StudioX",
              "CitizenDeveloper",
              "Headless",
              "StudioPro",
              "RpaDeveloperPro",
              "TestAutomation",
              "AutomationCloud"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotDtoType",
              "modelAsString": false
            }
          },
          "HostingType": {
            "description": "The Robot hosting type (Standard / Floating).",
            "enum": [
              "Standard",
              "Floating"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotDtoHostingType",
              "modelAsString": false
            }
          },
          "ProvisionType": {
            "description": "The Robot provision type.",
            "enum": [
              "Manual",
              "Automatic"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotDtoProvisionType",
              "modelAsString": false
            }
          },
          "Password": {
            "description": "The Windows password associated with the machine username.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "CredentialStoreId": {
            "format": "int64",
            "description": "The Credential Store used to store the password.",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "description": "The associated user's Id.",
            "type": "integer"
          },
          "Enabled": {
            "description": "Specificies the state of the Robot (enabled/disabled) - a disabled robot cannot connect to Orchestrator",
            "type": "boolean"
          },
          "CredentialType": {
            "description": "The robot credentials type (Default/ SmartCard)",
            "enum": [
              "Default",
              "SmartCard",
              "NCipher",
              "SafeNet",
              "NoCredential"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotDtoCredentialType",
              "modelAsString": false
            }
          },
          "Environments": {
            "description": "The collection of environments the robot is part of.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/EnvironmentDto"
            }
          },
          "RobotEnvironments": {
            "description": "The comma separated textual representation of environment names the robot is part of.",
            "type": "string"
          },
          "ExecutionSettings": {
            "description": "A collection of key value pairs containing execution settings for this robot.",
            "type": "object",
            "additionalProperties": {}
          },
          "IsExternalLicensed": {
            "description": "Flag to indicate if the robot uses an external license",
            "type": "boolean"
          },
          "LimitConcurrentExecution": {
            "description": "Specifies if the robot can be used concurrently on multiple machines",
            "type": "boolean"
          },
          "LastModificationTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastModifierUserId": {
            "format": "int64",
            "type": "integer"
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string"
          },
          "CreatorUserId": {
            "format": "int64",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfExtendedRobotDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExtendedRobotDto"
            }
          }
        }
      },
      "KeyValuePairOfStringString": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "readOnly": true
          },
          "Value": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "ODataValueOfIEnumerableOfKeyValuePairOfStringString": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/KeyValuePairOfStringString"
            }
          }
        }
      },
      "RobotsFromFolderModel": {
        "required": [
          "HostingType",
          "Name",
          "Type"
        ],
        "type": "object",
        "properties": {
          "UserType": {
            "enum": [
              "User",
              "Robot",
              "DirectoryUser",
              "DirectoryGroup",
              "DirectoryRobot"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotsFromFolderModelUserType",
              "modelAsString": false
            }
          },
          "UserEmail": {
            "type": "string"
          },
          "UserFullName": {
            "type": "string"
          },
          "LicenseKey": {
            "description": "The key is automatically generated from the server for the Robot machine.\r\n<para />For the robot to work, the same key must exist on both the robot and Orchestrator.\r\n<para />All robots on a machine must have the same license key in order to register correctly.",
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "MachineName": {
            "description": "The name of the machine a Robot is hosted on.",
            "maxLength": 450,
            "minLength": 0,
            "type": "string"
          },
          "MachineId": {
            "format": "int64",
            "description": "The Id of the machine a Robot is hosted on",
            "type": "integer"
          },
          "Name": {
            "description": "A custom name for the robot.",
            "maxLength": 19,
            "minLength": 0,
            "type": "string"
          },
          "Username": {
            "description": "The machine username. If the user is under a domain, you are required to also specify it in a DOMAIN\\username format.\r\n<para />Note: You must use short domain names, such as desktop\\administrator and NOT desktop.local/administrator.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "ExternalName": {
            "description": "Contains the value of the key in the external store used to store the password.",
            "maxLength": 450,
            "minLength": 0,
            "type": "string"
          },
          "Description": {
            "description": "Used to add additional information about a robot in order to better identify it.",
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          },
          "Type": {
            "description": "The Robot type.",
            "enum": [
              "NonProduction",
              "Attended",
              "Unattended",
              "Studio",
              "Development",
              "RpaDeveloper",
              "StudioX",
              "CitizenDeveloper",
              "Headless",
              "StudioPro",
              "RpaDeveloperPro",
              "TestAutomation",
              "AutomationCloud"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotDtoType",
              "modelAsString": false
            }
          },
          "HostingType": {
            "description": "The Robot hosting type (Standard / Floating).",
            "enum": [
              "Standard",
              "Floating"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotDtoHostingType",
              "modelAsString": false
            }
          },
          "ProvisionType": {
            "description": "The Robot provision type.",
            "enum": [
              "Manual",
              "Automatic"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotDtoProvisionType",
              "modelAsString": false
            }
          },
          "Password": {
            "description": "The Windows password associated with the machine username.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "CredentialStoreId": {
            "format": "int64",
            "description": "The Credential Store used to store the password.",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "description": "The associated user's Id.",
            "type": "integer"
          },
          "Enabled": {
            "description": "Specificies the state of the Robot (enabled/disabled) - a disabled robot cannot connect to Orchestrator",
            "type": "boolean"
          },
          "CredentialType": {
            "description": "The robot credentials type (Default/ SmartCard)",
            "enum": [
              "Default",
              "SmartCard",
              "NCipher",
              "SafeNet",
              "NoCredential"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotDtoCredentialType",
              "modelAsString": false
            }
          },
          "Environments": {
            "description": "The collection of environments the robot is part of.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/EnvironmentDto"
            }
          },
          "RobotEnvironments": {
            "description": "The comma separated textual representation of environment names the robot is part of.",
            "type": "string"
          },
          "ExecutionSettings": {
            "description": "A collection of key value pairs containing execution settings for this robot.",
            "type": "object",
            "additionalProperties": {}
          },
          "IsExternalLicensed": {
            "description": "Flag to indicate if the robot uses an external license",
            "type": "boolean"
          },
          "LimitConcurrentExecution": {
            "description": "Specifies if the robot can be used concurrently on multiple machines",
            "type": "boolean"
          },
          "LastModificationTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastModifierUserId": {
            "format": "int64",
            "type": "integer"
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string"
          },
          "CreatorUserId": {
            "format": "int64",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfRobotsFromFolderModel": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RobotsFromFolderModel"
            }
          }
        }
      },
      "RobotsToggleEnabledStatusParameters": {
        "required": [
          "enabled",
          "robotIds"
        ],
        "type": "object",
        "properties": {
          "robotIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "RoleDto": {
        "description": "A role acts as a grouping of permissions. Roles are associated with users to provide application authorization.",
        "type": "object",
        "properties": {
          "Name": {
            "description": "A custom name for the role.",
            "maxLength": 32,
            "type": "string"
          },
          "DisplayName": {
            "description": "An alternative name used for UI display.",
            "maxLength": 64,
            "type": "string"
          },
          "Type": {
            "description": "Can be: Mixed, Tenant or Folder based on the permissions it includes",
            "enum": [
              "Mixed",
              "Tenant",
              "Folder"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RoleDtoType",
              "modelAsString": false
            }
          },
          "Groups": {
            "description": "Allows grouping multiple roles together.",
            "type": "string"
          },
          "IsStatic": {
            "description": "States whether this role is defined by the application and cannot be deleted or it is user defined and can be deleted.",
            "type": "boolean"
          },
          "IsEditable": {
            "description": "States whether the permissions for this role can be modified or not.",
            "type": "boolean"
          },
          "Permissions": {
            "description": "The collection of application permissions associated with the role.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/PermissionDto"
            }
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfRoleDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/RoleDto"
            }
          }
        }
      },
      "RolesSetUsersParameters": {
        "required": [
          "addedUserIds",
          "removedUserIds"
        ],
        "type": "object",
        "properties": {
          "addedUserIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "removedUserIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "RobotLicenseDto": {
        "description": "Entity that represents an acquired Robot license",
        "type": "object",
        "properties": {
          "RobotId": {
            "format": "int64",
            "description": "The associated Robot's Id",
            "type": "integer"
          },
          "Timestamp": {
            "format": "date-time",
            "description": "The date when the license was acquired",
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "RobotWithLicenseDto": {
        "description": "Entity derived from RobotDto. Is shares all the properties of the base entity and includes the license field.",
        "required": [
          "HostingType",
          "Name",
          "Type"
        ],
        "type": "object",
        "properties": {
          "License": {
            "$ref": "#/definitions/RobotLicenseDto"
          },
          "User": {
            "$ref": "#/definitions/UserDto"
          },
          "LicenseKey": {
            "description": "The key is automatically generated from the server for the Robot machine.\r\n<para />For the robot to work, the same key must exist on both the robot and Orchestrator.\r\n<para />All robots on a machine must have the same license key in order to register correctly.",
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "MachineName": {
            "description": "The name of the machine a Robot is hosted on.",
            "maxLength": 450,
            "minLength": 0,
            "type": "string"
          },
          "MachineId": {
            "format": "int64",
            "description": "The Id of the machine a Robot is hosted on",
            "type": "integer"
          },
          "Name": {
            "description": "A custom name for the robot.",
            "maxLength": 19,
            "minLength": 0,
            "type": "string"
          },
          "Username": {
            "description": "The machine username. If the user is under a domain, you are required to also specify it in a DOMAIN\\username format.\r\n<para />Note: You must use short domain names, such as desktop\\administrator and NOT desktop.local/administrator.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "ExternalName": {
            "description": "Contains the value of the key in the external store used to store the password.",
            "maxLength": 450,
            "minLength": 0,
            "type": "string"
          },
          "Description": {
            "description": "Used to add additional information about a robot in order to better identify it.",
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          },
          "Type": {
            "description": "The Robot type.",
            "enum": [
              "NonProduction",
              "Attended",
              "Unattended",
              "Studio",
              "Development",
              "RpaDeveloper",
              "StudioX",
              "CitizenDeveloper",
              "Headless",
              "StudioPro",
              "RpaDeveloperPro",
              "TestAutomation",
              "AutomationCloud"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotDtoType",
              "modelAsString": false
            }
          },
          "HostingType": {
            "description": "The Robot hosting type (Standard / Floating).",
            "enum": [
              "Standard",
              "Floating"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotDtoHostingType",
              "modelAsString": false
            }
          },
          "ProvisionType": {
            "description": "The Robot provision type.",
            "enum": [
              "Manual",
              "Automatic"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotDtoProvisionType",
              "modelAsString": false
            }
          },
          "Password": {
            "description": "The Windows password associated with the machine username.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "CredentialStoreId": {
            "format": "int64",
            "description": "The Credential Store used to store the password.",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "description": "The associated user's Id.",
            "type": "integer"
          },
          "Enabled": {
            "description": "Specificies the state of the Robot (enabled/disabled) - a disabled robot cannot connect to Orchestrator",
            "type": "boolean"
          },
          "CredentialType": {
            "description": "The robot credentials type (Default/ SmartCard)",
            "enum": [
              "Default",
              "SmartCard",
              "NCipher",
              "SafeNet",
              "NoCredential"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "RobotDtoCredentialType",
              "modelAsString": false
            }
          },
          "Environments": {
            "description": "The collection of environments the robot is part of.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/EnvironmentDto"
            }
          },
          "RobotEnvironments": {
            "description": "The comma separated textual representation of environment names the robot is part of.",
            "type": "string"
          },
          "ExecutionSettings": {
            "description": "A collection of key value pairs containing execution settings for this robot.",
            "type": "object",
            "additionalProperties": {}
          },
          "IsExternalLicensed": {
            "description": "Flag to indicate if the robot uses an external license",
            "type": "boolean"
          },
          "LimitConcurrentExecution": {
            "description": "Specifies if the robot can be used concurrently on multiple machines",
            "type": "boolean"
          },
          "LastModificationTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastModifierUserId": {
            "format": "int64",
            "type": "integer"
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string"
          },
          "CreatorUserId": {
            "format": "int64",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "SessionDto": {
        "description": "Stores information about the last status reported to Orchestrator by a registered robot.",
        "type": "object",
        "properties": {
          "Robot": {
            "$ref": "#/definitions/RobotWithLicenseDto"
          },
          "HostMachineName": {
            "description": "The name of the machine a Robot is hosted on.",
            "type": "string"
          },
          "MachineId": {
            "format": "int64",
            "description": "The Id of the Machine.",
            "type": "integer"
          },
          "MachineName": {
            "description": "The Machine's name.",
            "type": "string"
          },
          "State": {
            "description": "The value of the last reported status.",
            "enum": [
              "Available",
              "Busy",
              "Disconnected",
              "Unknown"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "SessionDtoState",
              "modelAsString": false
            }
          },
          "Job": {
            "$ref": "#/definitions/JobDto"
          },
          "ReportingTime": {
            "format": "date-time",
            "description": "The date and time when the last heartbeat came.",
            "type": "string"
          },
          "Info": {
            "description": "May store additional information about the robot state.",
            "type": "string"
          },
          "IsUnresponsive": {
            "description": "If the robot did not report status for longer than 120 seconds.",
            "type": "boolean"
          },
          "LicenseErrorCode": {
            "description": "DEPRECATED. Last licensing error status.",
            "enum": [
              "NoLicense",
              "LicenseExpired",
              "LicenseUnregistered",
              "NoAvailableLicenses",
              "NotEnoughAvailableSlots",
              "NotEnoughRuntimeLicenses",
              "LicenseIsAlreadyInUse",
              "InvalidRequest",
              "SlotsExceedLicenseLimit",
              "RuntimeDisabled",
              "ExternalNotSupported",
              "UsageExceedsLicenseLimit",
              "LicenseNotCompatible"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "SessionDtoLicenseErrorCode",
              "modelAsString": false
            },
            "x-deprecated": true
          },
          "OrganizationUnitId": {
            "format": "int64",
            "description": "The folder Id.",
            "type": "integer"
          },
          "FolderName": {
            "description": "The folder display name.",
            "type": "string"
          },
          "RobotSessionType": {
            "description": "The robot session type.",
            "enum": [
              "LongLived",
              "Ephemeral"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "SessionDtoRobotSessionType",
              "modelAsString": false
            }
          },
          "Version": {
            "type": "string"
          },
          "Source": {
            "enum": [
              "Assistant",
              "StudioWeb",
              "StudioDesktop"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "SessionDtoSource",
              "modelAsString": false
            }
          },
          "DebugModeExpirationDate": {
            "format": "date-time",
            "type": "string"
          },
          "UpdateInfo": {
            "$ref": "#/definitions/UpdateInfoDto"
          },
          "InstallationId": {
            "format": "uuid",
            "type": "string"
          },
          "Platform": {
            "enum": [
              "Unknown",
              "Windows",
              "Linux",
              "OSX"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "SessionDtoPlatform",
              "modelAsString": false
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfSessionDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SessionDto"
            }
          }
        }
      },
      "SessionsToggleMachineSessionDebugModeParameters": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "minutes": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "MachineSessionRuntimeDto": {
        "type": "object",
        "properties": {
          "SessionId": {
            "format": "int64",
            "type": "integer"
          },
          "MachineId": {
            "format": "int64",
            "type": "integer"
          },
          "MachineName": {
            "type": "string"
          },
          "HostMachineName": {
            "type": "string"
          },
          "RuntimeType": {
            "enum": [
              "NonProduction",
              "Attended",
              "Unattended",
              "Studio",
              "Development",
              "RpaDeveloper",
              "StudioX",
              "CitizenDeveloper",
              "Headless",
              "StudioPro",
              "RpaDeveloperPro",
              "TestAutomation",
              "AutomationCloud"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "MachineSessionRuntimeDtoRuntimeType",
              "modelAsString": false
            }
          },
          "MachineType": {
            "enum": [
              "Standard",
              "Template"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "MachineSessionRuntimeDtoMachineType",
              "modelAsString": false
            }
          },
          "MachineScope": {
            "enum": [
              "Default",
              "Shared",
              "PersonalWorkspace",
              "Cloud",
              "Serverless"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "MachineSessionRuntimeDtoMachineScope",
              "modelAsString": false
            }
          },
          "Status": {
            "enum": [
              "Available",
              "Busy",
              "Disconnected",
              "Unknown"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "MachineSessionRuntimeDtoStatus",
              "modelAsString": false
            }
          },
          "IsUnresponsive": {
            "type": "boolean"
          },
          "Runtimes": {
            "format": "int64",
            "type": "integer"
          },
          "UsedRuntimes": {
            "format": "int64",
            "type": "integer"
          },
          "ServiceUserName": {
            "type": "string"
          },
          "ReportingTime": {
            "format": "date-time",
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "DebugModeExpirationDate": {
            "format": "date-time",
            "type": "string"
          },
          "Platform": {
            "enum": [
              "Unknown",
              "Windows",
              "Linux",
              "OSX"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "MachineSessionRuntimeDtoPlatform",
              "modelAsString": false
            }
          }
        }
      },
      "ODataValueOfIEnumerableOfMachineSessionRuntimeDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MachineSessionRuntimeDto"
            }
          }
        }
      },
      "MachineSessionDto": {
        "type": "object",
        "properties": {
          "ServiceUserName": {
            "type": "string"
          },
          "Robot": {
            "$ref": "#/definitions/RobotWithLicenseDto"
          },
          "HostMachineName": {
            "description": "The name of the machine a Robot is hosted on.",
            "type": "string"
          },
          "MachineId": {
            "format": "int64",
            "description": "The Id of the Machine.",
            "type": "integer"
          },
          "MachineName": {
            "description": "The Machine's name.",
            "type": "string"
          },
          "State": {
            "description": "The value of the last reported status.",
            "enum": [
              "Available",
              "Busy",
              "Disconnected",
              "Unknown"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "SessionDtoState",
              "modelAsString": false
            }
          },
          "Job": {
            "$ref": "#/definitions/JobDto"
          },
          "ReportingTime": {
            "format": "date-time",
            "description": "The date and time when the last heartbeat came.",
            "type": "string"
          },
          "Info": {
            "description": "May store additional information about the robot state.",
            "type": "string"
          },
          "IsUnresponsive": {
            "description": "If the robot did not report status for longer than 120 seconds.",
            "type": "boolean"
          },
          "LicenseErrorCode": {
            "description": "DEPRECATED. Last licensing error status.",
            "enum": [
              "NoLicense",
              "LicenseExpired",
              "LicenseUnregistered",
              "NoAvailableLicenses",
              "NotEnoughAvailableSlots",
              "NotEnoughRuntimeLicenses",
              "LicenseIsAlreadyInUse",
              "InvalidRequest",
              "SlotsExceedLicenseLimit",
              "RuntimeDisabled",
              "ExternalNotSupported",
              "UsageExceedsLicenseLimit",
              "LicenseNotCompatible"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "SessionDtoLicenseErrorCode",
              "modelAsString": false
            },
            "x-deprecated": true
          },
          "OrganizationUnitId": {
            "format": "int64",
            "description": "The folder Id.",
            "type": "integer"
          },
          "FolderName": {
            "description": "The folder display name.",
            "type": "string"
          },
          "RobotSessionType": {
            "description": "The robot session type.",
            "enum": [
              "LongLived",
              "Ephemeral"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "SessionDtoRobotSessionType",
              "modelAsString": false
            }
          },
          "Version": {
            "type": "string"
          },
          "Source": {
            "enum": [
              "Assistant",
              "StudioWeb",
              "StudioDesktop"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "SessionDtoSource",
              "modelAsString": false
            }
          },
          "DebugModeExpirationDate": {
            "format": "date-time",
            "type": "string"
          },
          "UpdateInfo": {
            "$ref": "#/definitions/UpdateInfoDto"
          },
          "InstallationId": {
            "format": "uuid",
            "type": "string"
          },
          "Platform": {
            "enum": [
              "Unknown",
              "Windows",
              "Linux",
              "OSX"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "SessionDtoPlatform",
              "modelAsString": false
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfMachineSessionDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MachineSessionDto"
            }
          }
        }
      },
      "SettingsDto": {
        "description": "Used to store various predefined application configurations like time zone or account e-mail information.",
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "description": "The name of a specific setting (e.g. Abp.Net.Mail.DefaultFromAddress).",
            "maxLength": 128,
            "type": "string"
          },
          "Value": {
            "description": "The value assigned to a specific setting (e.g. admin@mydomain.com).",
            "type": "string"
          },
          "Scope": {
            "description": "The scope of a specific setting.",
            "enum": [
              "Application",
              "Tenant",
              "User",
              "All"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "SettingsDtoScope",
              "modelAsString": false
            }
          },
          "Id": {
            "type": "string"
          }
        }
      },
      "ODataValueOfIEnumerableOfSettingsDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SettingsDto"
            }
          }
        }
      },
      "SettingsActivateLicenseOnlineParameters": {
        "type": "object",
        "properties": {
          "licenseKey": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "SettingsDeleteBulkRequest": {
        "type": "object",
        "properties": {
          "settingNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SignalRActivitySettingsDto": {
        "description": "SignalR related settings",
        "type": "object",
        "properties": {
          "url": {
            "description": "Absolute url for the SignalR activity hub endpoint",
            "type": "string"
          },
          "skipNegotiation": {
            "description": "If true, activity SignalR client should use websocket transport only and pass SkipNegotation",
            "type": "boolean"
          }
        }
      },
      "ActivitySettingsDto": {
        "description": "Activity settings",
        "type": "object",
        "properties": {
          "ApiVersion": {
            "description": "Current Orchestrator api version",
            "type": "string"
          },
          "SignalR": {
            "$ref": "#/definitions/SignalRActivitySettingsDto"
          }
        }
      },
      "CalendarDto": {
        "type": "object",
        "properties": {
          "TimeZoneId": {
            "maxLength": 80,
            "type": "string"
          },
          "ExcludedDates": {
            "type": "array",
            "items": {
              "format": "date-time",
              "type": "string"
            }
          }
        }
      },
      "ExecutionSettingDefinition": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "ValueType": {
            "type": "string"
          },
          "DefaultValue": {
            "type": "string"
          },
          "PossibleValues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ExecutionSettingsConfiguration": {
        "type": "object",
        "properties": {
          "Scope": {
            "enum": [
              "Global",
              "Robot"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ExecutionSettingsConfigurationScope",
              "modelAsString": false
            }
          },
          "Configuration": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExecutionSettingDefinition"
            }
          }
        }
      },
      "LanguageInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "isDisabled": {
            "type": "boolean"
          }
        }
      },
      "ListResultDtoOfLanguageInfo": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LanguageInfo"
            }
          }
        }
      },
      "SettingsGetLicenseOfflineParameters": {
        "type": "object",
        "properties": {
          "licenseKey": {
            "type": "string"
          },
          "environment": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "ConfigurationEntry": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string"
          },
          "DisplayName": {
            "type": "string"
          },
          "ValueType": {
            "enum": [
              "String",
              "Number",
              "Choice",
              "Boolean",
              "Section",
              "Secret",
              "SecretFile"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "ConfigurationEntryValueType",
              "modelAsString": false
            }
          }
        }
      },
      "ODataValueOfIEnumerableOfConfigurationEntry": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ConfigurationEntry"
            }
          }
        }
      },
      "NameValueDto": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        }
      },
      "ListResultDtoOfNameValueDto": {
        "type": "object",
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/NameValueDto"
            }
          }
        }
      },
      "UpdateSettingsDto": {
        "type": "object",
        "properties": {
          "UpdateServerSource": {
            "enum": [
              "Orchestrator"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "UpdateSettingsDtoUpdateServerSource",
              "modelAsString": false
            }
          },
          "UpdateServerUrl": {
            "type": "string"
          }
        }
      },
      "SettingsUpdateBulkParameters": {
        "type": "object",
        "properties": {
          "settings": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SettingsDto"
            }
          }
        }
      },
      "SettingsUpdateUserSettingParameters": {
        "type": "object",
        "properties": {
          "setting": {
            "$ref": "#/definitions/SettingsDto"
          }
        }
      },
      "SmtpSettingModel": {
        "required": [
          "Host",
          "Port"
        ],
        "type": "object",
        "properties": {
          "Host": {
            "type": "string"
          },
          "Port": {
            "format": "int32",
            "type": "integer"
          },
          "UserName": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "Domain": {
            "type": "string"
          },
          "EnableSsl": {
            "type": "boolean"
          },
          "UseDefaultCredentials": {
            "type": "boolean"
          },
          "DefaultFromAddress": {
            "type": "string"
          },
          "DefaultFromDisplayName": {
            "type": "string"
          }
        }
      },
      "SettingsVerifySmtpSettingParameters": {
        "type": "object",
        "properties": {
          "sendTo": {
            "type": "string"
          },
          "smtpSettingModel": {
            "$ref": "#/definitions/SmtpSettingModel"
          }
        }
      },
      "TaskDto": {
        "description": "Simple Task entity for external access",
        "type": "object",
        "properties": {
          "Status": {
            "description": "Gets or sets the status of this task.",
            "enum": [
              "Unassigned",
              "Pending",
              "Completed"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TaskDtoStatus",
              "modelAsString": false
            }
          },
          "AssignedToUser": {
            "$ref": "#/definitions/UserLoginInfoDto"
          },
          "TaskCatalogName": {
            "description": "Gets or sets the task catalog/category of the task",
            "type": "string"
          },
          "IsCompleted": {
            "type": "boolean"
          },
          "BulkFormLayoutId": {
            "format": "int64",
            "description": "Gets or sets the bulkFormLayoutId of the task",
            "type": "integer"
          },
          "FormLayoutId": {
            "format": "int64",
            "description": "Gets or sets the formLayoutId of the task",
            "type": "integer"
          },
          "Title": {
            "description": "Gets or sets title of this task.",
            "type": "string"
          },
          "Type": {
            "description": "Gets or sets type of this task.",
            "enum": [
              "FormTask",
              "ExternalTask",
              "DocumentValidationTask",
              "DocumentClassificationTask"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TaskMetadataDtoType",
              "modelAsString": false
            }
          },
          "Priority": {
            "description": "Gets or sets priority of this task.",
            "enum": [
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TaskMetadataDtoPriority",
              "modelAsString": false
            }
          },
          "AssignedToUserId": {
            "format": "int64",
            "description": "Gets the id of the actual assigned user, if any.",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "description": "Gets or sets the folder/organization-unit id.",
            "type": "integer"
          },
          "ExternalTag": {
            "description": "Identifier of external system where this task is handled",
            "type": "string"
          },
          "CreatorJobKey": {
            "format": "uuid",
            "description": "Key of the job which created this task",
            "type": "string"
          },
          "WaitJobKey": {
            "format": "uuid",
            "description": "Key job which is waiting on this task",
            "type": "string"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "DeleterUserId": {
            "format": "int64",
            "type": "integer"
          },
          "DeletionTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastModificationTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastModifierUserId": {
            "format": "int64",
            "type": "integer"
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string"
          },
          "CreatorUserId": {
            "format": "int64",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "TaskNoteDto": {
        "type": "object",
        "properties": {
          "CreatorUser": {
            "$ref": "#/definitions/UserLoginInfoDto"
          },
          "LastModifiedUser": {
            "$ref": "#/definitions/UserLoginInfoDto"
          },
          "Key": {
            "format": "uuid",
            "description": "Key",
            "type": "string"
          },
          "TenantId": {
            "format": "int32",
            "description": "Gets or Sets the Tenant Id.",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "description": "Gets or sets the folder/organization-unit id.",
            "type": "integer"
          },
          "TaskId": {
            "format": "int64",
            "description": "Gets or sets the Id of Task to which this Note belongs to.",
            "type": "integer"
          },
          "Text": {
            "description": "Gets or sets the text note for the task.",
            "type": "string"
          },
          "CreatorUserId": {
            "format": "int64",
            "description": "Gets or sets the id of the user who created the Task Note.",
            "type": "integer"
          },
          "CreationTime": {
            "format": "date-time",
            "description": "Gets or sets time at which this task was created.",
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "TaskActivityDto": {
        "type": "object",
        "properties": {
          "CreatorUser": {
            "$ref": "#/definitions/UserLoginInfoDto"
          },
          "TargetUser": {
            "$ref": "#/definitions/UserLoginInfoDto"
          },
          "Task": {
            "$ref": "#/definitions/TaskDto"
          },
          "TaskNote": {
            "$ref": "#/definitions/TaskNoteDto"
          },
          "Key": {
            "format": "uuid",
            "description": "Key",
            "type": "string"
          },
          "TenantId": {
            "format": "int32",
            "description": "Gets or Sets the Tenant Id.",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "description": "Gets or sets the folder/organization-unit id.",
            "type": "integer"
          },
          "TaskId": {
            "format": "int64",
            "description": "Gets or sets the Id of Task to which this Note belongs to.",
            "type": "integer"
          },
          "ActivityType": {
            "description": "Gets or sets the activity type performed on Task.",
            "enum": [
              "Created",
              "Assigned",
              "Reassigned",
              "Unassigned",
              "Saved",
              "Forwarded",
              "Completed",
              "Commented",
              "Deleted",
              "BulkSaved",
              "BulkCompleted"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TaskActivityMetadataDtoActivityType",
              "modelAsString": false
            }
          },
          "CreatorUserId": {
            "format": "int64",
            "description": "Gets or sets the id of the user who created the Task Note.",
            "type": "integer"
          },
          "TargetUserId": {
            "format": "int64",
            "description": "user to whom the Task is assigned on this activity",
            "type": "integer"
          },
          "TaskNoteId": {
            "format": "int64",
            "description": "Gets or sets the Id of the TaskNote created for this activity.",
            "type": "integer"
          },
          "CreationTime": {
            "format": "date-time",
            "description": "Gets or sets time at which this task was created.",
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfTaskActivityDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TaskActivityDto"
            }
          }
        }
      },
      "TaskCatalogDto": {
        "description": "Task Catalog entity for external access",
        "type": "object",
        "properties": {
          "Name": {
            "description": "Name of the Task Catalog.",
            "type": "string"
          },
          "Description": {
            "description": "Description of this task catalog.",
            "type": "string"
          },
          "CreationTime": {
            "format": "date-time",
            "description": "Creation time of task catalog",
            "type": "string"
          },
          "LastModificationTime": {
            "format": "date-time",
            "description": "Last Modification time of task catalog",
            "type": "string"
          },
          "FoldersCount": {
            "format": "int32",
            "description": "Number of folders where the task catalog is shared.",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfTaskCatalogDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TaskCatalogDto"
            }
          }
        }
      },
      "TaskCatalogRequest": {
        "description": "Task Catalog entity for Creating or Updating Task Catalog",
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "description": "Name of the Task Catalog.",
            "maxLength": 50,
            "type": "string"
          },
          "Description": {
            "description": "Description of this task catalog.",
            "maxLength": 512,
            "type": "string"
          }
        }
      },
      "TaskCatalogFoldersShareDto": {
        "type": "object",
        "properties": {
          "TaskCatalogIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          },
          "FolderIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "TaskNoteCreateRequest": {
        "required": [
          "Text"
        ],
        "type": "object",
        "properties": {
          "Text": {
            "description": "Gets or sets note text.",
            "maxLength": 512,
            "minLength": 0,
            "type": "string"
          },
          "TaskId": {
            "format": "int64",
            "description": "Gets or sets Id of the Task",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfTaskNoteDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TaskNoteDto"
            }
          }
        }
      },
      "ODataValueOfIEnumerableOfTaskDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TaskDto"
            }
          }
        }
      },
      "TaskAssignmentRequest": {
        "description": "Class to hold assignment request details of a task.",
        "type": "object",
        "properties": {
          "TaskId": {
            "format": "int64",
            "description": "Gets or sets the taskId for this task assignment.",
            "minimum": 1,
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "description": "Gets or sets the userId for this task assignment.",
            "type": "integer"
          },
          "UserNameOrEmail": {
            "description": "Gets or sets the UserName or Email for this task assignment. If UserId is provided, this property is ignored.",
            "maxLength": 256,
            "type": "string"
          }
        }
      },
      "TasksAssignTasksParameters": {
        "type": "object",
        "properties": {
          "taskAssignments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TaskAssignmentRequest"
            }
          }
        }
      },
      "TaskOperationErrorResponse": {
        "description": "Class to hold error details of an operation (assign/unassign/reassign/delete) on a task.",
        "type": "object",
        "properties": {
          "TaskId": {
            "format": "int64",
            "description": "Gets or sets the taskId for this task operation.",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "description": "Gets or sets the userId for this task operation, null in case of task unassignment",
            "type": "integer"
          },
          "ErrorCode": {
            "format": "int32",
            "description": "Gets or sets the code of error occurred during this task's operation.",
            "type": "integer"
          },
          "ErrorMessage": {
            "description": "Gets or sets the translated message of error occurred during this task's operation.",
            "type": "string"
          },
          "UserNameOrEmail": {
            "description": "Gets or sets the userNameOrEmail for this task operation",
            "type": "string"
          }
        }
      },
      "ODataValueOfIEnumerableOfTaskOperationErrorResponse": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TaskOperationErrorResponse"
            }
          }
        }
      },
      "TasksDeleteTasksParameters": {
        "required": [
          "taskIds"
        ],
        "type": "object",
        "properties": {
          "taskIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "ODataValueOfIEnumerableOfUserLoginInfoDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserLoginInfoDto"
            }
          }
        }
      },
      "TasksReassignTasksParameters": {
        "type": "object",
        "properties": {
          "taskAssignments": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TaskAssignmentRequest"
            }
          }
        }
      },
      "TasksUnassignTasksParameters": {
        "required": [
          "taskIds"
        ],
        "type": "object",
        "properties": {
          "taskIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "TenantLicenseDto": {
        "type": "object",
        "properties": {
          "HostLicenseId": {
            "format": "int64",
            "description": "The host license Id.",
            "type": "integer"
          },
          "CreationTime": {
            "format": "date-time",
            "description": "The date it was uploaded.",
            "type": "string"
          },
          "Code": {
            "description": "The license code.",
            "type": "string"
          },
          "Allowed": {
            "description": "Contains the number of allowed licenses for each type",
            "type": "object",
            "additionalProperties": {
              "format": "int64",
              "type": "integer"
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "TenantDto": {
        "type": "object",
        "properties": {
          "Name": {
            "description": "Name of the tenant.",
            "maxLength": 64,
            "minLength": 0,
            "pattern": "^[\\p{L}][\\p{L}0-9-_]+$",
            "type": "string"
          },
          "Key": {
            "description": "Unique Key of the tenant.",
            "type": "string"
          },
          "DisplayName": {
            "description": "Display name of the the tenant",
            "maxLength": 128,
            "minLength": 0,
            "type": "string"
          },
          "AdminEmailAddress": {
            "format": "email",
            "description": "Default tenant's admin user account email address.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "AdminName": {
            "description": "Default tenant's admin user account name.",
            "maxLength": 32,
            "minLength": 0,
            "type": "string"
          },
          "AdminSurname": {
            "description": "Default tenant's admin user account surname.",
            "maxLength": 32,
            "minLength": 0,
            "type": "string"
          },
          "AdminUserKey": {
            "description": "Default tenant's admin user account key.",
            "type": "string"
          },
          "AdminPassword": {
            "description": "Default tenant's admin user account password. Only valid for create/update operations.",
            "maxLength": 32,
            "minLength": 0,
            "type": "string"
          },
          "LastLoginTime": {
            "format": "date-time",
            "description": "The last time a user logged in this tenant.",
            "type": "string"
          },
          "IsActive": {
            "description": "Specifies if the tenant is active or not.",
            "type": "boolean"
          },
          "AcceptedDomainsList": {
            "description": "Accepted DNS list.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "HasConnectionString": {
            "description": "Specifies if the the tenant has a connection string defined",
            "type": "boolean"
          },
          "ConnectionString": {
            "description": "DB connection string",
            "maxLength": 1024,
            "minLength": 0,
            "type": "string"
          },
          "License": {
            "$ref": "#/definitions/TenantLicenseDto"
          },
          "OrganizationName": {
            "description": "Organization Name of the tenant.",
            "type": "string"
          },
          "Id": {
            "format": "int32",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfTenantDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TenantDto"
            }
          }
        }
      },
      "TenantSetActiveRequest": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "tenantIds": {
            "type": "array",
            "items": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "ODataValueOfIEnumerableOfTestCaseDefinitionDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TestCaseDefinitionDto"
            }
          }
        }
      },
      "ODataValueOfIEnumerableOfTestCaseExecutionDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TestCaseExecutionDto"
            }
          }
        }
      },
      "TestDataQueueItemODataDto": {
        "type": "object",
        "properties": {
          "TestDataQueueId": {
            "format": "int64",
            "type": "integer"
          },
          "ContentJson": {
            "type": "string"
          },
          "IsConsumed": {
            "type": "boolean"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfTestDataQueueItemODataDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TestDataQueueItemODataDto"
            }
          }
        }
      },
      "TestDataQueueDto": {
        "required": [
          "ContentJsonSchema",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "maxLength": 256,
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ContentJsonSchema": {
            "type": "string"
          },
          "ItemsCount": {
            "format": "int32",
            "type": "integer"
          },
          "ConsumedItemsCount": {
            "format": "int32",
            "type": "integer"
          },
          "IsDeleted": {
            "type": "boolean"
          },
          "DeleterUserId": {
            "format": "int64",
            "type": "integer"
          },
          "DeletionTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastModificationTime": {
            "format": "date-time",
            "type": "string"
          },
          "LastModifierUserId": {
            "format": "int64",
            "type": "integer"
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string"
          },
          "CreatorUserId": {
            "format": "int64",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfTestDataQueueDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TestDataQueueDto"
            }
          }
        }
      },
      "ODataValueOfIEnumerableOfTestSetExecutionDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TestSetExecutionDto"
            }
          }
        }
      },
      "ODataValueOfIEnumerableOfTestSetDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TestSetDto"
            }
          }
        }
      },
      "TestSetScheduleDto": {
        "required": [
          "Name",
          "TestSetId",
          "TimeZoneId"
        ],
        "type": "object",
        "properties": {
          "Enabled": {
            "type": "boolean"
          },
          "Name": {
            "maxLength": 256,
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "TestSetId": {
            "format": "int64",
            "type": "integer"
          },
          "TestSetName": {
            "type": "string"
          },
          "TimeZoneId": {
            "maxLength": 80,
            "type": "string"
          },
          "TimeZoneIana": {
            "type": "string"
          },
          "CalendarId": {
            "format": "int64",
            "type": "integer"
          },
          "CalendarName": {
            "type": "string"
          },
          "CronExpression": {
            "type": "string"
          },
          "CronDetails": {
            "type": "string"
          },
          "CronSummary": {
            "type": "string"
          },
          "NextOccurrence": {
            "format": "date-time",
            "type": "string"
          },
          "DisableDate": {
            "format": "date-time",
            "type": "string"
          },
          "ExternalJobKey": {
            "type": "string"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfTestSetScheduleDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TestSetScheduleDto"
            }
          }
        }
      },
      "TestSetSchedulesSetEnabledParameters": {
        "required": [
          "enabled",
          "testSetScheduleIds"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "testSetScheduleIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      },
      "UserLoginAttemptDto": {
        "type": "object",
        "properties": {
          "CreationTime": {
            "format": "date-time",
            "description": "The date and time when the action was performed.",
            "type": "string"
          },
          "ClientIpAddress": {
            "description": "Client IP Address",
            "type": "string"
          },
          "ClientName": {
            "description": "Client name",
            "type": "string"
          },
          "BrowserInfo": {
            "description": "Browser Information",
            "type": "string"
          },
          "Result": {
            "description": "The login's attempt result",
            "enum": [
              "Success",
              "InvalidUserNameOrEmailAddress",
              "InvalidPassword",
              "UserIsNotActive",
              "InvalidTenancyName",
              "TenantIsNotActive",
              "UserEmailIsNotConfirmed",
              "UnknownExternalLogin",
              "LockedOut",
              "UserPhoneNumberIsNotConfirmed"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "UserLoginAttemptDtoResult",
              "modelAsString": false
            }
          },
          "UserId": {
            "format": "int64",
            "description": "The user that authenticated",
            "type": "integer"
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfUserLoginAttemptDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/UserLoginAttemptDto"
            }
          }
        }
      },
      "UsersChangeUserCultureParameters": {
        "type": "object",
        "properties": {
          "culture": {
            "type": "string"
          }
        }
      },
      "UsersSetActiveParameters": {
        "required": [
          "active"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          }
        }
      },
      "UsersToggleOrganizationUnitParameters": {
        "required": [
          "organizationUnitId",
          "toggle"
        ],
        "type": "object",
        "properties": {
          "organizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "toggle": {
            "type": "boolean"
          }
        }
      },
      "UsersToggleRoleParameters": {
        "required": [
          "toggle"
        ],
        "type": "object",
        "properties": {
          "role": {
            "type": "string"
          },
          "toggle": {
            "type": "boolean"
          }
        }
      },
      "UsersChangeCultureParameters": {
        "type": "object",
        "properties": {
          "culture": {
            "type": "string"
          }
        }
      },
      "UserPermissionsCollection": {
        "description": "Stores information about all the permissions a user is associated with in Orchestrator.",
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int64",
            "description": "The Id of the user associated with the permissions.",
            "type": "integer"
          },
          "Permissions": {
            "description": "The collection of names of the permissions the user is associated with.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "WebhookEventDto": {
        "required": [
          "EventType"
        ],
        "type": "object",
        "properties": {
          "EventType": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          }
        }
      },
      "WebhookDto": {
        "required": [
          "AllowInsecureSsl",
          "Enabled",
          "SubscribeToAllEvents",
          "Url"
        ],
        "type": "object",
        "properties": {
          "Url": {
            "format": "uri",
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          },
          "Enabled": {
            "type": "boolean"
          },
          "Secret": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "SubscribeToAllEvents": {
            "type": "boolean"
          },
          "AllowInsecureSsl": {
            "type": "boolean"
          },
          "Events": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookEventDto"
            }
          },
          "Id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "ODataValueOfIEnumerableOfWebhookDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookDto"
            }
          }
        }
      },
      "PingEventDto": {
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "ping"
      },
      "WebhookEventTypeDto": {
        "type": "object",
        "properties": {
          "Name": {
            "description": "Event type key",
            "type": "string"
          },
          "Group": {
            "description": "Group",
            "type": "string"
          }
        }
      },
      "ODataValueOfIEnumerableOfWebhookEventTypeDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookEventTypeDto"
            }
          }
        }
      },
      "WebhookSimpleRobotDto": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "type": "integer"
          },
          "Name": {
            "type": "string"
          },
          "MachineName": {
            "type": "string"
          },
          "LocalSystemAccount": {
            "type": "string"
          }
        }
      },
      "CustomEventDto": {
        "description": "An event triggered by a robot Orchestrator activity",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "EventData": {
            "type": "object",
            "additionalProperties": {}
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "CustomEventDto"
      },
      "TaskCreateRequest": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "type": {
            "description": "Gets or sets type of this task, allowed type is 'ExternalTask'.",
            "enum": [
              "FormTask",
              "ExternalTask",
              "DocumentValidationTask",
              "DocumentClassificationTask"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "TaskCreateRequestType",
              "modelAsString": false
            }
          },
          "title": {
            "description": "Gets or sets title of this task.",
            "maxLength": 512,
            "minLength": 0,
            "type": "string"
          },
          "priority": {
            "description": "Gets or sets priority of this task.",
            "enum": [
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string",
            "x-ms-enum": {
              "name": "BaseTaskCreateRequestPriority",
              "modelAsString": false
            }
          },
          "data": {
            "description": "Task data"
          },
          "taskCatalogName": {
            "description": "Gets or sets the task catalog/category of the task",
            "maxLength": 50,
            "type": "string"
          },
          "externalTag": {
            "description": "Reference or name of external system",
            "maxLength": 128,
            "type": "string"
          }
        }
      },
      "WebhookReleaseDto": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "Key": {
            "type": "string",
            "readOnly": true
          },
          "ProcessKey": {
            "type": "string",
            "readOnly": true
          },
          "ProcessVersion": {
            "type": "string",
            "readOnly": true
          },
          "Name": {
            "type": "string",
            "readOnly": true
          },
          "Description": {
            "type": "string",
            "readOnly": true
          },
          "IsLatestVersion": {
            "type": "boolean",
            "readOnly": true
          },
          "EnvironmentId": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "Environment": {
            "$ref": "#/definitions/WebhookEnvironmentDto"
          },
          "InputArguments": {
            "type": "object",
            "readOnly": true
          }
        }
      },
      "WebhookJobDto": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "Key": {
            "format": "uuid",
            "description": "The unique job identifier.",
            "type": "string",
            "readOnly": true
          },
          "StartTime": {
            "format": "date-time",
            "description": "The date and time when the job execution started or null if the job hasn't started yet.",
            "type": "string",
            "readOnly": true
          },
          "EndTime": {
            "format": "date-time",
            "description": "The date and time when the job execution ended or null if the job hasn't ended yet.",
            "type": "string",
            "readOnly": true
          },
          "State": {
            "description": "The state in which the job is.",
            "enum": [
              "Pending",
              "Running",
              "Stopping",
              "Terminating",
              "Faulted",
              "Successful",
              "Stopped",
              "Suspended",
              "Resumed"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "WebhookJobDtoState",
              "modelAsString": false
            }
          },
          "Source": {
            "description": "The Source name of the job.",
            "type": "string",
            "readOnly": true
          },
          "SourceType": {
            "description": "The Source type of the job.",
            "enum": [
              "Manual",
              "Schedule",
              "Agent",
              "Queue",
              "StudioWeb",
              "IntegrationTrigger",
              "StudioDesktop"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "WebhookJobDtoSourceType",
              "modelAsString": false
            }
          },
          "BatchExecutionKey": {
            "format": "uuid",
            "description": "The unique identifier grouping multiple jobs. It is usually generated when the job is created by a schedule.",
            "type": "string",
            "readOnly": true
          },
          "Info": {
            "description": "Additional information about the current job.",
            "type": "string",
            "readOnly": true
          },
          "StartingScheduleId": {
            "format": "int64",
            "description": "The Id of the schedule that started the job, or null if the job was started by the user.",
            "type": "integer",
            "readOnly": true
          },
          "ReleaseName": {
            "description": "The name of the release associated with the current name.",
            "type": "string",
            "readOnly": true
          },
          "Type": {
            "description": "The type of the job, Attended if started via the robot, Unattended otherwise",
            "enum": [
              "Unattended",
              "Attended"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "WebhookJobDtoType",
              "modelAsString": false
            }
          },
          "HostMachineName": {
            "description": "The name of the machine where the Robot run the job.",
            "type": "string",
            "readOnly": true
          },
          "Robot": {
            "$ref": "#/definitions/WebhookRobotDto"
          },
          "Release": {
            "$ref": "#/definitions/WebhookReleaseDto"
          },
          "InputArguments": {
            "description": "Input parameters in JSON format to be passed to job execution",
            "type": "object",
            "readOnly": true
          },
          "OutputArguments": {
            "description": "Output parameters in JSON format resulted from job execution",
            "type": "object",
            "readOnly": true
          },
          "RuntimeType": {
            "description": "The type of license used to run the job",
            "enum": [
              "NonProduction",
              "Attended",
              "Unattended",
              "Studio",
              "Development",
              "RpaDeveloper",
              "StudioX",
              "CitizenDeveloper",
              "Headless",
              "StudioPro",
              "RpaDeveloperPro",
              "TestAutomation",
              "AutomationCloud"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "WebhookJobDtoRuntimeType",
              "modelAsString": false
            }
          },
          "ProcessType": {
            "description": "The type of process",
            "enum": [
              "Undefined",
              "Process",
              "TestAutomationProcess"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "WebhookJobDtoProcessType",
              "modelAsString": false
            }
          }
        }
      },
      "JobsCreatedEventDto": {
        "description": "This event is raised whenever jobs were created and queued for execution",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "StartInfo": {
            "$ref": "#/definitions/WebhookStartProcessDto"
          },
          "Jobs": {
            "description": "List of jobs that were created and are in pending state",
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookJobDto"
            },
            "readOnly": true
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "job.created"
      },
      "JobsStoppedEventDto": {
        "description": "This event is raised whenever jobs were stopped",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Jobs": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookSimpleJobDto"
            }
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "job.stopped"
      },
      "JobStartedEventDto": {
        "description": "This event is raised whenever a job has started execution on a robot",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Job": {
            "$ref": "#/definitions/WebhookSimpleJobDto"
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "job.started"
      },
      "JobSuspendedEventDto": {
        "description": "This event is raised whenever a job has suspended execution on a robot",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Job": {
            "$ref": "#/definitions/WebhookSimpleJobDto"
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "job.suspended"
      },
      "WebhookProcessScheduleDto": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "Name": {
            "description": "The name of the schedule.",
            "type": "string",
            "readOnly": true
          },
          "Enabled": {
            "description": "Specifies if the schedule is active or not.",
            "type": "boolean",
            "readOnly": true
          },
          "EnvironmentId": {
            "description": "The Id of the environment associated with the schedule.",
            "type": "string",
            "readOnly": true
          },
          "EnvironmentName": {
            "description": "The name of the environment associated with the schedule.",
            "type": "string",
            "readOnly": true
          },
          "StartProcessCron": {
            "description": "The start cron expression of the schedule.",
            "type": "string",
            "readOnly": true
          },
          "StartStrategy": {
            "description": "States which robots from the environment are being run by the schedule.",
            "enum": [
              "All",
              "Specific",
              "RobotCount",
              "JobsCount",
              "ModernJobsCount"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "WebhookProcessScheduleDtoStartStrategy",
              "modelAsString": false
            }
          },
          "StopStrategy": {
            "description": "The way a running process is stopped.",
            "enum": [
              "SoftStop",
              "Kill"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "WebhookProcessScheduleDtoStopStrategy",
              "modelAsString": false
            }
          },
          "ExternalJobKey": {
            "description": "The unique identifier of the external job associated with the jobs generated by this schedule. A key is generated for each group of jobs triggered by this schedule.",
            "type": "string",
            "readOnly": true
          },
          "TimeZoneId": {
            "description": "The timezone under which the schedule will run.",
            "type": "string",
            "readOnly": true
          },
          "TimeZoneIana": {
            "description": "The timezone under which the schedule will run in Iana Standard.",
            "type": "string",
            "readOnly": true
          },
          "UseCalendar": {
            "description": "DEPRECATED. Specify whether the schedule uses a calendar",
            "type": "boolean",
            "readOnly": true,
            "x-deprecated": true
          },
          "CalendarId": {
            "format": "int64",
            "description": "Specify which calendar to use",
            "type": "integer",
            "readOnly": true
          },
          "Release": {
            "$ref": "#/definitions/WebhookSimpleReleaseDto"
          },
          "ExecutorRobots": {
            "description": "The collection of specific robots selected to be targeted by the current schedule. This collection must be empty if the start strategy is not 0 (specific robots).",
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookSimpleRobotDto"
            },
            "readOnly": true
          },
          "InputArguments": {
            "description": "Input parameters that will be passed to each job created by this schedule.",
            "type": "object",
            "readOnly": true
          }
        }
      },
      "ProcessScheduleFailedEventDto": {
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "ProcessSchedule": {
            "$ref": "#/definitions/WebhookProcessScheduleDto"
          },
          "Reason": {
            "type": "string",
            "readOnly": true
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "schedule.failed"
      },
      "WebhookQueueDefinitionDto": {
        "description": "The definition of a work queue. A work queue contains work items that are processed by robots.",
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "Name": {
            "description": "A custom name for the queue.",
            "type": "string",
            "readOnly": true
          },
          "Description": {
            "description": "Used to add additional information about a queue in order to better identify it.",
            "type": "string",
            "readOnly": true
          },
          "MaxNumberOfRetries": {
            "format": "int32",
            "description": "An integer value representing the number of times an item of this queue can be retried if its processing fails with application exception and auto retry is on.",
            "type": "integer",
            "readOnly": true
          },
          "AcceptAutomaticallyRetry": {
            "description": "States whether a robot should retry to process an item if, after processing, it failed with application exception.",
            "type": "boolean",
            "readOnly": true
          },
          "EnforceUniqueReference": {
            "description": "States whether Item Reference field should be unique per Queue. Deleted and retried items are not checked against this rule.",
            "type": "boolean",
            "readOnly": true
          },
          "SlaInMinutes": {
            "format": "int32",
            "description": "An integer value representing the Queue SLA in minutes.",
            "type": "integer",
            "readOnly": true
          },
          "RiskSlaInMinutes": {
            "format": "int32",
            "description": "An integer value representing the Queue RiskSla in minutes.",
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "QueueCreatedEventDto": {
        "description": "This event is raised whenever queue definitions were created",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Queues": {
            "description": "The queue that triggered the event",
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookQueueDefinitionDto"
            }
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "queue.created"
      },
      "QueueDeletedEventDto": {
        "description": "This event is raised whenever queue definitions were deleted",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Queues": {
            "description": "The queue that triggered the event",
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookQueueDefinitionDto"
            }
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "queue.deleted"
      },
      "WebhookProcessingExceptionDto": {
        "type": "object",
        "properties": {
          "Reason": {
            "description": "The reason the processing failed.",
            "type": "string",
            "readOnly": true
          },
          "Details": {
            "description": "Stores additional details about the exception.",
            "type": "string",
            "readOnly": true
          },
          "Type": {
            "description": "The processing exception type, if any.",
            "enum": [
              "ApplicationException",
              "BusinessException"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "WebhookProcessingExceptionDtoType",
              "modelAsString": false
            }
          },
          "AssociatedImageFilePath": {
            "description": "A path on the robot running computer to an image file that stores relevant information about the exception - e.g. a system print screen.",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "WebhookSimpleUserDto": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "UserName": {
            "description": "The name used to login to Orchestrator.",
            "type": "string",
            "readOnly": true
          },
          "Domain": {
            "description": "The domain from which the user is imported",
            "type": "string",
            "readOnly": true
          },
          "FullName": {
            "description": "The full name of the person constructed with the format Name Surname.",
            "type": "string",
            "readOnly": true
          },
          "EmailAddress": {
            "description": "The e-mail address associated with the user.",
            "type": "string",
            "readOnly": true
          },
          "Type": {
            "description": "The user type.",
            "enum": [
              "User",
              "Robot",
              "DirectoryUser",
              "DirectoryGroup",
              "DirectoryRobot"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "WebhookSimpleUserDtoType",
              "modelAsString": false
            }
          },
          "IsActive": {
            "description": "States if the user is active or not. An inactive user cannot login to Orchestrator.",
            "type": "boolean",
            "readOnly": true
          },
          "LastLoginTime": {
            "format": "date-time",
            "description": "The date and time when the user last logged in, or null if the user never logged in.",
            "type": "string",
            "readOnly": true
          },
          "CreationTime": {
            "format": "date-time",
            "description": "The date and time when the user was created.",
            "type": "string",
            "readOnly": true
          },
          "AuthenticationSource": {
            "description": "The source which authenticated this user.",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "WebhookQueueItemDto": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "Key": {
            "format": "uuid",
            "description": "The unique identifier of a queue item.",
            "type": "string",
            "readOnly": true
          },
          "Reference": {
            "description": "An optional, user-specified value for queue item identification.",
            "type": "string",
            "readOnly": true
          },
          "QueueDefinitionId": {
            "format": "int64",
            "description": "The Id of the parent queue.",
            "type": "integer",
            "readOnly": true
          },
          "Status": {
            "description": "The processing state of the item.",
            "enum": [
              "New",
              "InProgress",
              "Failed",
              "Successful",
              "Abandoned",
              "Retried",
              "Deleted"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "WebhookQueueItemDtoStatus",
              "modelAsString": false
            }
          },
          "ReviewStatus": {
            "description": "The review state of the item - applicable only for failed items.",
            "enum": [
              "None",
              "InReview",
              "Verified",
              "Retried"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "WebhookQueueItemDtoReviewStatus",
              "modelAsString": false
            }
          },
          "ProcessingException": {
            "$ref": "#/definitions/WebhookProcessingExceptionDto"
          },
          "DueDate": {
            "format": "date-time",
            "description": "The latest date and time at which the item should be processed. If empty the item can be processed at any given time.",
            "type": "string",
            "readOnly": true
          },
          "Priority": {
            "description": "Sets the processing importance for a given item.",
            "enum": [
              "High",
              "Normal",
              "Low"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "WebhookQueueItemDtoPriority",
              "modelAsString": false
            }
          },
          "CreationTime": {
            "format": "date-time",
            "description": "The date and time when the item was created.",
            "type": "string",
            "readOnly": true
          },
          "DeferDate": {
            "format": "date-time",
            "description": "The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.",
            "type": "string",
            "readOnly": true
          },
          "StartProcessing": {
            "format": "date-time",
            "description": "The date and time at which the item processing started. This is null if the item was not processed.",
            "type": "string",
            "readOnly": true
          },
          "EndProcessing": {
            "format": "date-time",
            "description": "The date and time at which the item processing ended. This is null if the item was not processed.",
            "type": "string",
            "readOnly": true
          },
          "SecondsInPreviousAttempts": {
            "format": "int32",
            "description": "The number of seconds that the last failed processing lasted.",
            "type": "integer",
            "readOnly": true
          },
          "AncestorId": {
            "format": "int64",
            "description": "The Id of an ancestor item connected to the current item.",
            "type": "integer",
            "readOnly": true
          },
          "RetryNumber": {
            "format": "int32",
            "description": "The number of times this work item has been processed.\r\n<para />This can be higher than 0 only if MaxRetried number is set and the item processing failed at least once with ApplicationException.",
            "type": "integer",
            "readOnly": true
          },
          "Progress": {
            "description": "String field which is used to keep track of the business flow progress.",
            "type": "string",
            "readOnly": true
          },
          "ReviewerUserId": {
            "format": "int64",
            "description": "The UserId of the Reviewer, if any.",
            "type": "integer",
            "readOnly": true
          },
          "Robot": {
            "$ref": "#/definitions/WebhookRobotDto"
          },
          "ReviewerUser": {
            "$ref": "#/definitions/WebhookSimpleUserDto"
          },
          "SpecificContent": {
            "description": "A collection of key value pairs containing custom data configured in the Add Queue Item activity, in UiPath Studio.",
            "type": "object",
            "additionalProperties": {},
            "readOnly": true
          },
          "Output": {
            "description": "A collection of key value pairs containing custom data resulted after successful processing.",
            "type": "object",
            "additionalProperties": {},
            "readOnly": true
          }
        }
      },
      "QueueItemAddedEventDto": {
        "description": "This event is raised whenever new queue items were added",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Queue": {
            "$ref": "#/definitions/WebhookQueueDefinitionDto"
          },
          "QueueItems": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookQueueItemDto"
            },
            "readOnly": true
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "queueItem.added"
      },
      "QueueItemCompletedEventDto": {
        "description": "This event is raised whenever a queue item transaction has completed successfully",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "QueueItem": {
            "$ref": "#/definitions/WebhookQueueItemDto"
          },
          "Queue": {
            "$ref": "#/definitions/WebhookQueueDefinitionDto"
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "queueItem.transactionCompleted"
      },
      "QueueItemFailedEventDto": {
        "description": "This event is raised whenever a queue item transaction has failed",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "QueueItem": {
            "$ref": "#/definitions/WebhookQueueItemDto"
          },
          "Queue": {
            "$ref": "#/definitions/WebhookQueueDefinitionDto"
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "queueItem.transactionFailed"
      },
      "QueueItemsAbandonedEventDto": {
        "description": "This event is raised whenever queue item transactions have expired and were abandoned",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Queue": {
            "$ref": "#/definitions/WebhookQueueDefinitionDto"
          },
          "QueueItems": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookQueueItemDto"
            },
            "readOnly": true
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "queueItem.transactionAbandoned"
      },
      "QueueItemStartedEventDto": {
        "description": "This event is raised whenever a new queue item transaction is started",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "QueueItem": {
            "$ref": "#/definitions/WebhookQueueItemDto"
          },
          "Queue": {
            "$ref": "#/definitions/WebhookQueueDefinitionDto"
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "queueItem.transactionStarted"
      },
      "QueueUpdatedEventDto": {
        "description": "This event is raised whenever queue definitions were updated",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Queues": {
            "description": "The queue that triggered the event",
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookQueueDefinitionDto"
            }
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "queue.updated"
      },
      "ReleaseCreatedEventDto": {
        "description": "This event is raised whenever a new release has been created",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Releases": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookReleaseDto"
            },
            "readOnly": true
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "process.created"
      },
      "ReleaseDeletedEventDto": {
        "description": "This event is raised whenever a release has been deleted",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Releases": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookReleaseDto"
            },
            "readOnly": true
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "process.deleted"
      },
      "ReleaseUpdatedEventDto": {
        "description": "This event is raised whenever a release has been updated",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Releases": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookReleaseDto"
            },
            "readOnly": true
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "process.updated"
      },
      "RobotCreatedEventDto": {
        "description": "This event is raised whenever robots were created",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Robots": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookRobotDto"
            },
            "readOnly": true
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "robot.created"
      },
      "RobotDeletedEventDto": {
        "description": "This event is raised whenever robots were deleted",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Robots": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookRobotDto"
            },
            "readOnly": true
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "robot.deleted"
      },
      "RobotUpdatedEventDto": {
        "description": "This event is raised whenever robots were updated",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Robots": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookRobotDto"
            },
            "readOnly": true
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "robot.updated"
      },
      "WebhookSessionDto": {
        "type": "object",
        "properties": {
          "SessionId": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "RobotId": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "HostMachineName": {
            "type": "string",
            "readOnly": true
          },
          "State": {
            "enum": [
              "Available",
              "Busy",
              "Disconnected",
              "Unknown"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "WebhookSessionDtoState",
              "modelAsString": false
            }
          },
          "ReportingTime": {
            "format": "date-time",
            "type": "string",
            "readOnly": true
          },
          "IsUnresponsive": {
            "type": "boolean",
            "readOnly": true
          },
          "LicenseErrorCode": {
            "enum": [
              "NoLicense",
              "LicenseExpired",
              "LicenseUnregistered",
              "NoAvailableLicenses",
              "NotEnoughAvailableSlots",
              "NotEnoughRuntimeLicenses",
              "LicenseIsAlreadyInUse",
              "InvalidRequest",
              "SlotsExceedLicenseLimit",
              "RuntimeDisabled",
              "ExternalNotSupported",
              "UsageExceedsLicenseLimit",
              "LicenseNotCompatible"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "WebhookSessionDtoLicenseErrorCode",
              "modelAsString": false
            }
          }
        }
      },
      "SessionEventDto": {
        "description": "This event is raised whenever robot's session has changed",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Sessions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookSessionDto"
            },
            "readOnly": true
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "robot.status"
      },
      "WebhookTaskAssignmentChangedDto": {
        "description": "This class defines DTO for Tasks Collection for webhook event Task.AssignmentChanged",
        "type": "object",
        "properties": {
          "Title": {
            "type": "string",
            "readOnly": true
          },
          "Type": {
            "enum": [
              "FormTask",
              "ExternalTask",
              "DocumentValidationTask",
              "DocumentClassificationTask"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "BaseWebhookTaskDtoType",
              "modelAsString": false
            }
          },
          "Priority": {
            "enum": [
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "BaseWebhookTaskDtoPriority",
              "modelAsString": false
            }
          },
          "Status": {
            "enum": [
              "Unassigned",
              "Pending",
              "Completed"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "BaseWebhookTaskDtoStatus",
              "modelAsString": false
            }
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string",
            "readOnly": true
          },
          "TaskCatalogName": {
            "type": "string",
            "readOnly": true
          },
          "Id": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "AssignedToUserId": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "AssignedToUserIdOldValue": {
            "format": "int64",
            "description": "Id of the old user to whom the task was assigned",
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "TaskAssignmentChangedEventDto": {
        "description": "Dto for UiPath.Orchestrator.Application.Webhooks.LedgerEvents.TaskAssignmentChanged. Gets raised when task is assigned, reassigned or unassigned",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Tasks": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookTaskAssignmentChangedDto"
            },
            "readOnly": true
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "task.assignmentChanged"
      },
      "WebhookTaskCompletedDto": {
        "description": "This class defines DTO for Tasks Collection for webhook event Task.Completed",
        "type": "object",
        "properties": {
          "Title": {
            "type": "string",
            "readOnly": true
          },
          "Type": {
            "enum": [
              "FormTask",
              "ExternalTask",
              "DocumentValidationTask",
              "DocumentClassificationTask"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "BaseWebhookTaskDtoType",
              "modelAsString": false
            }
          },
          "Priority": {
            "enum": [
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "BaseWebhookTaskDtoPriority",
              "modelAsString": false
            }
          },
          "Status": {
            "enum": [
              "Unassigned",
              "Pending",
              "Completed"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "BaseWebhookTaskDtoStatus",
              "modelAsString": false
            }
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string",
            "readOnly": true
          },
          "TaskCatalogName": {
            "type": "string",
            "readOnly": true
          },
          "Id": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "AssignedToUserId": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "Action": {
            "description": "Action taken to complete the task",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "TaskCompletedEventDto": {
        "description": "Dto for UiPath.Orchestrator.Application.Webhooks.LedgerEvents.TaskCompleted. Gets raised when task is completed",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Tasks": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookTaskCompletedDto"
            },
            "readOnly": true
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "task.completed"
      },
      "WebhookTaskCreatedDto": {
        "description": "This class defines DTO for Tasks Collection for webhook event Task.Created",
        "type": "object",
        "properties": {
          "Title": {
            "type": "string",
            "readOnly": true
          },
          "Type": {
            "enum": [
              "FormTask",
              "ExternalTask",
              "DocumentValidationTask",
              "DocumentClassificationTask"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "BaseWebhookTaskDtoType",
              "modelAsString": false
            }
          },
          "Priority": {
            "enum": [
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "BaseWebhookTaskDtoPriority",
              "modelAsString": false
            }
          },
          "Status": {
            "enum": [
              "Unassigned",
              "Pending",
              "Completed"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "BaseWebhookTaskDtoStatus",
              "modelAsString": false
            }
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string",
            "readOnly": true
          },
          "TaskCatalogName": {
            "type": "string",
            "readOnly": true
          },
          "Id": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "AssignedToUserId": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "TaskCreatedEventDto": {
        "description": "Dto for UiPath.Orchestrator.Application.Webhooks.LedgerEvents.TaskCreated. Gets raised when task is completed",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Tasks": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookTaskCreatedDto"
            },
            "readOnly": true
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "task.created"
      },
      "WebhookTaskDeletedDto": {
        "description": "This class defines DTO for Tasks Collection for webhook event Task.Deleted",
        "type": "object",
        "properties": {
          "Title": {
            "type": "string",
            "readOnly": true
          },
          "Type": {
            "enum": [
              "FormTask",
              "ExternalTask",
              "DocumentValidationTask",
              "DocumentClassificationTask"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "BaseWebhookTaskDtoType",
              "modelAsString": false
            }
          },
          "Priority": {
            "enum": [
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "BaseWebhookTaskDtoPriority",
              "modelAsString": false
            }
          },
          "Status": {
            "enum": [
              "Unassigned",
              "Pending",
              "Completed"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "BaseWebhookTaskDtoStatus",
              "modelAsString": false
            }
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string",
            "readOnly": true
          },
          "TaskCatalogName": {
            "type": "string",
            "readOnly": true
          },
          "Id": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "AssignedToUserId": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "Action": {
            "description": "Action taken while completing the task",
            "type": "string",
            "readOnly": true
          },
          "DeleterUserId": {
            "format": "int64",
            "description": "User who deleted this task",
            "type": "integer",
            "readOnly": true
          },
          "DeletionTime": {
            "format": "date-time",
            "description": "Deletion time of this task",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "TaskDeletedEventDto": {
        "description": "Dto for UiPath.Orchestrator.Application.Webhooks.LedgerEvents.TaskDeleted. Gets raised when task is deleted",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Tasks": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookTaskDeletedDto"
            },
            "readOnly": true
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "task.deleted"
      },
      "WebhookTaskForwardedDto": {
        "description": "This class defines DTO for Tasks Collection for webhook event Task.Forwarded",
        "type": "object",
        "properties": {
          "Title": {
            "type": "string",
            "readOnly": true
          },
          "Type": {
            "enum": [
              "FormTask",
              "ExternalTask",
              "DocumentValidationTask",
              "DocumentClassificationTask"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "BaseWebhookTaskDtoType",
              "modelAsString": false
            }
          },
          "Priority": {
            "enum": [
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "BaseWebhookTaskDtoPriority",
              "modelAsString": false
            }
          },
          "Status": {
            "enum": [
              "Unassigned",
              "Pending",
              "Completed"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "BaseWebhookTaskDtoStatus",
              "modelAsString": false
            }
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string",
            "readOnly": true
          },
          "TaskCatalogName": {
            "type": "string",
            "readOnly": true
          },
          "Id": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "AssignedToUserId": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "ForwardedByUserId": {
            "format": "int64",
            "description": "Id of the user who forwarded this task",
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "TaskForwardedEventDto": {
        "description": "Dto for UiPath.Orchestrator.Application.Webhooks.LedgerEvents.TaskForwarded. Gets raised when task is Forwarded",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Tasks": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookTaskForwardedDto"
            },
            "readOnly": true
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "task.forwarded"
      },
      "WebhookTaskSavedDto": {
        "description": "This class defines DTO for Tasks Collection for webhook event Task.Saved",
        "type": "object",
        "properties": {
          "Title": {
            "type": "string",
            "readOnly": true
          },
          "Type": {
            "enum": [
              "FormTask",
              "ExternalTask",
              "DocumentValidationTask",
              "DocumentClassificationTask"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "BaseWebhookTaskDtoType",
              "modelAsString": false
            }
          },
          "Priority": {
            "enum": [
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "BaseWebhookTaskDtoPriority",
              "modelAsString": false
            }
          },
          "Status": {
            "enum": [
              "Unassigned",
              "Pending",
              "Completed"
            ],
            "type": "string",
            "readOnly": true,
            "x-ms-enum": {
              "name": "BaseWebhookTaskDtoStatus",
              "modelAsString": false
            }
          },
          "CreationTime": {
            "format": "date-time",
            "type": "string",
            "readOnly": true
          },
          "TaskCatalogName": {
            "type": "string",
            "readOnly": true
          },
          "Id": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          },
          "AssignedToUserId": {
            "format": "int64",
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "TaskSavedEventDto": {
        "description": "Dto for UiPath.Orchestrator.Application.Webhooks.LedgerEvents.TaskSaved. Gets raised when task is Saved",
        "required": [
          "EventId",
          "Timestamp",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "EventId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "Timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "Tasks": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/WebhookTaskSavedDto"
            },
            "readOnly": true
          },
          "TenantId": {
            "format": "int32",
            "type": "integer"
          },
          "OrganizationUnitId": {
            "format": "int64",
            "type": "integer"
          },
          "UserId": {
            "format": "int64",
            "type": "integer"
          }
        },
        "x-webhook-event": "task.saved"
      },
      "SpecificEntityMonitoringFilters": {
        "type": "object",
        "properties": {
          "entityId": {
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "includeSubfolders": {
            "type": "boolean"
          },
          "tenantId": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "readOnly": true
          },
          "organizationUnitIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "readOnly": true
          },
          "timeFrameMinutes": {
            "format": "int32",
            "maximum": 1440,
            "minimum": 1,
            "type": "integer"
          },
          "entityIds": {
            "type": "array",
            "items": {
              "format": "int64",
              "type": "integer"
            }
          }
        }
      }
    }
  }
